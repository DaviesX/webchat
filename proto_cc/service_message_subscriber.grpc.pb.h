// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service_message_subscriber.proto
// Original file comments:
// *
// e8yes demo web server.
//
// <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
//
// <p>This program is free software: you can redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// <p>You should have received a copy of the GNU General Public License along with this program. If
// not, see <http://www.gnu.org/licenses/>.
//
#ifndef GRPC_service_5fmessage_5fsubscriber_2eproto__INCLUDED
#define GRPC_service_5fmessage_5fsubscriber_2eproto__INCLUDED

#include "service_message_subscriber.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace e8 {

class MessageSubscriberService final {
 public:
  static constexpr char const* service_full_name() {
    return "e8.MessageSubscriberService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Subscribe to the real-time message queue. Identity is required.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::e8::SubscribeRealTimeMessageQueueResponse>> SubscribeRealTimeMessageQueue(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::e8::SubscribeRealTimeMessageQueueResponse>>(SubscribeRealTimeMessageQueueRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::e8::SubscribeRealTimeMessageQueueResponse>> AsyncSubscribeRealTimeMessageQueue(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::e8::SubscribeRealTimeMessageQueueResponse>>(AsyncSubscribeRealTimeMessageQueueRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::e8::SubscribeRealTimeMessageQueueResponse>> PrepareAsyncSubscribeRealTimeMessageQueue(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::e8::SubscribeRealTimeMessageQueueResponse>>(PrepareAsyncSubscribeRealTimeMessageQueueRaw(context, request, cq));
    }
    // Long polling version of the above function.
    virtual ::grpc::Status SubscribeRealTimeMessageQueueLP(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::e8::SubscribeRealTimeMessageQueueResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::SubscribeRealTimeMessageQueueResponse>> AsyncSubscribeRealTimeMessageQueueLP(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::SubscribeRealTimeMessageQueueResponse>>(AsyncSubscribeRealTimeMessageQueueLPRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::SubscribeRealTimeMessageQueueResponse>> PrepareAsyncSubscribeRealTimeMessageQueueLP(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::SubscribeRealTimeMessageQueueResponse>>(PrepareAsyncSubscribeRealTimeMessageQueueLPRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Subscribe to the real-time message queue. Identity is required.
      // Long polling version of the above function.
      virtual void SubscribeRealTimeMessageQueueLP(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest* request, ::e8::SubscribeRealTimeMessageQueueResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::e8::SubscribeRealTimeMessageQueueResponse>* SubscribeRealTimeMessageQueueRaw(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::e8::SubscribeRealTimeMessageQueueResponse>* AsyncSubscribeRealTimeMessageQueueRaw(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::e8::SubscribeRealTimeMessageQueueResponse>* PrepareAsyncSubscribeRealTimeMessageQueueRaw(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::SubscribeRealTimeMessageQueueResponse>* AsyncSubscribeRealTimeMessageQueueLPRaw(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::SubscribeRealTimeMessageQueueResponse>* PrepareAsyncSubscribeRealTimeMessageQueueLPRaw(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::e8::SubscribeRealTimeMessageQueueResponse>> SubscribeRealTimeMessageQueue(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::e8::SubscribeRealTimeMessageQueueResponse>>(SubscribeRealTimeMessageQueueRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::e8::SubscribeRealTimeMessageQueueResponse>> AsyncSubscribeRealTimeMessageQueue(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::e8::SubscribeRealTimeMessageQueueResponse>>(AsyncSubscribeRealTimeMessageQueueRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::e8::SubscribeRealTimeMessageQueueResponse>> PrepareAsyncSubscribeRealTimeMessageQueue(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::e8::SubscribeRealTimeMessageQueueResponse>>(PrepareAsyncSubscribeRealTimeMessageQueueRaw(context, request, cq));
    }
    ::grpc::Status SubscribeRealTimeMessageQueueLP(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::e8::SubscribeRealTimeMessageQueueResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::SubscribeRealTimeMessageQueueResponse>> AsyncSubscribeRealTimeMessageQueueLP(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::SubscribeRealTimeMessageQueueResponse>>(AsyncSubscribeRealTimeMessageQueueLPRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::SubscribeRealTimeMessageQueueResponse>> PrepareAsyncSubscribeRealTimeMessageQueueLP(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::SubscribeRealTimeMessageQueueResponse>>(PrepareAsyncSubscribeRealTimeMessageQueueLPRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SubscribeRealTimeMessageQueueLP(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest* request, ::e8::SubscribeRealTimeMessageQueueResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::e8::SubscribeRealTimeMessageQueueResponse>* SubscribeRealTimeMessageQueueRaw(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request) override;
    ::grpc::ClientAsyncReader< ::e8::SubscribeRealTimeMessageQueueResponse>* AsyncSubscribeRealTimeMessageQueueRaw(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::e8::SubscribeRealTimeMessageQueueResponse>* PrepareAsyncSubscribeRealTimeMessageQueueRaw(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::SubscribeRealTimeMessageQueueResponse>* AsyncSubscribeRealTimeMessageQueueLPRaw(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::SubscribeRealTimeMessageQueueResponse>* PrepareAsyncSubscribeRealTimeMessageQueueLPRaw(::grpc::ClientContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeRealTimeMessageQueue_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeRealTimeMessageQueueLP_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Subscribe to the real-time message queue. Identity is required.
    virtual ::grpc::Status SubscribeRealTimeMessageQueue(::grpc::ServerContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest* request, ::grpc::ServerWriter< ::e8::SubscribeRealTimeMessageQueueResponse>* writer);
    // Long polling version of the above function.
    virtual ::grpc::Status SubscribeRealTimeMessageQueueLP(::grpc::ServerContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest* request, ::e8::SubscribeRealTimeMessageQueueResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeRealTimeMessageQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubscribeRealTimeMessageQueue() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SubscribeRealTimeMessageQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeRealTimeMessageQueue(::grpc::ServerContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest* request, ::grpc::ServerWriter< ::e8::SubscribeRealTimeMessageQueueResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeRealTimeMessageQueue(::grpc::ServerContext* context, ::e8::SubscribeRealTimeMessageQueueRequest* request, ::grpc::ServerAsyncWriter< ::e8::SubscribeRealTimeMessageQueueResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeRealTimeMessageQueueLP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubscribeRealTimeMessageQueueLP() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SubscribeRealTimeMessageQueueLP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeRealTimeMessageQueueLP(::grpc::ServerContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest* request, ::e8::SubscribeRealTimeMessageQueueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeRealTimeMessageQueueLP(::grpc::ServerContext* context, ::e8::SubscribeRealTimeMessageQueueRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::SubscribeRealTimeMessageQueueResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SubscribeRealTimeMessageQueue<WithAsyncMethod_SubscribeRealTimeMessageQueueLP<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SubscribeRealTimeMessageQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubscribeRealTimeMessageQueue() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SubscribeRealTimeMessageQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeRealTimeMessageQueue(::grpc::ServerContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest* request, ::grpc::ServerWriter< ::e8::SubscribeRealTimeMessageQueueResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeRealTimeMessageQueueLP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubscribeRealTimeMessageQueueLP() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SubscribeRealTimeMessageQueueLP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeRealTimeMessageQueueLP(::grpc::ServerContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest* request, ::e8::SubscribeRealTimeMessageQueueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeRealTimeMessageQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SubscribeRealTimeMessageQueue() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SubscribeRealTimeMessageQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeRealTimeMessageQueue(::grpc::ServerContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest* request, ::grpc::ServerWriter< ::e8::SubscribeRealTimeMessageQueueResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeRealTimeMessageQueue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeRealTimeMessageQueueLP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SubscribeRealTimeMessageQueueLP() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SubscribeRealTimeMessageQueueLP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeRealTimeMessageQueueLP(::grpc::ServerContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest* request, ::e8::SubscribeRealTimeMessageQueueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeRealTimeMessageQueueLP(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SubscribeRealTimeMessageQueueLP : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SubscribeRealTimeMessageQueueLP() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::SubscribeRealTimeMessageQueueRequest, ::e8::SubscribeRealTimeMessageQueueResponse>(std::bind(&WithStreamedUnaryMethod_SubscribeRealTimeMessageQueueLP<BaseClass>::StreamedSubscribeRealTimeMessageQueueLP, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SubscribeRealTimeMessageQueueLP() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeRealTimeMessageQueueLP(::grpc::ServerContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest* request, ::e8::SubscribeRealTimeMessageQueueResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSubscribeRealTimeMessageQueueLP(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::SubscribeRealTimeMessageQueueRequest,::e8::SubscribeRealTimeMessageQueueResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SubscribeRealTimeMessageQueueLP<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeRealTimeMessageQueue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_SubscribeRealTimeMessageQueue() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::e8::SubscribeRealTimeMessageQueueRequest, ::e8::SubscribeRealTimeMessageQueueResponse>(std::bind(&WithSplitStreamingMethod_SubscribeRealTimeMessageQueue<BaseClass>::StreamedSubscribeRealTimeMessageQueue, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeRealTimeMessageQueue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeRealTimeMessageQueue(::grpc::ServerContext* context, const ::e8::SubscribeRealTimeMessageQueueRequest* request, ::grpc::ServerWriter< ::e8::SubscribeRealTimeMessageQueueResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeRealTimeMessageQueue(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::e8::SubscribeRealTimeMessageQueueRequest,::e8::SubscribeRealTimeMessageQueueResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeRealTimeMessageQueue<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_SubscribeRealTimeMessageQueue<WithStreamedUnaryMethod_SubscribeRealTimeMessageQueueLP<Service > > StreamedService;
};

}  // namespace e8


#endif  // GRPC_service_5fmessage_5fsubscriber_2eproto__INCLUDED
