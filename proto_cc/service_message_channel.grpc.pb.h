// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service_message_channel.proto
// Original file comments:
// *
// e8yes demo web.
//
// <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
//
// <p>This program is free software: you can redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// <p>You should have received a copy of the GNU General Public License along with this program. If
// not, see <http://www.gnu.org/licenses/>.
//
#ifndef GRPC_service_5fmessage_5fchannel_2eproto__INCLUDED
#define GRPC_service_5fmessage_5fchannel_2eproto__INCLUDED

#include "service_message_channel.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace e8 {

class MessageChannelService final {
 public:
  static constexpr char const* service_full_name() {
    return "e8.MessageChannelService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Create a new message channel. The logged-in user will be the 
    // administrator of this channel.
    virtual ::grpc::Status CreateMessageChannel(::grpc::ClientContext* context, const ::e8::CreateMessageChannelRequest& request, ::e8::CreateMessageChannelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::CreateMessageChannelResponse>> AsyncCreateMessageChannel(::grpc::ClientContext* context, const ::e8::CreateMessageChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::CreateMessageChannelResponse>>(AsyncCreateMessageChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::CreateMessageChannelResponse>> PrepareAsyncCreateMessageChannel(::grpc::ClientContext* context, const ::e8::CreateMessageChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::CreateMessageChannelResponse>>(PrepareAsyncCreateMessageChannelRaw(context, request, cq));
    }
    // Add a member to the specified channel where the logged-in user is the
    // administrator.
    virtual ::grpc::Status AddMemberToMessageChannel(::grpc::ClientContext* context, const ::e8::AddMemberToMessageChannelRequest& request, ::e8::AddMemberToMessageChannelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::AddMemberToMessageChannelResponse>> AsyncAddMemberToMessageChannel(::grpc::ClientContext* context, const ::e8::AddMemberToMessageChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::AddMemberToMessageChannelResponse>>(AsyncAddMemberToMessageChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::AddMemberToMessageChannelResponse>> PrepareAsyncAddMemberToMessageChannel(::grpc::ClientContext* context, const ::e8::AddMemberToMessageChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::AddMemberToMessageChannelResponse>>(PrepareAsyncAddMemberToMessageChannelRaw(context, request, cq));
    }
    // Get an encryption key of the specified channel where the logged-in
    // user is a member.
    virtual ::grpc::Status GetMessageChannelKey(::grpc::ClientContext* context, const ::e8::GetMessageChannelKeyRequest& request, ::e8::GetMessageChannelKeyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetMessageChannelKeyResponse>> AsyncGetMessageChannelKey(::grpc::ClientContext* context, const ::e8::GetMessageChannelKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetMessageChannelKeyResponse>>(AsyncGetMessageChannelKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetMessageChannelKeyResponse>> PrepareAsyncGetMessageChannelKey(::grpc::ClientContext* context, const ::e8::GetMessageChannelKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetMessageChannelKeyResponse>>(PrepareAsyncGetMessageChannelKeyRaw(context, request, cq));
    }
    // Remove the logged-in user from the specified channel.
    virtual ::grpc::Status LeaveMessageChannel(::grpc::ClientContext* context, const ::e8::LeaveMessageChannelRequest& request, ::e8::LeaveMessageChannelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::LeaveMessageChannelResponse>> AsyncLeaveMessageChannel(::grpc::ClientContext* context, const ::e8::LeaveMessageChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::LeaveMessageChannelResponse>>(AsyncLeaveMessageChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::LeaveMessageChannelResponse>> PrepareAsyncLeaveMessageChannel(::grpc::ClientContext* context, const ::e8::LeaveMessageChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::LeaveMessageChannelResponse>>(PrepareAsyncLeaveMessageChannelRaw(context, request, cq));
    }
    // Get a list of channels that the logged-in user is a member of.
    virtual ::grpc::Status GetJoinedInMessageChannels(::grpc::ClientContext* context, const ::e8::GetJoinedInMessageChannelsRequest& request, ::e8::GetJoinedInMessageChannelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetJoinedInMessageChannelsResponse>> AsyncGetJoinedInMessageChannels(::grpc::ClientContext* context, const ::e8::GetJoinedInMessageChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetJoinedInMessageChannelsResponse>>(AsyncGetJoinedInMessageChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetJoinedInMessageChannelsResponse>> PrepareAsyncGetJoinedInMessageChannels(::grpc::ClientContext* context, const ::e8::GetJoinedInMessageChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetJoinedInMessageChannelsResponse>>(PrepareAsyncGetJoinedInMessageChannelsRaw(context, request, cq));
    }
    // Get information about the members in the specified channel.
    virtual ::grpc::Status GetMessageChannelMembers(::grpc::ClientContext* context, const ::e8::GetMessageChannelMembersRequest& request, ::e8::GetMessageChannelMembersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetMessageChannelMembersResponse>> AsyncGetMessageChannelMembers(::grpc::ClientContext* context, const ::e8::GetMessageChannelMembersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetMessageChannelMembersResponse>>(AsyncGetMessageChannelMembersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetMessageChannelMembersResponse>> PrepareAsyncGetMessageChannelMembers(::grpc::ClientContext* context, const ::e8::GetMessageChannelMembersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetMessageChannelMembersResponse>>(PrepareAsyncGetMessageChannelMembersRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Create a new message channel. The logged-in user will be the 
      // administrator of this channel.
      virtual void CreateMessageChannel(::grpc::ClientContext* context, const ::e8::CreateMessageChannelRequest* request, ::e8::CreateMessageChannelResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Add a member to the specified channel where the logged-in user is the
      // administrator.
      virtual void AddMemberToMessageChannel(::grpc::ClientContext* context, const ::e8::AddMemberToMessageChannelRequest* request, ::e8::AddMemberToMessageChannelResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get an encryption key of the specified channel where the logged-in
      // user is a member.
      virtual void GetMessageChannelKey(::grpc::ClientContext* context, const ::e8::GetMessageChannelKeyRequest* request, ::e8::GetMessageChannelKeyResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Remove the logged-in user from the specified channel.
      virtual void LeaveMessageChannel(::grpc::ClientContext* context, const ::e8::LeaveMessageChannelRequest* request, ::e8::LeaveMessageChannelResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get a list of channels that the logged-in user is a member of.
      virtual void GetJoinedInMessageChannels(::grpc::ClientContext* context, const ::e8::GetJoinedInMessageChannelsRequest* request, ::e8::GetJoinedInMessageChannelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get information about the members in the specified channel.
      virtual void GetMessageChannelMembers(::grpc::ClientContext* context, const ::e8::GetMessageChannelMembersRequest* request, ::e8::GetMessageChannelMembersResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::CreateMessageChannelResponse>* AsyncCreateMessageChannelRaw(::grpc::ClientContext* context, const ::e8::CreateMessageChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::CreateMessageChannelResponse>* PrepareAsyncCreateMessageChannelRaw(::grpc::ClientContext* context, const ::e8::CreateMessageChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::AddMemberToMessageChannelResponse>* AsyncAddMemberToMessageChannelRaw(::grpc::ClientContext* context, const ::e8::AddMemberToMessageChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::AddMemberToMessageChannelResponse>* PrepareAsyncAddMemberToMessageChannelRaw(::grpc::ClientContext* context, const ::e8::AddMemberToMessageChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetMessageChannelKeyResponse>* AsyncGetMessageChannelKeyRaw(::grpc::ClientContext* context, const ::e8::GetMessageChannelKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetMessageChannelKeyResponse>* PrepareAsyncGetMessageChannelKeyRaw(::grpc::ClientContext* context, const ::e8::GetMessageChannelKeyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::LeaveMessageChannelResponse>* AsyncLeaveMessageChannelRaw(::grpc::ClientContext* context, const ::e8::LeaveMessageChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::LeaveMessageChannelResponse>* PrepareAsyncLeaveMessageChannelRaw(::grpc::ClientContext* context, const ::e8::LeaveMessageChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetJoinedInMessageChannelsResponse>* AsyncGetJoinedInMessageChannelsRaw(::grpc::ClientContext* context, const ::e8::GetJoinedInMessageChannelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetJoinedInMessageChannelsResponse>* PrepareAsyncGetJoinedInMessageChannelsRaw(::grpc::ClientContext* context, const ::e8::GetJoinedInMessageChannelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetMessageChannelMembersResponse>* AsyncGetMessageChannelMembersRaw(::grpc::ClientContext* context, const ::e8::GetMessageChannelMembersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetMessageChannelMembersResponse>* PrepareAsyncGetMessageChannelMembersRaw(::grpc::ClientContext* context, const ::e8::GetMessageChannelMembersRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateMessageChannel(::grpc::ClientContext* context, const ::e8::CreateMessageChannelRequest& request, ::e8::CreateMessageChannelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::CreateMessageChannelResponse>> AsyncCreateMessageChannel(::grpc::ClientContext* context, const ::e8::CreateMessageChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::CreateMessageChannelResponse>>(AsyncCreateMessageChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::CreateMessageChannelResponse>> PrepareAsyncCreateMessageChannel(::grpc::ClientContext* context, const ::e8::CreateMessageChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::CreateMessageChannelResponse>>(PrepareAsyncCreateMessageChannelRaw(context, request, cq));
    }
    ::grpc::Status AddMemberToMessageChannel(::grpc::ClientContext* context, const ::e8::AddMemberToMessageChannelRequest& request, ::e8::AddMemberToMessageChannelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::AddMemberToMessageChannelResponse>> AsyncAddMemberToMessageChannel(::grpc::ClientContext* context, const ::e8::AddMemberToMessageChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::AddMemberToMessageChannelResponse>>(AsyncAddMemberToMessageChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::AddMemberToMessageChannelResponse>> PrepareAsyncAddMemberToMessageChannel(::grpc::ClientContext* context, const ::e8::AddMemberToMessageChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::AddMemberToMessageChannelResponse>>(PrepareAsyncAddMemberToMessageChannelRaw(context, request, cq));
    }
    ::grpc::Status GetMessageChannelKey(::grpc::ClientContext* context, const ::e8::GetMessageChannelKeyRequest& request, ::e8::GetMessageChannelKeyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetMessageChannelKeyResponse>> AsyncGetMessageChannelKey(::grpc::ClientContext* context, const ::e8::GetMessageChannelKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetMessageChannelKeyResponse>>(AsyncGetMessageChannelKeyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetMessageChannelKeyResponse>> PrepareAsyncGetMessageChannelKey(::grpc::ClientContext* context, const ::e8::GetMessageChannelKeyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetMessageChannelKeyResponse>>(PrepareAsyncGetMessageChannelKeyRaw(context, request, cq));
    }
    ::grpc::Status LeaveMessageChannel(::grpc::ClientContext* context, const ::e8::LeaveMessageChannelRequest& request, ::e8::LeaveMessageChannelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::LeaveMessageChannelResponse>> AsyncLeaveMessageChannel(::grpc::ClientContext* context, const ::e8::LeaveMessageChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::LeaveMessageChannelResponse>>(AsyncLeaveMessageChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::LeaveMessageChannelResponse>> PrepareAsyncLeaveMessageChannel(::grpc::ClientContext* context, const ::e8::LeaveMessageChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::LeaveMessageChannelResponse>>(PrepareAsyncLeaveMessageChannelRaw(context, request, cq));
    }
    ::grpc::Status GetJoinedInMessageChannels(::grpc::ClientContext* context, const ::e8::GetJoinedInMessageChannelsRequest& request, ::e8::GetJoinedInMessageChannelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetJoinedInMessageChannelsResponse>> AsyncGetJoinedInMessageChannels(::grpc::ClientContext* context, const ::e8::GetJoinedInMessageChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetJoinedInMessageChannelsResponse>>(AsyncGetJoinedInMessageChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetJoinedInMessageChannelsResponse>> PrepareAsyncGetJoinedInMessageChannels(::grpc::ClientContext* context, const ::e8::GetJoinedInMessageChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetJoinedInMessageChannelsResponse>>(PrepareAsyncGetJoinedInMessageChannelsRaw(context, request, cq));
    }
    ::grpc::Status GetMessageChannelMembers(::grpc::ClientContext* context, const ::e8::GetMessageChannelMembersRequest& request, ::e8::GetMessageChannelMembersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetMessageChannelMembersResponse>> AsyncGetMessageChannelMembers(::grpc::ClientContext* context, const ::e8::GetMessageChannelMembersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetMessageChannelMembersResponse>>(AsyncGetMessageChannelMembersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetMessageChannelMembersResponse>> PrepareAsyncGetMessageChannelMembers(::grpc::ClientContext* context, const ::e8::GetMessageChannelMembersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetMessageChannelMembersResponse>>(PrepareAsyncGetMessageChannelMembersRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateMessageChannel(::grpc::ClientContext* context, const ::e8::CreateMessageChannelRequest* request, ::e8::CreateMessageChannelResponse* response, std::function<void(::grpc::Status)>) override;
      void AddMemberToMessageChannel(::grpc::ClientContext* context, const ::e8::AddMemberToMessageChannelRequest* request, ::e8::AddMemberToMessageChannelResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMessageChannelKey(::grpc::ClientContext* context, const ::e8::GetMessageChannelKeyRequest* request, ::e8::GetMessageChannelKeyResponse* response, std::function<void(::grpc::Status)>) override;
      void LeaveMessageChannel(::grpc::ClientContext* context, const ::e8::LeaveMessageChannelRequest* request, ::e8::LeaveMessageChannelResponse* response, std::function<void(::grpc::Status)>) override;
      void GetJoinedInMessageChannels(::grpc::ClientContext* context, const ::e8::GetJoinedInMessageChannelsRequest* request, ::e8::GetJoinedInMessageChannelsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetMessageChannelMembers(::grpc::ClientContext* context, const ::e8::GetMessageChannelMembersRequest* request, ::e8::GetMessageChannelMembersResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::e8::CreateMessageChannelResponse>* AsyncCreateMessageChannelRaw(::grpc::ClientContext* context, const ::e8::CreateMessageChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::CreateMessageChannelResponse>* PrepareAsyncCreateMessageChannelRaw(::grpc::ClientContext* context, const ::e8::CreateMessageChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::AddMemberToMessageChannelResponse>* AsyncAddMemberToMessageChannelRaw(::grpc::ClientContext* context, const ::e8::AddMemberToMessageChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::AddMemberToMessageChannelResponse>* PrepareAsyncAddMemberToMessageChannelRaw(::grpc::ClientContext* context, const ::e8::AddMemberToMessageChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::GetMessageChannelKeyResponse>* AsyncGetMessageChannelKeyRaw(::grpc::ClientContext* context, const ::e8::GetMessageChannelKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::GetMessageChannelKeyResponse>* PrepareAsyncGetMessageChannelKeyRaw(::grpc::ClientContext* context, const ::e8::GetMessageChannelKeyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::LeaveMessageChannelResponse>* AsyncLeaveMessageChannelRaw(::grpc::ClientContext* context, const ::e8::LeaveMessageChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::LeaveMessageChannelResponse>* PrepareAsyncLeaveMessageChannelRaw(::grpc::ClientContext* context, const ::e8::LeaveMessageChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::GetJoinedInMessageChannelsResponse>* AsyncGetJoinedInMessageChannelsRaw(::grpc::ClientContext* context, const ::e8::GetJoinedInMessageChannelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::GetJoinedInMessageChannelsResponse>* PrepareAsyncGetJoinedInMessageChannelsRaw(::grpc::ClientContext* context, const ::e8::GetJoinedInMessageChannelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::GetMessageChannelMembersResponse>* AsyncGetMessageChannelMembersRaw(::grpc::ClientContext* context, const ::e8::GetMessageChannelMembersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::GetMessageChannelMembersResponse>* PrepareAsyncGetMessageChannelMembersRaw(::grpc::ClientContext* context, const ::e8::GetMessageChannelMembersRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateMessageChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_AddMemberToMessageChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMessageChannelKey_;
    const ::grpc::internal::RpcMethod rpcmethod_LeaveMessageChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_GetJoinedInMessageChannels_;
    const ::grpc::internal::RpcMethod rpcmethod_GetMessageChannelMembers_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Create a new message channel. The logged-in user will be the 
    // administrator of this channel.
    virtual ::grpc::Status CreateMessageChannel(::grpc::ServerContext* context, const ::e8::CreateMessageChannelRequest* request, ::e8::CreateMessageChannelResponse* response);
    // Add a member to the specified channel where the logged-in user is the
    // administrator.
    virtual ::grpc::Status AddMemberToMessageChannel(::grpc::ServerContext* context, const ::e8::AddMemberToMessageChannelRequest* request, ::e8::AddMemberToMessageChannelResponse* response);
    // Get an encryption key of the specified channel where the logged-in
    // user is a member.
    virtual ::grpc::Status GetMessageChannelKey(::grpc::ServerContext* context, const ::e8::GetMessageChannelKeyRequest* request, ::e8::GetMessageChannelKeyResponse* response);
    // Remove the logged-in user from the specified channel.
    virtual ::grpc::Status LeaveMessageChannel(::grpc::ServerContext* context, const ::e8::LeaveMessageChannelRequest* request, ::e8::LeaveMessageChannelResponse* response);
    // Get a list of channels that the logged-in user is a member of.
    virtual ::grpc::Status GetJoinedInMessageChannels(::grpc::ServerContext* context, const ::e8::GetJoinedInMessageChannelsRequest* request, ::e8::GetJoinedInMessageChannelsResponse* response);
    // Get information about the members in the specified channel.
    virtual ::grpc::Status GetMessageChannelMembers(::grpc::ServerContext* context, const ::e8::GetMessageChannelMembersRequest* request, ::e8::GetMessageChannelMembersResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateMessageChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateMessageChannel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateMessageChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMessageChannel(::grpc::ServerContext* context, const ::e8::CreateMessageChannelRequest* request, ::e8::CreateMessageChannelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateMessageChannel(::grpc::ServerContext* context, ::e8::CreateMessageChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::CreateMessageChannelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddMemberToMessageChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddMemberToMessageChannel() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AddMemberToMessageChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddMemberToMessageChannel(::grpc::ServerContext* context, const ::e8::AddMemberToMessageChannelRequest* request, ::e8::AddMemberToMessageChannelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddMemberToMessageChannel(::grpc::ServerContext* context, ::e8::AddMemberToMessageChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::AddMemberToMessageChannelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMessageChannelKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetMessageChannelKey() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetMessageChannelKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessageChannelKey(::grpc::ServerContext* context, const ::e8::GetMessageChannelKeyRequest* request, ::e8::GetMessageChannelKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessageChannelKey(::grpc::ServerContext* context, ::e8::GetMessageChannelKeyRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::GetMessageChannelKeyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_LeaveMessageChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_LeaveMessageChannel() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_LeaveMessageChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveMessageChannel(::grpc::ServerContext* context, const ::e8::LeaveMessageChannelRequest* request, ::e8::LeaveMessageChannelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveMessageChannel(::grpc::ServerContext* context, ::e8::LeaveMessageChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::LeaveMessageChannelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetJoinedInMessageChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetJoinedInMessageChannels() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetJoinedInMessageChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJoinedInMessageChannels(::grpc::ServerContext* context, const ::e8::GetJoinedInMessageChannelsRequest* request, ::e8::GetJoinedInMessageChannelsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetJoinedInMessageChannels(::grpc::ServerContext* context, ::e8::GetJoinedInMessageChannelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::GetJoinedInMessageChannelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetMessageChannelMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetMessageChannelMembers() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetMessageChannelMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessageChannelMembers(::grpc::ServerContext* context, const ::e8::GetMessageChannelMembersRequest* request, ::e8::GetMessageChannelMembersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessageChannelMembers(::grpc::ServerContext* context, ::e8::GetMessageChannelMembersRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::GetMessageChannelMembersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateMessageChannel<WithAsyncMethod_AddMemberToMessageChannel<WithAsyncMethod_GetMessageChannelKey<WithAsyncMethod_LeaveMessageChannel<WithAsyncMethod_GetJoinedInMessageChannels<WithAsyncMethod_GetMessageChannelMembers<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateMessageChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateMessageChannel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateMessageChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMessageChannel(::grpc::ServerContext* context, const ::e8::CreateMessageChannelRequest* request, ::e8::CreateMessageChannelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddMemberToMessageChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddMemberToMessageChannel() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AddMemberToMessageChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddMemberToMessageChannel(::grpc::ServerContext* context, const ::e8::AddMemberToMessageChannelRequest* request, ::e8::AddMemberToMessageChannelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMessageChannelKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetMessageChannelKey() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetMessageChannelKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessageChannelKey(::grpc::ServerContext* context, const ::e8::GetMessageChannelKeyRequest* request, ::e8::GetMessageChannelKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_LeaveMessageChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_LeaveMessageChannel() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_LeaveMessageChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveMessageChannel(::grpc::ServerContext* context, const ::e8::LeaveMessageChannelRequest* request, ::e8::LeaveMessageChannelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetJoinedInMessageChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetJoinedInMessageChannels() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetJoinedInMessageChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJoinedInMessageChannels(::grpc::ServerContext* context, const ::e8::GetJoinedInMessageChannelsRequest* request, ::e8::GetJoinedInMessageChannelsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetMessageChannelMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetMessageChannelMembers() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetMessageChannelMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessageChannelMembers(::grpc::ServerContext* context, const ::e8::GetMessageChannelMembersRequest* request, ::e8::GetMessageChannelMembersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateMessageChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateMessageChannel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateMessageChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateMessageChannel(::grpc::ServerContext* context, const ::e8::CreateMessageChannelRequest* request, ::e8::CreateMessageChannelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateMessageChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddMemberToMessageChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddMemberToMessageChannel() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AddMemberToMessageChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddMemberToMessageChannel(::grpc::ServerContext* context, const ::e8::AddMemberToMessageChannelRequest* request, ::e8::AddMemberToMessageChannelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddMemberToMessageChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMessageChannelKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetMessageChannelKey() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetMessageChannelKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessageChannelKey(::grpc::ServerContext* context, const ::e8::GetMessageChannelKeyRequest* request, ::e8::GetMessageChannelKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessageChannelKey(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_LeaveMessageChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_LeaveMessageChannel() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_LeaveMessageChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status LeaveMessageChannel(::grpc::ServerContext* context, const ::e8::LeaveMessageChannelRequest* request, ::e8::LeaveMessageChannelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestLeaveMessageChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetJoinedInMessageChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetJoinedInMessageChannels() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetJoinedInMessageChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJoinedInMessageChannels(::grpc::ServerContext* context, const ::e8::GetJoinedInMessageChannelsRequest* request, ::e8::GetJoinedInMessageChannelsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetJoinedInMessageChannels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetMessageChannelMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetMessageChannelMembers() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetMessageChannelMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetMessageChannelMembers(::grpc::ServerContext* context, const ::e8::GetMessageChannelMembersRequest* request, ::e8::GetMessageChannelMembersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetMessageChannelMembers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateMessageChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateMessageChannel() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::CreateMessageChannelRequest, ::e8::CreateMessageChannelResponse>(std::bind(&WithStreamedUnaryMethod_CreateMessageChannel<BaseClass>::StreamedCreateMessageChannel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateMessageChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateMessageChannel(::grpc::ServerContext* context, const ::e8::CreateMessageChannelRequest* request, ::e8::CreateMessageChannelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateMessageChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::CreateMessageChannelRequest,::e8::CreateMessageChannelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddMemberToMessageChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddMemberToMessageChannel() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::AddMemberToMessageChannelRequest, ::e8::AddMemberToMessageChannelResponse>(std::bind(&WithStreamedUnaryMethod_AddMemberToMessageChannel<BaseClass>::StreamedAddMemberToMessageChannel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddMemberToMessageChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddMemberToMessageChannel(::grpc::ServerContext* context, const ::e8::AddMemberToMessageChannelRequest* request, ::e8::AddMemberToMessageChannelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddMemberToMessageChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::AddMemberToMessageChannelRequest,::e8::AddMemberToMessageChannelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMessageChannelKey : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetMessageChannelKey() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::GetMessageChannelKeyRequest, ::e8::GetMessageChannelKeyResponse>(std::bind(&WithStreamedUnaryMethod_GetMessageChannelKey<BaseClass>::StreamedGetMessageChannelKey, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMessageChannelKey() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMessageChannelKey(::grpc::ServerContext* context, const ::e8::GetMessageChannelKeyRequest* request, ::e8::GetMessageChannelKeyResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMessageChannelKey(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::GetMessageChannelKeyRequest,::e8::GetMessageChannelKeyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_LeaveMessageChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_LeaveMessageChannel() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::LeaveMessageChannelRequest, ::e8::LeaveMessageChannelResponse>(std::bind(&WithStreamedUnaryMethod_LeaveMessageChannel<BaseClass>::StreamedLeaveMessageChannel, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_LeaveMessageChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status LeaveMessageChannel(::grpc::ServerContext* context, const ::e8::LeaveMessageChannelRequest* request, ::e8::LeaveMessageChannelResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedLeaveMessageChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::LeaveMessageChannelRequest,::e8::LeaveMessageChannelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetJoinedInMessageChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetJoinedInMessageChannels() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::GetJoinedInMessageChannelsRequest, ::e8::GetJoinedInMessageChannelsResponse>(std::bind(&WithStreamedUnaryMethod_GetJoinedInMessageChannels<BaseClass>::StreamedGetJoinedInMessageChannels, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetJoinedInMessageChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetJoinedInMessageChannels(::grpc::ServerContext* context, const ::e8::GetJoinedInMessageChannelsRequest* request, ::e8::GetJoinedInMessageChannelsResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetJoinedInMessageChannels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::GetJoinedInMessageChannelsRequest,::e8::GetJoinedInMessageChannelsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetMessageChannelMembers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetMessageChannelMembers() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::GetMessageChannelMembersRequest, ::e8::GetMessageChannelMembersResponse>(std::bind(&WithStreamedUnaryMethod_GetMessageChannelMembers<BaseClass>::StreamedGetMessageChannelMembers, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetMessageChannelMembers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetMessageChannelMembers(::grpc::ServerContext* context, const ::e8::GetMessageChannelMembersRequest* request, ::e8::GetMessageChannelMembersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetMessageChannelMembers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::GetMessageChannelMembersRequest,::e8::GetMessageChannelMembersResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateMessageChannel<WithStreamedUnaryMethod_AddMemberToMessageChannel<WithStreamedUnaryMethod_GetMessageChannelKey<WithStreamedUnaryMethod_LeaveMessageChannel<WithStreamedUnaryMethod_GetJoinedInMessageChannels<WithStreamedUnaryMethod_GetMessageChannelMembers<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateMessageChannel<WithStreamedUnaryMethod_AddMemberToMessageChannel<WithStreamedUnaryMethod_GetMessageChannelKey<WithStreamedUnaryMethod_LeaveMessageChannel<WithStreamedUnaryMethod_GetJoinedInMessageChannels<WithStreamedUnaryMethod_GetMessageChannelMembers<Service > > > > > > StreamedService;
};

}  // namespace e8


#endif  // GRPC_service_5fmessage_5fchannel_2eproto__INCLUDED
