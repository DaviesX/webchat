// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_message_queue.proto

#ifndef PROTOBUF_INCLUDED_service_5fmessage_5fqueue_2eproto
#define PROTOBUF_INCLUDED_service_5fmessage_5fqueue_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "message_queue_stats.pb.h"
#include "real_time_message.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_service_5fmessage_5fqueue_2eproto 

namespace protobuf_service_5fmessage_5fqueue_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_service_5fmessage_5fqueue_2eproto
namespace e8 {
class DequeueMessageRequest;
class DequeueMessageRequestDefaultTypeInternal;
extern DequeueMessageRequestDefaultTypeInternal _DequeueMessageRequest_default_instance_;
class DequeueMessageResponse;
class DequeueMessageResponseDefaultTypeInternal;
extern DequeueMessageResponseDefaultTypeInternal _DequeueMessageResponse_default_instance_;
class EnqueueMessageRequest;
class EnqueueMessageRequestDefaultTypeInternal;
extern EnqueueMessageRequestDefaultTypeInternal _EnqueueMessageRequest_default_instance_;
class EnqueueMessageResponse;
class EnqueueMessageResponseDefaultTypeInternal;
extern EnqueueMessageResponseDefaultTypeInternal _EnqueueMessageResponse_default_instance_;
class GetQueueStatsRequest;
class GetQueueStatsRequestDefaultTypeInternal;
extern GetQueueStatsRequestDefaultTypeInternal _GetQueueStatsRequest_default_instance_;
class GetQueueStatsResponse;
class GetQueueStatsResponseDefaultTypeInternal;
extern GetQueueStatsResponseDefaultTypeInternal _GetQueueStatsResponse_default_instance_;
class ListQueueMessageRequest;
class ListQueueMessageRequestDefaultTypeInternal;
extern ListQueueMessageRequestDefaultTypeInternal _ListQueueMessageRequest_default_instance_;
class ListQueueMessageResponse;
class ListQueueMessageResponseDefaultTypeInternal;
extern ListQueueMessageResponseDefaultTypeInternal _ListQueueMessageResponse_default_instance_;
}  // namespace e8
namespace google {
namespace protobuf {
template<> ::e8::DequeueMessageRequest* Arena::CreateMaybeMessage<::e8::DequeueMessageRequest>(Arena*);
template<> ::e8::DequeueMessageResponse* Arena::CreateMaybeMessage<::e8::DequeueMessageResponse>(Arena*);
template<> ::e8::EnqueueMessageRequest* Arena::CreateMaybeMessage<::e8::EnqueueMessageRequest>(Arena*);
template<> ::e8::EnqueueMessageResponse* Arena::CreateMaybeMessage<::e8::EnqueueMessageResponse>(Arena*);
template<> ::e8::GetQueueStatsRequest* Arena::CreateMaybeMessage<::e8::GetQueueStatsRequest>(Arena*);
template<> ::e8::GetQueueStatsResponse* Arena::CreateMaybeMessage<::e8::GetQueueStatsResponse>(Arena*);
template<> ::e8::ListQueueMessageRequest* Arena::CreateMaybeMessage<::e8::ListQueueMessageRequest>(Arena*);
template<> ::e8::ListQueueMessageResponse* Arena::CreateMaybeMessage<::e8::ListQueueMessageResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace e8 {

// ===================================================================

class EnqueueMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.EnqueueMessageRequest) */ {
 public:
  EnqueueMessageRequest();
  virtual ~EnqueueMessageRequest();

  EnqueueMessageRequest(const EnqueueMessageRequest& from);

  inline EnqueueMessageRequest& operator=(const EnqueueMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnqueueMessageRequest(EnqueueMessageRequest&& from) noexcept
    : EnqueueMessageRequest() {
    *this = ::std::move(from);
  }

  inline EnqueueMessageRequest& operator=(EnqueueMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnqueueMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnqueueMessageRequest* internal_default_instance() {
    return reinterpret_cast<const EnqueueMessageRequest*>(
               &_EnqueueMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EnqueueMessageRequest* other);
  friend void swap(EnqueueMessageRequest& a, EnqueueMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnqueueMessageRequest* New() const final {
    return CreateMaybeMessage<EnqueueMessageRequest>(NULL);
  }

  EnqueueMessageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnqueueMessageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnqueueMessageRequest& from);
  void MergeFrom(const EnqueueMessageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnqueueMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .e8.RealTimeMessage messages = 2;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 2;
  ::e8::RealTimeMessage* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::e8::RealTimeMessage >*
      mutable_messages();
  const ::e8::RealTimeMessage& messages(int index) const;
  ::e8::RealTimeMessage* add_messages();
  const ::google::protobuf::RepeatedPtrField< ::e8::RealTimeMessage >&
      messages() const;

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:e8.EnqueueMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::e8::RealTimeMessage > messages_;
  ::google::protobuf::int64 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_5fmessage_5fqueue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EnqueueMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.EnqueueMessageResponse) */ {
 public:
  EnqueueMessageResponse();
  virtual ~EnqueueMessageResponse();

  EnqueueMessageResponse(const EnqueueMessageResponse& from);

  inline EnqueueMessageResponse& operator=(const EnqueueMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EnqueueMessageResponse(EnqueueMessageResponse&& from) noexcept
    : EnqueueMessageResponse() {
    *this = ::std::move(from);
  }

  inline EnqueueMessageResponse& operator=(EnqueueMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EnqueueMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EnqueueMessageResponse* internal_default_instance() {
    return reinterpret_cast<const EnqueueMessageResponse*>(
               &_EnqueueMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EnqueueMessageResponse* other);
  friend void swap(EnqueueMessageResponse& a, EnqueueMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EnqueueMessageResponse* New() const final {
    return CreateMaybeMessage<EnqueueMessageResponse>(NULL);
  }

  EnqueueMessageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EnqueueMessageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EnqueueMessageResponse& from);
  void MergeFrom(const EnqueueMessageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnqueueMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:e8.EnqueueMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_5fmessage_5fqueue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DequeueMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.DequeueMessageRequest) */ {
 public:
  DequeueMessageRequest();
  virtual ~DequeueMessageRequest();

  DequeueMessageRequest(const DequeueMessageRequest& from);

  inline DequeueMessageRequest& operator=(const DequeueMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DequeueMessageRequest(DequeueMessageRequest&& from) noexcept
    : DequeueMessageRequest() {
    *this = ::std::move(from);
  }

  inline DequeueMessageRequest& operator=(DequeueMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DequeueMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DequeueMessageRequest* internal_default_instance() {
    return reinterpret_cast<const DequeueMessageRequest*>(
               &_DequeueMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DequeueMessageRequest* other);
  friend void swap(DequeueMessageRequest& a, DequeueMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DequeueMessageRequest* New() const final {
    return CreateMaybeMessage<DequeueMessageRequest>(NULL);
  }

  DequeueMessageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DequeueMessageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DequeueMessageRequest& from);
  void MergeFrom(const DequeueMessageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DequeueMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // bool previous_message_delivered = 2;
  void clear_previous_message_delivered();
  static const int kPreviousMessageDeliveredFieldNumber = 2;
  bool previous_message_delivered() const;
  void set_previous_message_delivered(bool value);

  // bool end_operation = 3;
  void clear_end_operation();
  static const int kEndOperationFieldNumber = 3;
  bool end_operation() const;
  void set_end_operation(bool value);

  // int32 wait_duration_secs = 4;
  void clear_wait_duration_secs();
  static const int kWaitDurationSecsFieldNumber = 4;
  ::google::protobuf::int32 wait_duration_secs() const;
  void set_wait_duration_secs(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:e8.DequeueMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 user_id_;
  bool previous_message_delivered_;
  bool end_operation_;
  ::google::protobuf::int32 wait_duration_secs_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_5fmessage_5fqueue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DequeueMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.DequeueMessageResponse) */ {
 public:
  DequeueMessageResponse();
  virtual ~DequeueMessageResponse();

  DequeueMessageResponse(const DequeueMessageResponse& from);

  inline DequeueMessageResponse& operator=(const DequeueMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DequeueMessageResponse(DequeueMessageResponse&& from) noexcept
    : DequeueMessageResponse() {
    *this = ::std::move(from);
  }

  inline DequeueMessageResponse& operator=(DequeueMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DequeueMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DequeueMessageResponse* internal_default_instance() {
    return reinterpret_cast<const DequeueMessageResponse*>(
               &_DequeueMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DequeueMessageResponse* other);
  friend void swap(DequeueMessageResponse& a, DequeueMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DequeueMessageResponse* New() const final {
    return CreateMaybeMessage<DequeueMessageResponse>(NULL);
  }

  DequeueMessageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DequeueMessageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DequeueMessageResponse& from);
  void MergeFrom(const DequeueMessageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DequeueMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .e8.RealTimeMessage message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  private:
  const ::e8::RealTimeMessage& _internal_message() const;
  public:
  const ::e8::RealTimeMessage& message() const;
  ::e8::RealTimeMessage* release_message();
  ::e8::RealTimeMessage* mutable_message();
  void set_allocated_message(::e8::RealTimeMessage* message);

  // @@protoc_insertion_point(class_scope:e8.DequeueMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::e8::RealTimeMessage* message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_5fmessage_5fqueue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListQueueMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.ListQueueMessageRequest) */ {
 public:
  ListQueueMessageRequest();
  virtual ~ListQueueMessageRequest();

  ListQueueMessageRequest(const ListQueueMessageRequest& from);

  inline ListQueueMessageRequest& operator=(const ListQueueMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListQueueMessageRequest(ListQueueMessageRequest&& from) noexcept
    : ListQueueMessageRequest() {
    *this = ::std::move(from);
  }

  inline ListQueueMessageRequest& operator=(ListQueueMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListQueueMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListQueueMessageRequest* internal_default_instance() {
    return reinterpret_cast<const ListQueueMessageRequest*>(
               &_ListQueueMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ListQueueMessageRequest* other);
  friend void swap(ListQueueMessageRequest& a, ListQueueMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListQueueMessageRequest* New() const final {
    return CreateMaybeMessage<ListQueueMessageRequest>(NULL);
  }

  ListQueueMessageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListQueueMessageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListQueueMessageRequest& from);
  void MergeFrom(const ListQueueMessageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListQueueMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 user_id = 1;
  void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:e8.ListQueueMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_5fmessage_5fqueue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ListQueueMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.ListQueueMessageResponse) */ {
 public:
  ListQueueMessageResponse();
  virtual ~ListQueueMessageResponse();

  ListQueueMessageResponse(const ListQueueMessageResponse& from);

  inline ListQueueMessageResponse& operator=(const ListQueueMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListQueueMessageResponse(ListQueueMessageResponse&& from) noexcept
    : ListQueueMessageResponse() {
    *this = ::std::move(from);
  }

  inline ListQueueMessageResponse& operator=(ListQueueMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ListQueueMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListQueueMessageResponse* internal_default_instance() {
    return reinterpret_cast<const ListQueueMessageResponse*>(
               &_ListQueueMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ListQueueMessageResponse* other);
  friend void swap(ListQueueMessageResponse& a, ListQueueMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListQueueMessageResponse* New() const final {
    return CreateMaybeMessage<ListQueueMessageResponse>(NULL);
  }

  ListQueueMessageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListQueueMessageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListQueueMessageResponse& from);
  void MergeFrom(const ListQueueMessageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListQueueMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .e8.RealTimeMessage messages = 1;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 1;
  ::e8::RealTimeMessage* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::e8::RealTimeMessage >*
      mutable_messages();
  const ::e8::RealTimeMessage& messages(int index) const;
  ::e8::RealTimeMessage* add_messages();
  const ::google::protobuf::RepeatedPtrField< ::e8::RealTimeMessage >&
      messages() const;

  // @@protoc_insertion_point(class_scope:e8.ListQueueMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::e8::RealTimeMessage > messages_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_5fmessage_5fqueue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetQueueStatsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.GetQueueStatsRequest) */ {
 public:
  GetQueueStatsRequest();
  virtual ~GetQueueStatsRequest();

  GetQueueStatsRequest(const GetQueueStatsRequest& from);

  inline GetQueueStatsRequest& operator=(const GetQueueStatsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetQueueStatsRequest(GetQueueStatsRequest&& from) noexcept
    : GetQueueStatsRequest() {
    *this = ::std::move(from);
  }

  inline GetQueueStatsRequest& operator=(GetQueueStatsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetQueueStatsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetQueueStatsRequest* internal_default_instance() {
    return reinterpret_cast<const GetQueueStatsRequest*>(
               &_GetQueueStatsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(GetQueueStatsRequest* other);
  friend void swap(GetQueueStatsRequest& a, GetQueueStatsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetQueueStatsRequest* New() const final {
    return CreateMaybeMessage<GetQueueStatsRequest>(NULL);
  }

  GetQueueStatsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetQueueStatsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetQueueStatsRequest& from);
  void MergeFrom(const GetQueueStatsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetQueueStatsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:e8.GetQueueStatsRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_5fmessage_5fqueue_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetQueueStatsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.GetQueueStatsResponse) */ {
 public:
  GetQueueStatsResponse();
  virtual ~GetQueueStatsResponse();

  GetQueueStatsResponse(const GetQueueStatsResponse& from);

  inline GetQueueStatsResponse& operator=(const GetQueueStatsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetQueueStatsResponse(GetQueueStatsResponse&& from) noexcept
    : GetQueueStatsResponse() {
    *this = ::std::move(from);
  }

  inline GetQueueStatsResponse& operator=(GetQueueStatsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetQueueStatsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetQueueStatsResponse* internal_default_instance() {
    return reinterpret_cast<const GetQueueStatsResponse*>(
               &_GetQueueStatsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(GetQueueStatsResponse* other);
  friend void swap(GetQueueStatsResponse& a, GetQueueStatsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetQueueStatsResponse* New() const final {
    return CreateMaybeMessage<GetQueueStatsResponse>(NULL);
  }

  GetQueueStatsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetQueueStatsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetQueueStatsResponse& from);
  void MergeFrom(const GetQueueStatsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetQueueStatsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .e8.MessageQueueStats stats = 1;
  bool has_stats() const;
  void clear_stats();
  static const int kStatsFieldNumber = 1;
  private:
  const ::e8::MessageQueueStats& _internal_stats() const;
  public:
  const ::e8::MessageQueueStats& stats() const;
  ::e8::MessageQueueStats* release_stats();
  ::e8::MessageQueueStats* mutable_stats();
  void set_allocated_stats(::e8::MessageQueueStats* stats);

  // @@protoc_insertion_point(class_scope:e8.GetQueueStatsResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::e8::MessageQueueStats* stats_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_5fmessage_5fqueue_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EnqueueMessageRequest

// int64 user_id = 1;
inline void EnqueueMessageRequest::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 EnqueueMessageRequest::user_id() const {
  // @@protoc_insertion_point(field_get:e8.EnqueueMessageRequest.user_id)
  return user_id_;
}
inline void EnqueueMessageRequest::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:e8.EnqueueMessageRequest.user_id)
}

// repeated .e8.RealTimeMessage messages = 2;
inline int EnqueueMessageRequest::messages_size() const {
  return messages_.size();
}
inline ::e8::RealTimeMessage* EnqueueMessageRequest::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:e8.EnqueueMessageRequest.messages)
  return messages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::e8::RealTimeMessage >*
EnqueueMessageRequest::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:e8.EnqueueMessageRequest.messages)
  return &messages_;
}
inline const ::e8::RealTimeMessage& EnqueueMessageRequest::messages(int index) const {
  // @@protoc_insertion_point(field_get:e8.EnqueueMessageRequest.messages)
  return messages_.Get(index);
}
inline ::e8::RealTimeMessage* EnqueueMessageRequest::add_messages() {
  // @@protoc_insertion_point(field_add:e8.EnqueueMessageRequest.messages)
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::e8::RealTimeMessage >&
EnqueueMessageRequest::messages() const {
  // @@protoc_insertion_point(field_list:e8.EnqueueMessageRequest.messages)
  return messages_;
}

// -------------------------------------------------------------------

// EnqueueMessageResponse

// -------------------------------------------------------------------

// DequeueMessageRequest

// int64 user_id = 1;
inline void DequeueMessageRequest::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 DequeueMessageRequest::user_id() const {
  // @@protoc_insertion_point(field_get:e8.DequeueMessageRequest.user_id)
  return user_id_;
}
inline void DequeueMessageRequest::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:e8.DequeueMessageRequest.user_id)
}

// bool previous_message_delivered = 2;
inline void DequeueMessageRequest::clear_previous_message_delivered() {
  previous_message_delivered_ = false;
}
inline bool DequeueMessageRequest::previous_message_delivered() const {
  // @@protoc_insertion_point(field_get:e8.DequeueMessageRequest.previous_message_delivered)
  return previous_message_delivered_;
}
inline void DequeueMessageRequest::set_previous_message_delivered(bool value) {
  
  previous_message_delivered_ = value;
  // @@protoc_insertion_point(field_set:e8.DequeueMessageRequest.previous_message_delivered)
}

// bool end_operation = 3;
inline void DequeueMessageRequest::clear_end_operation() {
  end_operation_ = false;
}
inline bool DequeueMessageRequest::end_operation() const {
  // @@protoc_insertion_point(field_get:e8.DequeueMessageRequest.end_operation)
  return end_operation_;
}
inline void DequeueMessageRequest::set_end_operation(bool value) {
  
  end_operation_ = value;
  // @@protoc_insertion_point(field_set:e8.DequeueMessageRequest.end_operation)
}

// int32 wait_duration_secs = 4;
inline void DequeueMessageRequest::clear_wait_duration_secs() {
  wait_duration_secs_ = 0;
}
inline ::google::protobuf::int32 DequeueMessageRequest::wait_duration_secs() const {
  // @@protoc_insertion_point(field_get:e8.DequeueMessageRequest.wait_duration_secs)
  return wait_duration_secs_;
}
inline void DequeueMessageRequest::set_wait_duration_secs(::google::protobuf::int32 value) {
  
  wait_duration_secs_ = value;
  // @@protoc_insertion_point(field_set:e8.DequeueMessageRequest.wait_duration_secs)
}

// -------------------------------------------------------------------

// DequeueMessageResponse

// .e8.RealTimeMessage message = 1;
inline bool DequeueMessageResponse::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline const ::e8::RealTimeMessage& DequeueMessageResponse::_internal_message() const {
  return *message_;
}
inline const ::e8::RealTimeMessage& DequeueMessageResponse::message() const {
  const ::e8::RealTimeMessage* p = message_;
  // @@protoc_insertion_point(field_get:e8.DequeueMessageResponse.message)
  return p != NULL ? *p : *reinterpret_cast<const ::e8::RealTimeMessage*>(
      &::e8::_RealTimeMessage_default_instance_);
}
inline ::e8::RealTimeMessage* DequeueMessageResponse::release_message() {
  // @@protoc_insertion_point(field_release:e8.DequeueMessageResponse.message)
  
  ::e8::RealTimeMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::e8::RealTimeMessage* DequeueMessageResponse::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::e8::RealTimeMessage>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:e8.DequeueMessageResponse.message)
  return message_;
}
inline void DequeueMessageResponse::set_allocated_message(::e8::RealTimeMessage* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(message_);
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:e8.DequeueMessageResponse.message)
}

// -------------------------------------------------------------------

// ListQueueMessageRequest

// int64 user_id = 1;
inline void ListQueueMessageRequest::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ListQueueMessageRequest::user_id() const {
  // @@protoc_insertion_point(field_get:e8.ListQueueMessageRequest.user_id)
  return user_id_;
}
inline void ListQueueMessageRequest::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:e8.ListQueueMessageRequest.user_id)
}

// -------------------------------------------------------------------

// ListQueueMessageResponse

// repeated .e8.RealTimeMessage messages = 1;
inline int ListQueueMessageResponse::messages_size() const {
  return messages_.size();
}
inline ::e8::RealTimeMessage* ListQueueMessageResponse::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:e8.ListQueueMessageResponse.messages)
  return messages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::e8::RealTimeMessage >*
ListQueueMessageResponse::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:e8.ListQueueMessageResponse.messages)
  return &messages_;
}
inline const ::e8::RealTimeMessage& ListQueueMessageResponse::messages(int index) const {
  // @@protoc_insertion_point(field_get:e8.ListQueueMessageResponse.messages)
  return messages_.Get(index);
}
inline ::e8::RealTimeMessage* ListQueueMessageResponse::add_messages() {
  // @@protoc_insertion_point(field_add:e8.ListQueueMessageResponse.messages)
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::e8::RealTimeMessage >&
ListQueueMessageResponse::messages() const {
  // @@protoc_insertion_point(field_list:e8.ListQueueMessageResponse.messages)
  return messages_;
}

// -------------------------------------------------------------------

// GetQueueStatsRequest

// -------------------------------------------------------------------

// GetQueueStatsResponse

// .e8.MessageQueueStats stats = 1;
inline bool GetQueueStatsResponse::has_stats() const {
  return this != internal_default_instance() && stats_ != NULL;
}
inline const ::e8::MessageQueueStats& GetQueueStatsResponse::_internal_stats() const {
  return *stats_;
}
inline const ::e8::MessageQueueStats& GetQueueStatsResponse::stats() const {
  const ::e8::MessageQueueStats* p = stats_;
  // @@protoc_insertion_point(field_get:e8.GetQueueStatsResponse.stats)
  return p != NULL ? *p : *reinterpret_cast<const ::e8::MessageQueueStats*>(
      &::e8::_MessageQueueStats_default_instance_);
}
inline ::e8::MessageQueueStats* GetQueueStatsResponse::release_stats() {
  // @@protoc_insertion_point(field_release:e8.GetQueueStatsResponse.stats)
  
  ::e8::MessageQueueStats* temp = stats_;
  stats_ = NULL;
  return temp;
}
inline ::e8::MessageQueueStats* GetQueueStatsResponse::mutable_stats() {
  
  if (stats_ == NULL) {
    auto* p = CreateMaybeMessage<::e8::MessageQueueStats>(GetArenaNoVirtual());
    stats_ = p;
  }
  // @@protoc_insertion_point(field_mutable:e8.GetQueueStatsResponse.stats)
  return stats_;
}
inline void GetQueueStatsResponse::set_allocated_stats(::e8::MessageQueueStats* stats) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(stats_);
  }
  if (stats) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      stats = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, stats, submessage_arena);
    }
    
  } else {
    
  }
  stats_ = stats;
  // @@protoc_insertion_point(field_set_allocated:e8.GetQueueStatsResponse.stats)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace e8

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_service_5fmessage_5fqueue_2eproto
