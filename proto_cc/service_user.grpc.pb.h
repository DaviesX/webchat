// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service_user.proto
// Original file comments:
// *
// e8yes demo web server.
//
// <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
//
// <p>This program is free software: you can redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// <p>You should have received a copy of the GNU General Public License along with this program. If
// not, see <http://www.gnu.org/licenses/>.
//
#ifndef GRPC_service_5fuser_2eproto__INCLUDED
#define GRPC_service_5fuser_2eproto__INCLUDED

#include "service_user.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace e8 {

class UserService final {
 public:
  static constexpr char const* service_full_name() {
    return "e8.UserService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // *
    // Register a user to the system.
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::e8::RegistrationRequest& request, ::e8::RegistrationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::RegistrationResponse>> AsyncRegister(::grpc::ClientContext* context, const ::e8::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::RegistrationResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::RegistrationResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::e8::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::RegistrationResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    //
    // Verify and obtain a signed token. 
    virtual ::grpc::Status Authorize(::grpc::ClientContext* context, const ::e8::AuthorizationRequest& request, ::e8::AuthorizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::AuthorizationResponse>> AsyncAuthorize(::grpc::ClientContext* context, const ::e8::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::AuthorizationResponse>>(AsyncAuthorizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::AuthorizationResponse>> PrepareAsyncAuthorize(::grpc::ClientContext* context, const ::e8::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::AuthorizationResponse>>(PrepareAsyncAuthorizeRaw(context, request, cq));
    }
    // *
    // Get a user's profile
    virtual ::grpc::Status GetPublicProfile(::grpc::ClientContext* context, const ::e8::GetPublicProfileRequest& request, ::e8::GetPublicProfileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetPublicProfileResponse>> AsyncGetPublicProfile(::grpc::ClientContext* context, const ::e8::GetPublicProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetPublicProfileResponse>>(AsyncGetPublicProfileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetPublicProfileResponse>> PrepareAsyncGetPublicProfile(::grpc::ClientContext* context, const ::e8::GetPublicProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetPublicProfileResponse>>(PrepareAsyncGetPublicProfileRaw(context, request, cq));
    }
    // *
    // Update a user's profile
    virtual ::grpc::Status UpdatePublicProfile(::grpc::ClientContext* context, const ::e8::UpdatePublicProfileRequest& request, ::e8::UpdatePublicProfileResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::UpdatePublicProfileResponse>> AsyncUpdatePublicProfile(::grpc::ClientContext* context, const ::e8::UpdatePublicProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::UpdatePublicProfileResponse>>(AsyncUpdatePublicProfileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::UpdatePublicProfileResponse>> PrepareAsyncUpdatePublicProfile(::grpc::ClientContext* context, const ::e8::UpdatePublicProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::UpdatePublicProfileResponse>>(PrepareAsyncUpdatePublicProfileRaw(context, request, cq));
    }
    //
    // Search users.
    virtual ::grpc::Status Search(::grpc::ClientContext* context, const ::e8::SearchUserRequest& request, ::e8::SearchUserResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::SearchUserResponse>> AsyncSearch(::grpc::ClientContext* context, const ::e8::SearchUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::SearchUserResponse>>(AsyncSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::SearchUserResponse>> PrepareAsyncSearch(::grpc::ClientContext* context, const ::e8::SearchUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::SearchUserResponse>>(PrepareAsyncSearchRaw(context, request, cq));
    }
    // *
    // Prepare for a new avatar upload for the logged-in user.
    virtual ::grpc::Status PrepareNewAvatar(::grpc::ClientContext* context, const ::e8::PrepareNewAvatarRequest& request, ::e8::PrepareNewAvatarResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::PrepareNewAvatarResponse>> AsyncPrepareNewAvatar(::grpc::ClientContext* context, const ::e8::PrepareNewAvatarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::PrepareNewAvatarResponse>>(AsyncPrepareNewAvatarRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::PrepareNewAvatarResponse>> PrepareAsyncPrepareNewAvatar(::grpc::ClientContext* context, const ::e8::PrepareNewAvatarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::PrepareNewAvatarResponse>>(PrepareAsyncPrepareNewAvatarRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // *
      // Register a user to the system.
      virtual void Register(::grpc::ClientContext* context, const ::e8::RegistrationRequest* request, ::e8::RegistrationResponse* response, std::function<void(::grpc::Status)>) = 0;
      //
      // Verify and obtain a signed token. 
      virtual void Authorize(::grpc::ClientContext* context, const ::e8::AuthorizationRequest* request, ::e8::AuthorizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      // *
      // Get a user's profile
      virtual void GetPublicProfile(::grpc::ClientContext* context, const ::e8::GetPublicProfileRequest* request, ::e8::GetPublicProfileResponse* response, std::function<void(::grpc::Status)>) = 0;
      // *
      // Update a user's profile
      virtual void UpdatePublicProfile(::grpc::ClientContext* context, const ::e8::UpdatePublicProfileRequest* request, ::e8::UpdatePublicProfileResponse* response, std::function<void(::grpc::Status)>) = 0;
      //
      // Search users.
      virtual void Search(::grpc::ClientContext* context, const ::e8::SearchUserRequest* request, ::e8::SearchUserResponse* response, std::function<void(::grpc::Status)>) = 0;
      // *
      // Prepare for a new avatar upload for the logged-in user.
      virtual void PrepareNewAvatar(::grpc::ClientContext* context, const ::e8::PrepareNewAvatarRequest* request, ::e8::PrepareNewAvatarResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::RegistrationResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::e8::RegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::RegistrationResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::e8::RegistrationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::AuthorizationResponse>* AsyncAuthorizeRaw(::grpc::ClientContext* context, const ::e8::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::AuthorizationResponse>* PrepareAsyncAuthorizeRaw(::grpc::ClientContext* context, const ::e8::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetPublicProfileResponse>* AsyncGetPublicProfileRaw(::grpc::ClientContext* context, const ::e8::GetPublicProfileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetPublicProfileResponse>* PrepareAsyncGetPublicProfileRaw(::grpc::ClientContext* context, const ::e8::GetPublicProfileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::UpdatePublicProfileResponse>* AsyncUpdatePublicProfileRaw(::grpc::ClientContext* context, const ::e8::UpdatePublicProfileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::UpdatePublicProfileResponse>* PrepareAsyncUpdatePublicProfileRaw(::grpc::ClientContext* context, const ::e8::UpdatePublicProfileRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::SearchUserResponse>* AsyncSearchRaw(::grpc::ClientContext* context, const ::e8::SearchUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::SearchUserResponse>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::e8::SearchUserRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::PrepareNewAvatarResponse>* AsyncPrepareNewAvatarRaw(::grpc::ClientContext* context, const ::e8::PrepareNewAvatarRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::PrepareNewAvatarResponse>* PrepareAsyncPrepareNewAvatarRaw(::grpc::ClientContext* context, const ::e8::PrepareNewAvatarRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status Register(::grpc::ClientContext* context, const ::e8::RegistrationRequest& request, ::e8::RegistrationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::RegistrationResponse>> AsyncRegister(::grpc::ClientContext* context, const ::e8::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::RegistrationResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::RegistrationResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::e8::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::RegistrationResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    ::grpc::Status Authorize(::grpc::ClientContext* context, const ::e8::AuthorizationRequest& request, ::e8::AuthorizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::AuthorizationResponse>> AsyncAuthorize(::grpc::ClientContext* context, const ::e8::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::AuthorizationResponse>>(AsyncAuthorizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::AuthorizationResponse>> PrepareAsyncAuthorize(::grpc::ClientContext* context, const ::e8::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::AuthorizationResponse>>(PrepareAsyncAuthorizeRaw(context, request, cq));
    }
    ::grpc::Status GetPublicProfile(::grpc::ClientContext* context, const ::e8::GetPublicProfileRequest& request, ::e8::GetPublicProfileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetPublicProfileResponse>> AsyncGetPublicProfile(::grpc::ClientContext* context, const ::e8::GetPublicProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetPublicProfileResponse>>(AsyncGetPublicProfileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetPublicProfileResponse>> PrepareAsyncGetPublicProfile(::grpc::ClientContext* context, const ::e8::GetPublicProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetPublicProfileResponse>>(PrepareAsyncGetPublicProfileRaw(context, request, cq));
    }
    ::grpc::Status UpdatePublicProfile(::grpc::ClientContext* context, const ::e8::UpdatePublicProfileRequest& request, ::e8::UpdatePublicProfileResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::UpdatePublicProfileResponse>> AsyncUpdatePublicProfile(::grpc::ClientContext* context, const ::e8::UpdatePublicProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::UpdatePublicProfileResponse>>(AsyncUpdatePublicProfileRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::UpdatePublicProfileResponse>> PrepareAsyncUpdatePublicProfile(::grpc::ClientContext* context, const ::e8::UpdatePublicProfileRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::UpdatePublicProfileResponse>>(PrepareAsyncUpdatePublicProfileRaw(context, request, cq));
    }
    ::grpc::Status Search(::grpc::ClientContext* context, const ::e8::SearchUserRequest& request, ::e8::SearchUserResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::SearchUserResponse>> AsyncSearch(::grpc::ClientContext* context, const ::e8::SearchUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::SearchUserResponse>>(AsyncSearchRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::SearchUserResponse>> PrepareAsyncSearch(::grpc::ClientContext* context, const ::e8::SearchUserRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::SearchUserResponse>>(PrepareAsyncSearchRaw(context, request, cq));
    }
    ::grpc::Status PrepareNewAvatar(::grpc::ClientContext* context, const ::e8::PrepareNewAvatarRequest& request, ::e8::PrepareNewAvatarResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::PrepareNewAvatarResponse>> AsyncPrepareNewAvatar(::grpc::ClientContext* context, const ::e8::PrepareNewAvatarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::PrepareNewAvatarResponse>>(AsyncPrepareNewAvatarRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::PrepareNewAvatarResponse>> PrepareAsyncPrepareNewAvatar(::grpc::ClientContext* context, const ::e8::PrepareNewAvatarRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::PrepareNewAvatarResponse>>(PrepareAsyncPrepareNewAvatarRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void Register(::grpc::ClientContext* context, const ::e8::RegistrationRequest* request, ::e8::RegistrationResponse* response, std::function<void(::grpc::Status)>) override;
      void Authorize(::grpc::ClientContext* context, const ::e8::AuthorizationRequest* request, ::e8::AuthorizationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPublicProfile(::grpc::ClientContext* context, const ::e8::GetPublicProfileRequest* request, ::e8::GetPublicProfileResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdatePublicProfile(::grpc::ClientContext* context, const ::e8::UpdatePublicProfileRequest* request, ::e8::UpdatePublicProfileResponse* response, std::function<void(::grpc::Status)>) override;
      void Search(::grpc::ClientContext* context, const ::e8::SearchUserRequest* request, ::e8::SearchUserResponse* response, std::function<void(::grpc::Status)>) override;
      void PrepareNewAvatar(::grpc::ClientContext* context, const ::e8::PrepareNewAvatarRequest* request, ::e8::PrepareNewAvatarResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::e8::RegistrationResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::e8::RegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::RegistrationResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::e8::RegistrationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::AuthorizationResponse>* AsyncAuthorizeRaw(::grpc::ClientContext* context, const ::e8::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::AuthorizationResponse>* PrepareAsyncAuthorizeRaw(::grpc::ClientContext* context, const ::e8::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::GetPublicProfileResponse>* AsyncGetPublicProfileRaw(::grpc::ClientContext* context, const ::e8::GetPublicProfileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::GetPublicProfileResponse>* PrepareAsyncGetPublicProfileRaw(::grpc::ClientContext* context, const ::e8::GetPublicProfileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::UpdatePublicProfileResponse>* AsyncUpdatePublicProfileRaw(::grpc::ClientContext* context, const ::e8::UpdatePublicProfileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::UpdatePublicProfileResponse>* PrepareAsyncUpdatePublicProfileRaw(::grpc::ClientContext* context, const ::e8::UpdatePublicProfileRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::SearchUserResponse>* AsyncSearchRaw(::grpc::ClientContext* context, const ::e8::SearchUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::SearchUserResponse>* PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::e8::SearchUserRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::PrepareNewAvatarResponse>* AsyncPrepareNewAvatarRaw(::grpc::ClientContext* context, const ::e8::PrepareNewAvatarRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::PrepareNewAvatarResponse>* PrepareAsyncPrepareNewAvatarRaw(::grpc::ClientContext* context, const ::e8::PrepareNewAvatarRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
    const ::grpc::internal::RpcMethod rpcmethod_Authorize_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPublicProfile_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdatePublicProfile_;
    const ::grpc::internal::RpcMethod rpcmethod_Search_;
    const ::grpc::internal::RpcMethod rpcmethod_PrepareNewAvatar_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // *
    // Register a user to the system.
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::e8::RegistrationRequest* request, ::e8::RegistrationResponse* response);
    //
    // Verify and obtain a signed token. 
    virtual ::grpc::Status Authorize(::grpc::ServerContext* context, const ::e8::AuthorizationRequest* request, ::e8::AuthorizationResponse* response);
    // *
    // Get a user's profile
    virtual ::grpc::Status GetPublicProfile(::grpc::ServerContext* context, const ::e8::GetPublicProfileRequest* request, ::e8::GetPublicProfileResponse* response);
    // *
    // Update a user's profile
    virtual ::grpc::Status UpdatePublicProfile(::grpc::ServerContext* context, const ::e8::UpdatePublicProfileRequest* request, ::e8::UpdatePublicProfileResponse* response);
    //
    // Search users.
    virtual ::grpc::Status Search(::grpc::ServerContext* context, const ::e8::SearchUserRequest* request, ::e8::SearchUserResponse* response);
    // *
    // Prepare for a new avatar upload for the logged-in user.
    virtual ::grpc::Status PrepareNewAvatar(::grpc::ServerContext* context, const ::e8::PrepareNewAvatarRequest* request, ::e8::PrepareNewAvatarResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* context, const ::e8::RegistrationRequest* request, ::e8::RegistrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::e8::RegistrationRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::RegistrationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Authorize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Authorize() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Authorize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authorize(::grpc::ServerContext* context, const ::e8::AuthorizationRequest* request, ::e8::AuthorizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthorize(::grpc::ServerContext* context, ::e8::AuthorizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::AuthorizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPublicProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetPublicProfile() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetPublicProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublicProfile(::grpc::ServerContext* context, const ::e8::GetPublicProfileRequest* request, ::e8::GetPublicProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPublicProfile(::grpc::ServerContext* context, ::e8::GetPublicProfileRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::GetPublicProfileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdatePublicProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdatePublicProfile() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdatePublicProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePublicProfile(::grpc::ServerContext* context, const ::e8::UpdatePublicProfileRequest* request, ::e8::UpdatePublicProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePublicProfile(::grpc::ServerContext* context, ::e8::UpdatePublicProfileRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::UpdatePublicProfileResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Search() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* context, const ::e8::SearchUserRequest* request, ::e8::SearchUserResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::e8::SearchUserRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::SearchUserResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PrepareNewAvatar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PrepareNewAvatar() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_PrepareNewAvatar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareNewAvatar(::grpc::ServerContext* context, const ::e8::PrepareNewAvatarRequest* request, ::e8::PrepareNewAvatarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepareNewAvatar(::grpc::ServerContext* context, ::e8::PrepareNewAvatarRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::PrepareNewAvatarResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Register<WithAsyncMethod_Authorize<WithAsyncMethod_GetPublicProfile<WithAsyncMethod_UpdatePublicProfile<WithAsyncMethod_Search<WithAsyncMethod_PrepareNewAvatar<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* context, const ::e8::RegistrationRequest* request, ::e8::RegistrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Authorize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Authorize() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Authorize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authorize(::grpc::ServerContext* context, const ::e8::AuthorizationRequest* request, ::e8::AuthorizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPublicProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetPublicProfile() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetPublicProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublicProfile(::grpc::ServerContext* context, const ::e8::GetPublicProfileRequest* request, ::e8::GetPublicProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdatePublicProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdatePublicProfile() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdatePublicProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePublicProfile(::grpc::ServerContext* context, const ::e8::UpdatePublicProfileRequest* request, ::e8::UpdatePublicProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Search() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* context, const ::e8::SearchUserRequest* request, ::e8::SearchUserResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PrepareNewAvatar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PrepareNewAvatar() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_PrepareNewAvatar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareNewAvatar(::grpc::ServerContext* context, const ::e8::PrepareNewAvatarRequest* request, ::e8::PrepareNewAvatarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* context, const ::e8::RegistrationRequest* request, ::e8::RegistrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Authorize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Authorize() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Authorize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Authorize(::grpc::ServerContext* context, const ::e8::AuthorizationRequest* request, ::e8::AuthorizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAuthorize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPublicProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetPublicProfile() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetPublicProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPublicProfile(::grpc::ServerContext* context, const ::e8::GetPublicProfileRequest* request, ::e8::GetPublicProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPublicProfile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdatePublicProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdatePublicProfile() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdatePublicProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdatePublicProfile(::grpc::ServerContext* context, const ::e8::UpdatePublicProfileRequest* request, ::e8::UpdatePublicProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdatePublicProfile(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Search() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Search(::grpc::ServerContext* context, const ::e8::SearchUserRequest* request, ::e8::SearchUserResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSearch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PrepareNewAvatar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PrepareNewAvatar() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_PrepareNewAvatar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PrepareNewAvatar(::grpc::ServerContext* context, const ::e8::PrepareNewAvatarRequest* request, ::e8::PrepareNewAvatarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPrepareNewAvatar(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::RegistrationRequest, ::e8::RegistrationResponse>(std::bind(&WithStreamedUnaryMethod_Register<BaseClass>::StreamedRegister, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* context, const ::e8::RegistrationRequest* request, ::e8::RegistrationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::RegistrationRequest,::e8::RegistrationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Authorize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Authorize() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::AuthorizationRequest, ::e8::AuthorizationResponse>(std::bind(&WithStreamedUnaryMethod_Authorize<BaseClass>::StreamedAuthorize, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Authorize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Authorize(::grpc::ServerContext* context, const ::e8::AuthorizationRequest* request, ::e8::AuthorizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAuthorize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::AuthorizationRequest,::e8::AuthorizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPublicProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetPublicProfile() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::GetPublicProfileRequest, ::e8::GetPublicProfileResponse>(std::bind(&WithStreamedUnaryMethod_GetPublicProfile<BaseClass>::StreamedGetPublicProfile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetPublicProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPublicProfile(::grpc::ServerContext* context, const ::e8::GetPublicProfileRequest* request, ::e8::GetPublicProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPublicProfile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::GetPublicProfileRequest,::e8::GetPublicProfileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdatePublicProfile : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdatePublicProfile() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::UpdatePublicProfileRequest, ::e8::UpdatePublicProfileResponse>(std::bind(&WithStreamedUnaryMethod_UpdatePublicProfile<BaseClass>::StreamedUpdatePublicProfile, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdatePublicProfile() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdatePublicProfile(::grpc::ServerContext* context, const ::e8::UpdatePublicProfileRequest* request, ::e8::UpdatePublicProfileResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdatePublicProfile(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::UpdatePublicProfileRequest,::e8::UpdatePublicProfileResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Search : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Search() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::SearchUserRequest, ::e8::SearchUserResponse>(std::bind(&WithStreamedUnaryMethod_Search<BaseClass>::StreamedSearch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Search() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Search(::grpc::ServerContext* context, const ::e8::SearchUserRequest* request, ::e8::SearchUserResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSearch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::SearchUserRequest,::e8::SearchUserResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PrepareNewAvatar : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PrepareNewAvatar() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::PrepareNewAvatarRequest, ::e8::PrepareNewAvatarResponse>(std::bind(&WithStreamedUnaryMethod_PrepareNewAvatar<BaseClass>::StreamedPrepareNewAvatar, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PrepareNewAvatar() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PrepareNewAvatar(::grpc::ServerContext* context, const ::e8::PrepareNewAvatarRequest* request, ::e8::PrepareNewAvatarResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPrepareNewAvatar(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::PrepareNewAvatarRequest,::e8::PrepareNewAvatarResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Authorize<WithStreamedUnaryMethod_GetPublicProfile<WithStreamedUnaryMethod_UpdatePublicProfile<WithStreamedUnaryMethod_Search<WithStreamedUnaryMethod_PrepareNewAvatar<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Authorize<WithStreamedUnaryMethod_GetPublicProfile<WithStreamedUnaryMethod_UpdatePublicProfile<WithStreamedUnaryMethod_Search<WithStreamedUnaryMethod_PrepareNewAvatar<Service > > > > > > StreamedService;
};

}  // namespace e8


#endif  // GRPC_service_5fuser_2eproto__INCLUDED
