// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service_chat_message.proto
// Original file comments:
// *
// e8yes demo web.
//
// <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
//
// <p>This program is free software: you can redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// <p>You should have received a copy of the GNU General Public License along with this program. If
// not, see <http://www.gnu.org/licenses/>.
//
#ifndef GRPC_service_5fchat_5fmessage_2eproto__INCLUDED
#define GRPC_service_5fchat_5fmessage_2eproto__INCLUDED

#include "service_chat_message.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace e8 {

class ChatMessageService final {
 public:
  static constexpr char const* service_full_name() {
    return "e8.ChatMessageService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Send a chat message to the message channel where the logged-in user
    // is the sender.
    virtual ::grpc::Status SendChatMessage(::grpc::ClientContext* context, const ::e8::SendChatMessageRequest& request, ::e8::SendChatMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::SendChatMessageResponse>> AsyncSendChatMessage(::grpc::ClientContext* context, const ::e8::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::SendChatMessageResponse>>(AsyncSendChatMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::SendChatMessageResponse>> PrepareAsyncSendChatMessage(::grpc::ClientContext* context, const ::e8::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::SendChatMessageResponse>>(PrepareAsyncSendChatMessageRaw(context, request, cq));
    }
    // Get a history of the chat messages in the specified message channel.
    virtual ::grpc::Status GetChatMessage(::grpc::ClientContext* context, const ::e8::GetChatMessageRequest& request, ::e8::GetChatMessageResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetChatMessageResponse>> AsyncGetChatMessage(::grpc::ClientContext* context, const ::e8::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetChatMessageResponse>>(AsyncGetChatMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetChatMessageResponse>> PrepareAsyncGetChatMessage(::grpc::ClientContext* context, const ::e8::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetChatMessageResponse>>(PrepareAsyncGetChatMessageRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Send a chat message to the message channel where the logged-in user
      // is the sender.
      virtual void SendChatMessage(::grpc::ClientContext* context, const ::e8::SendChatMessageRequest* request, ::e8::SendChatMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Get a history of the chat messages in the specified message channel.
      virtual void GetChatMessage(::grpc::ClientContext* context, const ::e8::GetChatMessageRequest* request, ::e8::GetChatMessageResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::SendChatMessageResponse>* AsyncSendChatMessageRaw(::grpc::ClientContext* context, const ::e8::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::SendChatMessageResponse>* PrepareAsyncSendChatMessageRaw(::grpc::ClientContext* context, const ::e8::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetChatMessageResponse>* AsyncGetChatMessageRaw(::grpc::ClientContext* context, const ::e8::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetChatMessageResponse>* PrepareAsyncGetChatMessageRaw(::grpc::ClientContext* context, const ::e8::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status SendChatMessage(::grpc::ClientContext* context, const ::e8::SendChatMessageRequest& request, ::e8::SendChatMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::SendChatMessageResponse>> AsyncSendChatMessage(::grpc::ClientContext* context, const ::e8::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::SendChatMessageResponse>>(AsyncSendChatMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::SendChatMessageResponse>> PrepareAsyncSendChatMessage(::grpc::ClientContext* context, const ::e8::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::SendChatMessageResponse>>(PrepareAsyncSendChatMessageRaw(context, request, cq));
    }
    ::grpc::Status GetChatMessage(::grpc::ClientContext* context, const ::e8::GetChatMessageRequest& request, ::e8::GetChatMessageResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetChatMessageResponse>> AsyncGetChatMessage(::grpc::ClientContext* context, const ::e8::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetChatMessageResponse>>(AsyncGetChatMessageRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetChatMessageResponse>> PrepareAsyncGetChatMessage(::grpc::ClientContext* context, const ::e8::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetChatMessageResponse>>(PrepareAsyncGetChatMessageRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void SendChatMessage(::grpc::ClientContext* context, const ::e8::SendChatMessageRequest* request, ::e8::SendChatMessageResponse* response, std::function<void(::grpc::Status)>) override;
      void GetChatMessage(::grpc::ClientContext* context, const ::e8::GetChatMessageRequest* request, ::e8::GetChatMessageResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::e8::SendChatMessageResponse>* AsyncSendChatMessageRaw(::grpc::ClientContext* context, const ::e8::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::SendChatMessageResponse>* PrepareAsyncSendChatMessageRaw(::grpc::ClientContext* context, const ::e8::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::GetChatMessageResponse>* AsyncGetChatMessageRaw(::grpc::ClientContext* context, const ::e8::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::GetChatMessageResponse>* PrepareAsyncGetChatMessageRaw(::grpc::ClientContext* context, const ::e8::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SendChatMessage_;
    const ::grpc::internal::RpcMethod rpcmethod_GetChatMessage_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Send a chat message to the message channel where the logged-in user
    // is the sender.
    virtual ::grpc::Status SendChatMessage(::grpc::ServerContext* context, const ::e8::SendChatMessageRequest* request, ::e8::SendChatMessageResponse* response);
    // Get a history of the chat messages in the specified message channel.
    virtual ::grpc::Status GetChatMessage(::grpc::ServerContext* context, const ::e8::GetChatMessageRequest* request, ::e8::GetChatMessageResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SendChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SendChatMessage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SendChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChatMessage(::grpc::ServerContext* context, const ::e8::SendChatMessageRequest* request, ::e8::SendChatMessageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendChatMessage(::grpc::ServerContext* context, ::e8::SendChatMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::SendChatMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetChatMessage() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatMessage(::grpc::ServerContext* context, const ::e8::GetChatMessageRequest* request, ::e8::GetChatMessageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChatMessage(::grpc::ServerContext* context, ::e8::GetChatMessageRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::GetChatMessageResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SendChatMessage<WithAsyncMethod_GetChatMessage<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_SendChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SendChatMessage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SendChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChatMessage(::grpc::ServerContext* context, const ::e8::SendChatMessageRequest* request, ::e8::SendChatMessageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetChatMessage() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatMessage(::grpc::ServerContext* context, const ::e8::GetChatMessageRequest* request, ::e8::GetChatMessageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SendChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SendChatMessage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SendChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SendChatMessage(::grpc::ServerContext* context, const ::e8::SendChatMessageRequest* request, ::e8::SendChatMessageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSendChatMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetChatMessage() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChatMessage(::grpc::ServerContext* context, const ::e8::GetChatMessageRequest* request, ::e8::GetChatMessageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChatMessage(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SendChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_SendChatMessage() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::SendChatMessageRequest, ::e8::SendChatMessageResponse>(std::bind(&WithStreamedUnaryMethod_SendChatMessage<BaseClass>::StreamedSendChatMessage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_SendChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SendChatMessage(::grpc::ServerContext* context, const ::e8::SendChatMessageRequest* request, ::e8::SendChatMessageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSendChatMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::SendChatMessageRequest,::e8::SendChatMessageResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChatMessage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetChatMessage() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::GetChatMessageRequest, ::e8::GetChatMessageResponse>(std::bind(&WithStreamedUnaryMethod_GetChatMessage<BaseClass>::StreamedGetChatMessage, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetChatMessage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChatMessage(::grpc::ServerContext* context, const ::e8::GetChatMessageRequest* request, ::e8::GetChatMessageResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChatMessage(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::GetChatMessageRequest,::e8::GetChatMessageResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SendChatMessage<WithStreamedUnaryMethod_GetChatMessage<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SendChatMessage<WithStreamedUnaryMethod_GetChatMessage<Service > > StreamedService;
};

}  // namespace e8


#endif  // GRPC_service_5fchat_5fmessage_2eproto__INCLUDED
