// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service_message_queue.proto

#include "service_message_queue.pb.h"
#include "service_message_queue.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace e8 {

static const char* MessageQueueService_method_names[] = {
  "/e8.MessageQueueService/EnqueueMessage",
  "/e8.MessageQueueService/DequeueMessage",
  "/e8.MessageQueueService/ListQueueMessage",
};

std::unique_ptr< MessageQueueService::Stub> MessageQueueService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< MessageQueueService::Stub> stub(new MessageQueueService::Stub(channel));
  return stub;
}

MessageQueueService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_EnqueueMessage_(MessageQueueService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DequeueMessage_(MessageQueueService_method_names[1], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  , rpcmethod_ListQueueMessage_(MessageQueueService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status MessageQueueService::Stub::EnqueueMessage(::grpc::ClientContext* context, const ::e8::EnqueueMessageRequest& request, ::e8::EnqueueMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_EnqueueMessage_, context, request, response);
}

void MessageQueueService::Stub::experimental_async::EnqueueMessage(::grpc::ClientContext* context, const ::e8::EnqueueMessageRequest* request, ::e8::EnqueueMessageResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_EnqueueMessage_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::e8::EnqueueMessageResponse>* MessageQueueService::Stub::AsyncEnqueueMessageRaw(::grpc::ClientContext* context, const ::e8::EnqueueMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::EnqueueMessageResponse>::Create(channel_.get(), cq, rpcmethod_EnqueueMessage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::e8::EnqueueMessageResponse>* MessageQueueService::Stub::PrepareAsyncEnqueueMessageRaw(::grpc::ClientContext* context, const ::e8::EnqueueMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::EnqueueMessageResponse>::Create(channel_.get(), cq, rpcmethod_EnqueueMessage_, context, request, false);
}

::grpc::ClientReaderWriter< ::e8::DequeueMessageRequest, ::e8::DequeueMessageResponse>* MessageQueueService::Stub::DequeueMessageRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::e8::DequeueMessageRequest, ::e8::DequeueMessageResponse>::Create(channel_.get(), rpcmethod_DequeueMessage_, context);
}

::grpc::ClientAsyncReaderWriter< ::e8::DequeueMessageRequest, ::e8::DequeueMessageResponse>* MessageQueueService::Stub::AsyncDequeueMessageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::e8::DequeueMessageRequest, ::e8::DequeueMessageResponse>::Create(channel_.get(), cq, rpcmethod_DequeueMessage_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::e8::DequeueMessageRequest, ::e8::DequeueMessageResponse>* MessageQueueService::Stub::PrepareAsyncDequeueMessageRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::e8::DequeueMessageRequest, ::e8::DequeueMessageResponse>::Create(channel_.get(), cq, rpcmethod_DequeueMessage_, context, false, nullptr);
}

::grpc::Status MessageQueueService::Stub::ListQueueMessage(::grpc::ClientContext* context, const ::e8::ListQueueMessageRequest& request, ::e8::ListQueueMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListQueueMessage_, context, request, response);
}

void MessageQueueService::Stub::experimental_async::ListQueueMessage(::grpc::ClientContext* context, const ::e8::ListQueueMessageRequest* request, ::e8::ListQueueMessageResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListQueueMessage_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::e8::ListQueueMessageResponse>* MessageQueueService::Stub::AsyncListQueueMessageRaw(::grpc::ClientContext* context, const ::e8::ListQueueMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::ListQueueMessageResponse>::Create(channel_.get(), cq, rpcmethod_ListQueueMessage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::e8::ListQueueMessageResponse>* MessageQueueService::Stub::PrepareAsyncListQueueMessageRaw(::grpc::ClientContext* context, const ::e8::ListQueueMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::ListQueueMessageResponse>::Create(channel_.get(), cq, rpcmethod_ListQueueMessage_, context, request, false);
}

MessageQueueService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessageQueueService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessageQueueService::Service, ::e8::EnqueueMessageRequest, ::e8::EnqueueMessageResponse>(
          std::mem_fn(&MessageQueueService::Service::EnqueueMessage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessageQueueService_method_names[1],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< MessageQueueService::Service, ::e8::DequeueMessageRequest, ::e8::DequeueMessageResponse>(
          std::mem_fn(&MessageQueueService::Service::DequeueMessage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      MessageQueueService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< MessageQueueService::Service, ::e8::ListQueueMessageRequest, ::e8::ListQueueMessageResponse>(
          std::mem_fn(&MessageQueueService::Service::ListQueueMessage), this)));
}

MessageQueueService::Service::~Service() {
}

::grpc::Status MessageQueueService::Service::EnqueueMessage(::grpc::ServerContext* context, const ::e8::EnqueueMessageRequest* request, ::e8::EnqueueMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessageQueueService::Service::DequeueMessage(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::e8::DequeueMessageResponse, ::e8::DequeueMessageRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status MessageQueueService::Service::ListQueueMessage(::grpc::ServerContext* context, const ::e8::ListQueueMessageRequest* request, ::e8::ListQueueMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace e8

