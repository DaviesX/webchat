// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_chat_message.proto

#ifndef PROTOBUF_INCLUDED_service_5fchat_5fmessage_2eproto
#define PROTOBUF_INCLUDED_service_5fchat_5fmessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pagination.pb.h"
#include "chat_message.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_service_5fchat_5fmessage_2eproto 

namespace protobuf_service_5fchat_5fmessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_service_5fchat_5fmessage_2eproto
namespace e8 {
class GetChatMessageRequest;
class GetChatMessageRequestDefaultTypeInternal;
extern GetChatMessageRequestDefaultTypeInternal _GetChatMessageRequest_default_instance_;
class GetChatMessageResponse;
class GetChatMessageResponseDefaultTypeInternal;
extern GetChatMessageResponseDefaultTypeInternal _GetChatMessageResponse_default_instance_;
class SendChatMessageRequest;
class SendChatMessageRequestDefaultTypeInternal;
extern SendChatMessageRequestDefaultTypeInternal _SendChatMessageRequest_default_instance_;
class SendChatMessageResponse;
class SendChatMessageResponseDefaultTypeInternal;
extern SendChatMessageResponseDefaultTypeInternal _SendChatMessageResponse_default_instance_;
}  // namespace e8
namespace google {
namespace protobuf {
template<> ::e8::GetChatMessageRequest* Arena::CreateMaybeMessage<::e8::GetChatMessageRequest>(Arena*);
template<> ::e8::GetChatMessageResponse* Arena::CreateMaybeMessage<::e8::GetChatMessageResponse>(Arena*);
template<> ::e8::SendChatMessageRequest* Arena::CreateMaybeMessage<::e8::SendChatMessageRequest>(Arena*);
template<> ::e8::SendChatMessageResponse* Arena::CreateMaybeMessage<::e8::SendChatMessageResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace e8 {

// ===================================================================

class SendChatMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.SendChatMessageRequest) */ {
 public:
  SendChatMessageRequest();
  virtual ~SendChatMessageRequest();

  SendChatMessageRequest(const SendChatMessageRequest& from);

  inline SendChatMessageRequest& operator=(const SendChatMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendChatMessageRequest(SendChatMessageRequest&& from) noexcept
    : SendChatMessageRequest() {
    *this = ::std::move(from);
  }

  inline SendChatMessageRequest& operator=(SendChatMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendChatMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendChatMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SendChatMessageRequest*>(
               &_SendChatMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SendChatMessageRequest* other);
  friend void swap(SendChatMessageRequest& a, SendChatMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendChatMessageRequest* New() const final {
    return CreateMaybeMessage<SendChatMessageRequest>(NULL);
  }

  SendChatMessageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendChatMessageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendChatMessageRequest& from);
  void MergeFrom(const SendChatMessageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendChatMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .e8.ChatMessageEntry message = 2;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  private:
  const ::e8::ChatMessageEntry& _internal_message() const;
  public:
  const ::e8::ChatMessageEntry& message() const;
  ::e8::ChatMessageEntry* release_message();
  ::e8::ChatMessageEntry* mutable_message();
  void set_allocated_message(::e8::ChatMessageEntry* message);

  // int64 channel_id = 1;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::int64 channel_id() const;
  void set_channel_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:e8.SendChatMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::e8::ChatMessageEntry* message_;
  ::google::protobuf::int64 channel_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_5fchat_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SendChatMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.SendChatMessageResponse) */ {
 public:
  SendChatMessageResponse();
  virtual ~SendChatMessageResponse();

  SendChatMessageResponse(const SendChatMessageResponse& from);

  inline SendChatMessageResponse& operator=(const SendChatMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SendChatMessageResponse(SendChatMessageResponse&& from) noexcept
    : SendChatMessageResponse() {
    *this = ::std::move(from);
  }

  inline SendChatMessageResponse& operator=(SendChatMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SendChatMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendChatMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SendChatMessageResponse*>(
               &_SendChatMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SendChatMessageResponse* other);
  friend void swap(SendChatMessageResponse& a, SendChatMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SendChatMessageResponse* New() const final {
    return CreateMaybeMessage<SendChatMessageResponse>(NULL);
  }

  SendChatMessageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SendChatMessageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SendChatMessageResponse& from);
  void MergeFrom(const SendChatMessageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendChatMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .e8.ChatMessageThread updated_thread = 1;
  bool has_updated_thread() const;
  void clear_updated_thread();
  static const int kUpdatedThreadFieldNumber = 1;
  private:
  const ::e8::ChatMessageThread& _internal_updated_thread() const;
  public:
  const ::e8::ChatMessageThread& updated_thread() const;
  ::e8::ChatMessageThread* release_updated_thread();
  ::e8::ChatMessageThread* mutable_updated_thread();
  void set_allocated_updated_thread(::e8::ChatMessageThread* updated_thread);

  // @@protoc_insertion_point(class_scope:e8.SendChatMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::e8::ChatMessageThread* updated_thread_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_5fchat_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatMessageRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.GetChatMessageRequest) */ {
 public:
  GetChatMessageRequest();
  virtual ~GetChatMessageRequest();

  GetChatMessageRequest(const GetChatMessageRequest& from);

  inline GetChatMessageRequest& operator=(const GetChatMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetChatMessageRequest(GetChatMessageRequest&& from) noexcept
    : GetChatMessageRequest() {
    *this = ::std::move(from);
  }

  inline GetChatMessageRequest& operator=(GetChatMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChatMessageRequest* internal_default_instance() {
    return reinterpret_cast<const GetChatMessageRequest*>(
               &_GetChatMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GetChatMessageRequest* other);
  friend void swap(GetChatMessageRequest& a, GetChatMessageRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetChatMessageRequest* New() const final {
    return CreateMaybeMessage<GetChatMessageRequest>(NULL);
  }

  GetChatMessageRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetChatMessageRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetChatMessageRequest& from);
  void MergeFrom(const GetChatMessageRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatMessageRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .e8.Pagination pagination = 2;
  bool has_pagination() const;
  void clear_pagination();
  static const int kPaginationFieldNumber = 2;
  private:
  const ::e8::Pagination& _internal_pagination() const;
  public:
  const ::e8::Pagination& pagination() const;
  ::e8::Pagination* release_pagination();
  ::e8::Pagination* mutable_pagination();
  void set_allocated_pagination(::e8::Pagination* pagination);

  // int64 channel_id = 1;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 1;
  ::google::protobuf::int64 channel_id() const;
  void set_channel_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:e8.GetChatMessageRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::e8::Pagination* pagination_;
  ::google::protobuf::int64 channel_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_5fchat_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetChatMessageResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.GetChatMessageResponse) */ {
 public:
  GetChatMessageResponse();
  virtual ~GetChatMessageResponse();

  GetChatMessageResponse(const GetChatMessageResponse& from);

  inline GetChatMessageResponse& operator=(const GetChatMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetChatMessageResponse(GetChatMessageResponse&& from) noexcept
    : GetChatMessageResponse() {
    *this = ::std::move(from);
  }

  inline GetChatMessageResponse& operator=(GetChatMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const GetChatMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetChatMessageResponse* internal_default_instance() {
    return reinterpret_cast<const GetChatMessageResponse*>(
               &_GetChatMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(GetChatMessageResponse* other);
  friend void swap(GetChatMessageResponse& a, GetChatMessageResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetChatMessageResponse* New() const final {
    return CreateMaybeMessage<GetChatMessageResponse>(NULL);
  }

  GetChatMessageResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetChatMessageResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetChatMessageResponse& from);
  void MergeFrom(const GetChatMessageResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetChatMessageResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .e8.ChatMessageThread threads = 1;
  int threads_size() const;
  void clear_threads();
  static const int kThreadsFieldNumber = 1;
  ::e8::ChatMessageThread* mutable_threads(int index);
  ::google::protobuf::RepeatedPtrField< ::e8::ChatMessageThread >*
      mutable_threads();
  const ::e8::ChatMessageThread& threads(int index) const;
  ::e8::ChatMessageThread* add_threads();
  const ::google::protobuf::RepeatedPtrField< ::e8::ChatMessageThread >&
      threads() const;

  // @@protoc_insertion_point(class_scope:e8.GetChatMessageResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::e8::ChatMessageThread > threads_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_5fchat_5fmessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SendChatMessageRequest

// int64 channel_id = 1;
inline void SendChatMessageRequest::clear_channel_id() {
  channel_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SendChatMessageRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:e8.SendChatMessageRequest.channel_id)
  return channel_id_;
}
inline void SendChatMessageRequest::set_channel_id(::google::protobuf::int64 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:e8.SendChatMessageRequest.channel_id)
}

// .e8.ChatMessageEntry message = 2;
inline bool SendChatMessageRequest::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline const ::e8::ChatMessageEntry& SendChatMessageRequest::_internal_message() const {
  return *message_;
}
inline const ::e8::ChatMessageEntry& SendChatMessageRequest::message() const {
  const ::e8::ChatMessageEntry* p = message_;
  // @@protoc_insertion_point(field_get:e8.SendChatMessageRequest.message)
  return p != NULL ? *p : *reinterpret_cast<const ::e8::ChatMessageEntry*>(
      &::e8::_ChatMessageEntry_default_instance_);
}
inline ::e8::ChatMessageEntry* SendChatMessageRequest::release_message() {
  // @@protoc_insertion_point(field_release:e8.SendChatMessageRequest.message)
  
  ::e8::ChatMessageEntry* temp = message_;
  message_ = NULL;
  return temp;
}
inline ::e8::ChatMessageEntry* SendChatMessageRequest::mutable_message() {
  
  if (message_ == NULL) {
    auto* p = CreateMaybeMessage<::e8::ChatMessageEntry>(GetArenaNoVirtual());
    message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:e8.SendChatMessageRequest.message)
  return message_;
}
inline void SendChatMessageRequest::set_allocated_message(::e8::ChatMessageEntry* message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(message_);
  }
  if (message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:e8.SendChatMessageRequest.message)
}

// -------------------------------------------------------------------

// SendChatMessageResponse

// .e8.ChatMessageThread updated_thread = 1;
inline bool SendChatMessageResponse::has_updated_thread() const {
  return this != internal_default_instance() && updated_thread_ != NULL;
}
inline const ::e8::ChatMessageThread& SendChatMessageResponse::_internal_updated_thread() const {
  return *updated_thread_;
}
inline const ::e8::ChatMessageThread& SendChatMessageResponse::updated_thread() const {
  const ::e8::ChatMessageThread* p = updated_thread_;
  // @@protoc_insertion_point(field_get:e8.SendChatMessageResponse.updated_thread)
  return p != NULL ? *p : *reinterpret_cast<const ::e8::ChatMessageThread*>(
      &::e8::_ChatMessageThread_default_instance_);
}
inline ::e8::ChatMessageThread* SendChatMessageResponse::release_updated_thread() {
  // @@protoc_insertion_point(field_release:e8.SendChatMessageResponse.updated_thread)
  
  ::e8::ChatMessageThread* temp = updated_thread_;
  updated_thread_ = NULL;
  return temp;
}
inline ::e8::ChatMessageThread* SendChatMessageResponse::mutable_updated_thread() {
  
  if (updated_thread_ == NULL) {
    auto* p = CreateMaybeMessage<::e8::ChatMessageThread>(GetArenaNoVirtual());
    updated_thread_ = p;
  }
  // @@protoc_insertion_point(field_mutable:e8.SendChatMessageResponse.updated_thread)
  return updated_thread_;
}
inline void SendChatMessageResponse::set_allocated_updated_thread(::e8::ChatMessageThread* updated_thread) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(updated_thread_);
  }
  if (updated_thread) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      updated_thread = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, updated_thread, submessage_arena);
    }
    
  } else {
    
  }
  updated_thread_ = updated_thread;
  // @@protoc_insertion_point(field_set_allocated:e8.SendChatMessageResponse.updated_thread)
}

// -------------------------------------------------------------------

// GetChatMessageRequest

// int64 channel_id = 1;
inline void GetChatMessageRequest::clear_channel_id() {
  channel_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 GetChatMessageRequest::channel_id() const {
  // @@protoc_insertion_point(field_get:e8.GetChatMessageRequest.channel_id)
  return channel_id_;
}
inline void GetChatMessageRequest::set_channel_id(::google::protobuf::int64 value) {
  
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:e8.GetChatMessageRequest.channel_id)
}

// .e8.Pagination pagination = 2;
inline bool GetChatMessageRequest::has_pagination() const {
  return this != internal_default_instance() && pagination_ != NULL;
}
inline const ::e8::Pagination& GetChatMessageRequest::_internal_pagination() const {
  return *pagination_;
}
inline const ::e8::Pagination& GetChatMessageRequest::pagination() const {
  const ::e8::Pagination* p = pagination_;
  // @@protoc_insertion_point(field_get:e8.GetChatMessageRequest.pagination)
  return p != NULL ? *p : *reinterpret_cast<const ::e8::Pagination*>(
      &::e8::_Pagination_default_instance_);
}
inline ::e8::Pagination* GetChatMessageRequest::release_pagination() {
  // @@protoc_insertion_point(field_release:e8.GetChatMessageRequest.pagination)
  
  ::e8::Pagination* temp = pagination_;
  pagination_ = NULL;
  return temp;
}
inline ::e8::Pagination* GetChatMessageRequest::mutable_pagination() {
  
  if (pagination_ == NULL) {
    auto* p = CreateMaybeMessage<::e8::Pagination>(GetArenaNoVirtual());
    pagination_ = p;
  }
  // @@protoc_insertion_point(field_mutable:e8.GetChatMessageRequest.pagination)
  return pagination_;
}
inline void GetChatMessageRequest::set_allocated_pagination(::e8::Pagination* pagination) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pagination_);
  }
  if (pagination) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pagination = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pagination, submessage_arena);
    }
    
  } else {
    
  }
  pagination_ = pagination;
  // @@protoc_insertion_point(field_set_allocated:e8.GetChatMessageRequest.pagination)
}

// -------------------------------------------------------------------

// GetChatMessageResponse

// repeated .e8.ChatMessageThread threads = 1;
inline int GetChatMessageResponse::threads_size() const {
  return threads_.size();
}
inline ::e8::ChatMessageThread* GetChatMessageResponse::mutable_threads(int index) {
  // @@protoc_insertion_point(field_mutable:e8.GetChatMessageResponse.threads)
  return threads_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::e8::ChatMessageThread >*
GetChatMessageResponse::mutable_threads() {
  // @@protoc_insertion_point(field_mutable_list:e8.GetChatMessageResponse.threads)
  return &threads_;
}
inline const ::e8::ChatMessageThread& GetChatMessageResponse::threads(int index) const {
  // @@protoc_insertion_point(field_get:e8.GetChatMessageResponse.threads)
  return threads_.Get(index);
}
inline ::e8::ChatMessageThread* GetChatMessageResponse::add_threads() {
  // @@protoc_insertion_point(field_add:e8.GetChatMessageResponse.threads)
  return threads_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::e8::ChatMessageThread >&
GetChatMessageResponse::threads() const {
  // @@protoc_insertion_point(field_list:e8.GetChatMessageResponse.threads)
  return threads_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace e8

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_service_5fchat_5fmessage_2eproto
