// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service_node_state.proto
// Original file comments:
// *
// e8yes demo web server.
//
// <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
//
// <p>This program is free software: you can redistribute it and/or modify it under the terms of the
// GNU General Public License as published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
// without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// <p>You should have received a copy of the GNU General Public License along with this program. If
// not, see <http://www.gnu.org/licenses/>.
//
#ifndef GRPC_service_5fnode_5fstate_2eproto__INCLUDED
#define GRPC_service_5fnode_5fstate_2eproto__INCLUDED

#include "service_node_state.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace e8 {

class NodeStateService final {
 public:
  static constexpr char const* service_full_name() {
    return "e8.NodeStateService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Applies incremental updates to the node state snapshot.
    virtual ::grpc::Status ReviseNodeState(::grpc::ClientContext* context, const ::e8::ReviseNodeStateRequest& request, ::e8::ReviseNodeStateResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::ReviseNodeStateResponse>> AsyncReviseNodeState(::grpc::ClientContext* context, const ::e8::ReviseNodeStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::ReviseNodeStateResponse>>(AsyncReviseNodeStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::ReviseNodeStateResponse>> PrepareAsyncReviseNodeState(::grpc::ClientContext* context, const ::e8::ReviseNodeStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::ReviseNodeStateResponse>>(PrepareAsyncReviseNodeStateRaw(context, request, cq));
    }
    // Returns the the latest revision epoch the target node is currently at.
    virtual ::grpc::Status GetCurrentRevisionEpoch(::grpc::ClientContext* context, const ::e8::GetCurrentRevisionEpochRequest& request, ::e8::GetCurrentRevisionEpochResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetCurrentRevisionEpochResponse>> AsyncGetCurrentRevisionEpoch(::grpc::ClientContext* context, const ::e8::GetCurrentRevisionEpochRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetCurrentRevisionEpochResponse>>(AsyncGetCurrentRevisionEpochRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetCurrentRevisionEpochResponse>> PrepareAsyncGetCurrentRevisionEpoch(::grpc::ClientContext* context, const ::e8::GetCurrentRevisionEpochRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetCurrentRevisionEpochResponse>>(PrepareAsyncGetCurrentRevisionEpochRaw(context, request, cq));
    }
    // Add a peer to the current node.
    virtual ::grpc::Status AddPeers(::grpc::ClientContext* context, const ::e8::AddPeersRequest& request, ::e8::AddPeersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::AddPeersResponse>> AsyncAddPeers(::grpc::ClientContext* context, const ::e8::AddPeersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::AddPeersResponse>>(AsyncAddPeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::AddPeersResponse>> PrepareAsyncAddPeers(::grpc::ClientContext* context, const ::e8::AddPeersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::AddPeersResponse>>(PrepareAsyncAddPeersRaw(context, request, cq));
    }
    // Delete a peer that was previously added to the current node.
    virtual ::grpc::Status DeletePeers(::grpc::ClientContext* context, const ::e8::DeletePeersRequest& request, ::e8::DeletePeersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::DeletePeersResponse>> AsyncDeletePeers(::grpc::ClientContext* context, const ::e8::DeletePeersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::DeletePeersResponse>>(AsyncDeletePeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::DeletePeersResponse>> PrepareAsyncDeletePeers(::grpc::ClientContext* context, const ::e8::DeletePeersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::e8::DeletePeersResponse>>(PrepareAsyncDeletePeersRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Applies incremental updates to the node state snapshot.
      virtual void ReviseNodeState(::grpc::ClientContext* context, const ::e8::ReviseNodeStateRequest* request, ::e8::ReviseNodeStateResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Returns the the latest revision epoch the target node is currently at.
      virtual void GetCurrentRevisionEpoch(::grpc::ClientContext* context, const ::e8::GetCurrentRevisionEpochRequest* request, ::e8::GetCurrentRevisionEpochResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Add a peer to the current node.
      virtual void AddPeers(::grpc::ClientContext* context, const ::e8::AddPeersRequest* request, ::e8::AddPeersResponse* response, std::function<void(::grpc::Status)>) = 0;
      // Delete a peer that was previously added to the current node.
      virtual void DeletePeers(::grpc::ClientContext* context, const ::e8::DeletePeersRequest* request, ::e8::DeletePeersResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::ReviseNodeStateResponse>* AsyncReviseNodeStateRaw(::grpc::ClientContext* context, const ::e8::ReviseNodeStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::ReviseNodeStateResponse>* PrepareAsyncReviseNodeStateRaw(::grpc::ClientContext* context, const ::e8::ReviseNodeStateRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetCurrentRevisionEpochResponse>* AsyncGetCurrentRevisionEpochRaw(::grpc::ClientContext* context, const ::e8::GetCurrentRevisionEpochRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::GetCurrentRevisionEpochResponse>* PrepareAsyncGetCurrentRevisionEpochRaw(::grpc::ClientContext* context, const ::e8::GetCurrentRevisionEpochRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::AddPeersResponse>* AsyncAddPeersRaw(::grpc::ClientContext* context, const ::e8::AddPeersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::AddPeersResponse>* PrepareAsyncAddPeersRaw(::grpc::ClientContext* context, const ::e8::AddPeersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::DeletePeersResponse>* AsyncDeletePeersRaw(::grpc::ClientContext* context, const ::e8::DeletePeersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::e8::DeletePeersResponse>* PrepareAsyncDeletePeersRaw(::grpc::ClientContext* context, const ::e8::DeletePeersRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ReviseNodeState(::grpc::ClientContext* context, const ::e8::ReviseNodeStateRequest& request, ::e8::ReviseNodeStateResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::ReviseNodeStateResponse>> AsyncReviseNodeState(::grpc::ClientContext* context, const ::e8::ReviseNodeStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::ReviseNodeStateResponse>>(AsyncReviseNodeStateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::ReviseNodeStateResponse>> PrepareAsyncReviseNodeState(::grpc::ClientContext* context, const ::e8::ReviseNodeStateRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::ReviseNodeStateResponse>>(PrepareAsyncReviseNodeStateRaw(context, request, cq));
    }
    ::grpc::Status GetCurrentRevisionEpoch(::grpc::ClientContext* context, const ::e8::GetCurrentRevisionEpochRequest& request, ::e8::GetCurrentRevisionEpochResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetCurrentRevisionEpochResponse>> AsyncGetCurrentRevisionEpoch(::grpc::ClientContext* context, const ::e8::GetCurrentRevisionEpochRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetCurrentRevisionEpochResponse>>(AsyncGetCurrentRevisionEpochRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetCurrentRevisionEpochResponse>> PrepareAsyncGetCurrentRevisionEpoch(::grpc::ClientContext* context, const ::e8::GetCurrentRevisionEpochRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::GetCurrentRevisionEpochResponse>>(PrepareAsyncGetCurrentRevisionEpochRaw(context, request, cq));
    }
    ::grpc::Status AddPeers(::grpc::ClientContext* context, const ::e8::AddPeersRequest& request, ::e8::AddPeersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::AddPeersResponse>> AsyncAddPeers(::grpc::ClientContext* context, const ::e8::AddPeersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::AddPeersResponse>>(AsyncAddPeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::AddPeersResponse>> PrepareAsyncAddPeers(::grpc::ClientContext* context, const ::e8::AddPeersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::AddPeersResponse>>(PrepareAsyncAddPeersRaw(context, request, cq));
    }
    ::grpc::Status DeletePeers(::grpc::ClientContext* context, const ::e8::DeletePeersRequest& request, ::e8::DeletePeersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::DeletePeersResponse>> AsyncDeletePeers(::grpc::ClientContext* context, const ::e8::DeletePeersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::DeletePeersResponse>>(AsyncDeletePeersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::DeletePeersResponse>> PrepareAsyncDeletePeers(::grpc::ClientContext* context, const ::e8::DeletePeersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::e8::DeletePeersResponse>>(PrepareAsyncDeletePeersRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ReviseNodeState(::grpc::ClientContext* context, const ::e8::ReviseNodeStateRequest* request, ::e8::ReviseNodeStateResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCurrentRevisionEpoch(::grpc::ClientContext* context, const ::e8::GetCurrentRevisionEpochRequest* request, ::e8::GetCurrentRevisionEpochResponse* response, std::function<void(::grpc::Status)>) override;
      void AddPeers(::grpc::ClientContext* context, const ::e8::AddPeersRequest* request, ::e8::AddPeersResponse* response, std::function<void(::grpc::Status)>) override;
      void DeletePeers(::grpc::ClientContext* context, const ::e8::DeletePeersRequest* request, ::e8::DeletePeersResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::e8::ReviseNodeStateResponse>* AsyncReviseNodeStateRaw(::grpc::ClientContext* context, const ::e8::ReviseNodeStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::ReviseNodeStateResponse>* PrepareAsyncReviseNodeStateRaw(::grpc::ClientContext* context, const ::e8::ReviseNodeStateRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::GetCurrentRevisionEpochResponse>* AsyncGetCurrentRevisionEpochRaw(::grpc::ClientContext* context, const ::e8::GetCurrentRevisionEpochRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::GetCurrentRevisionEpochResponse>* PrepareAsyncGetCurrentRevisionEpochRaw(::grpc::ClientContext* context, const ::e8::GetCurrentRevisionEpochRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::AddPeersResponse>* AsyncAddPeersRaw(::grpc::ClientContext* context, const ::e8::AddPeersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::AddPeersResponse>* PrepareAsyncAddPeersRaw(::grpc::ClientContext* context, const ::e8::AddPeersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::DeletePeersResponse>* AsyncDeletePeersRaw(::grpc::ClientContext* context, const ::e8::DeletePeersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::e8::DeletePeersResponse>* PrepareAsyncDeletePeersRaw(::grpc::ClientContext* context, const ::e8::DeletePeersRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ReviseNodeState_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCurrentRevisionEpoch_;
    const ::grpc::internal::RpcMethod rpcmethod_AddPeers_;
    const ::grpc::internal::RpcMethod rpcmethod_DeletePeers_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Applies incremental updates to the node state snapshot.
    virtual ::grpc::Status ReviseNodeState(::grpc::ServerContext* context, const ::e8::ReviseNodeStateRequest* request, ::e8::ReviseNodeStateResponse* response);
    // Returns the the latest revision epoch the target node is currently at.
    virtual ::grpc::Status GetCurrentRevisionEpoch(::grpc::ServerContext* context, const ::e8::GetCurrentRevisionEpochRequest* request, ::e8::GetCurrentRevisionEpochResponse* response);
    // Add a peer to the current node.
    virtual ::grpc::Status AddPeers(::grpc::ServerContext* context, const ::e8::AddPeersRequest* request, ::e8::AddPeersResponse* response);
    // Delete a peer that was previously added to the current node.
    virtual ::grpc::Status DeletePeers(::grpc::ServerContext* context, const ::e8::DeletePeersRequest* request, ::e8::DeletePeersResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ReviseNodeState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ReviseNodeState() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ReviseNodeState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReviseNodeState(::grpc::ServerContext* context, const ::e8::ReviseNodeStateRequest* request, ::e8::ReviseNodeStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReviseNodeState(::grpc::ServerContext* context, ::e8::ReviseNodeStateRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::ReviseNodeStateResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCurrentRevisionEpoch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetCurrentRevisionEpoch() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCurrentRevisionEpoch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentRevisionEpoch(::grpc::ServerContext* context, const ::e8::GetCurrentRevisionEpochRequest* request, ::e8::GetCurrentRevisionEpochResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentRevisionEpoch(::grpc::ServerContext* context, ::e8::GetCurrentRevisionEpochRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::GetCurrentRevisionEpochResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AddPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_AddPeers() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_AddPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPeers(::grpc::ServerContext* context, const ::e8::AddPeersRequest* request, ::e8::AddPeersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPeers(::grpc::ServerContext* context, ::e8::AddPeersRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::AddPeersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeletePeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeletePeers() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeletePeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePeers(::grpc::ServerContext* context, const ::e8::DeletePeersRequest* request, ::e8::DeletePeersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePeers(::grpc::ServerContext* context, ::e8::DeletePeersRequest* request, ::grpc::ServerAsyncResponseWriter< ::e8::DeletePeersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ReviseNodeState<WithAsyncMethod_GetCurrentRevisionEpoch<WithAsyncMethod_AddPeers<WithAsyncMethod_DeletePeers<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ReviseNodeState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ReviseNodeState() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ReviseNodeState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReviseNodeState(::grpc::ServerContext* context, const ::e8::ReviseNodeStateRequest* request, ::e8::ReviseNodeStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCurrentRevisionEpoch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetCurrentRevisionEpoch() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCurrentRevisionEpoch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentRevisionEpoch(::grpc::ServerContext* context, const ::e8::GetCurrentRevisionEpochRequest* request, ::e8::GetCurrentRevisionEpochResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AddPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_AddPeers() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_AddPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPeers(::grpc::ServerContext* context, const ::e8::AddPeersRequest* request, ::e8::AddPeersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeletePeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeletePeers() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeletePeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePeers(::grpc::ServerContext* context, const ::e8::DeletePeersRequest* request, ::e8::DeletePeersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReviseNodeState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ReviseNodeState() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ReviseNodeState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReviseNodeState(::grpc::ServerContext* context, const ::e8::ReviseNodeStateRequest* request, ::e8::ReviseNodeStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReviseNodeState(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCurrentRevisionEpoch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetCurrentRevisionEpoch() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCurrentRevisionEpoch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCurrentRevisionEpoch(::grpc::ServerContext* context, const ::e8::GetCurrentRevisionEpochRequest* request, ::e8::GetCurrentRevisionEpochResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCurrentRevisionEpoch(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AddPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_AddPeers() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_AddPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AddPeers(::grpc::ServerContext* context, const ::e8::AddPeersRequest* request, ::e8::AddPeersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAddPeers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeletePeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeletePeers() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeletePeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeletePeers(::grpc::ServerContext* context, const ::e8::DeletePeersRequest* request, ::e8::DeletePeersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeletePeers(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReviseNodeState : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ReviseNodeState() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::ReviseNodeStateRequest, ::e8::ReviseNodeStateResponse>(std::bind(&WithStreamedUnaryMethod_ReviseNodeState<BaseClass>::StreamedReviseNodeState, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ReviseNodeState() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReviseNodeState(::grpc::ServerContext* context, const ::e8::ReviseNodeStateRequest* request, ::e8::ReviseNodeStateResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReviseNodeState(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::ReviseNodeStateRequest,::e8::ReviseNodeStateResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCurrentRevisionEpoch : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetCurrentRevisionEpoch() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::GetCurrentRevisionEpochRequest, ::e8::GetCurrentRevisionEpochResponse>(std::bind(&WithStreamedUnaryMethod_GetCurrentRevisionEpoch<BaseClass>::StreamedGetCurrentRevisionEpoch, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetCurrentRevisionEpoch() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCurrentRevisionEpoch(::grpc::ServerContext* context, const ::e8::GetCurrentRevisionEpochRequest* request, ::e8::GetCurrentRevisionEpochResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCurrentRevisionEpoch(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::GetCurrentRevisionEpochRequest,::e8::GetCurrentRevisionEpochResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_AddPeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_AddPeers() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::AddPeersRequest, ::e8::AddPeersResponse>(std::bind(&WithStreamedUnaryMethod_AddPeers<BaseClass>::StreamedAddPeers, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_AddPeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status AddPeers(::grpc::ServerContext* context, const ::e8::AddPeersRequest* request, ::e8::AddPeersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAddPeers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::AddPeersRequest,::e8::AddPeersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeletePeers : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeletePeers() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::e8::DeletePeersRequest, ::e8::DeletePeersResponse>(std::bind(&WithStreamedUnaryMethod_DeletePeers<BaseClass>::StreamedDeletePeers, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeletePeers() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeletePeers(::grpc::ServerContext* context, const ::e8::DeletePeersRequest* request, ::e8::DeletePeersResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeletePeers(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::e8::DeletePeersRequest,::e8::DeletePeersResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ReviseNodeState<WithStreamedUnaryMethod_GetCurrentRevisionEpoch<WithStreamedUnaryMethod_AddPeers<WithStreamedUnaryMethod_DeletePeers<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ReviseNodeState<WithStreamedUnaryMethod_GetCurrentRevisionEpoch<WithStreamedUnaryMethod_AddPeers<WithStreamedUnaryMethod_DeletePeers<Service > > > > StreamedService;
};

}  // namespace e8


#endif  // GRPC_service_5fnode_5fstate_2eproto__INCLUDED
