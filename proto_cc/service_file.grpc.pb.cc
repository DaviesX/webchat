// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service_file.proto

#include "service_file.pb.h"
#include "service_file.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace e8 {

static const char* FileService_method_names[] = {
  "/e8.FileService/Upload",
  "/e8.FileService/Download",
};

std::unique_ptr< FileService::Stub> FileService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< FileService::Stub> stub(new FileService::Stub(channel));
  return stub;
}

FileService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Upload_(FileService_method_names[0], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_Download_(FileService_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientWriter< ::e8::UploadFileRequest>* FileService::Stub::UploadRaw(::grpc::ClientContext* context, ::e8::UploadFileResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::e8::UploadFileRequest>::Create(channel_.get(), rpcmethod_Upload_, context, response);
}

::grpc::ClientAsyncWriter< ::e8::UploadFileRequest>* FileService::Stub::AsyncUploadRaw(::grpc::ClientContext* context, ::e8::UploadFileResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::e8::UploadFileRequest>::Create(channel_.get(), cq, rpcmethod_Upload_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::e8::UploadFileRequest>* FileService::Stub::PrepareAsyncUploadRaw(::grpc::ClientContext* context, ::e8::UploadFileResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::e8::UploadFileRequest>::Create(channel_.get(), cq, rpcmethod_Upload_, context, response, false, nullptr);
}

::grpc::ClientReader< ::e8::DownloadFileResponse>* FileService::Stub::DownloadRaw(::grpc::ClientContext* context, const ::e8::DownloadFileRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::e8::DownloadFileResponse>::Create(channel_.get(), rpcmethod_Download_, context, request);
}

::grpc::ClientAsyncReader< ::e8::DownloadFileResponse>* FileService::Stub::AsyncDownloadRaw(::grpc::ClientContext* context, const ::e8::DownloadFileRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::e8::DownloadFileResponse>::Create(channel_.get(), cq, rpcmethod_Download_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::e8::DownloadFileResponse>* FileService::Stub::PrepareAsyncDownloadRaw(::grpc::ClientContext* context, const ::e8::DownloadFileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::e8::DownloadFileResponse>::Create(channel_.get(), cq, rpcmethod_Download_, context, request, false, nullptr);
}

FileService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< FileService::Service, ::e8::UploadFileRequest, ::e8::UploadFileResponse>(
          std::mem_fn(&FileService::Service::Upload), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      FileService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< FileService::Service, ::e8::DownloadFileRequest, ::e8::DownloadFileResponse>(
          std::mem_fn(&FileService::Service::Download), this)));
}

FileService::Service::~Service() {
}

::grpc::Status FileService::Service::Upload(::grpc::ServerContext* context, ::grpc::ServerReader< ::e8::UploadFileRequest>* reader, ::e8::UploadFileResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status FileService::Service::Download(::grpc::ServerContext* context, const ::e8::DownloadFileRequest* request, ::grpc::ServerWriter< ::e8::DownloadFileResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace e8

