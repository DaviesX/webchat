# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import service_node_state_pb2 as service__node__state__pb2


class NodeStateServiceStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.ReviseNodeState = channel.unary_unary(
        '/e8.NodeStateService/ReviseNodeState',
        request_serializer=service__node__state__pb2.ReviseNodeStateRequest.SerializeToString,
        response_deserializer=service__node__state__pb2.ReviseNodeStateResponse.FromString,
        )
    self.GetCurrentRevisionEpoch = channel.unary_unary(
        '/e8.NodeStateService/GetCurrentRevisionEpoch',
        request_serializer=service__node__state__pb2.GetCurrentRevisionEpochRequest.SerializeToString,
        response_deserializer=service__node__state__pb2.GetCurrentRevisionEpochResponse.FromString,
        )
    self.AddPeers = channel.unary_unary(
        '/e8.NodeStateService/AddPeers',
        request_serializer=service__node__state__pb2.AddPeersRequest.SerializeToString,
        response_deserializer=service__node__state__pb2.AddPeersResponse.FromString,
        )
    self.DeletePeers = channel.unary_unary(
        '/e8.NodeStateService/DeletePeers',
        request_serializer=service__node__state__pb2.DeletePeersRequest.SerializeToString,
        response_deserializer=service__node__state__pb2.DeletePeersResponse.FromString,
        )


class NodeStateServiceServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def ReviseNodeState(self, request, context):
    """Applies incremental updates to the node state snapshot.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetCurrentRevisionEpoch(self, request, context):
    """Returns the the latest revision epoch the target node is currently at.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddPeers(self, request, context):
    """Add a peer to the current node.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DeletePeers(self, request, context):
    """Delete a peer that was previously added to the current node.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_NodeStateServiceServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'ReviseNodeState': grpc.unary_unary_rpc_method_handler(
          servicer.ReviseNodeState,
          request_deserializer=service__node__state__pb2.ReviseNodeStateRequest.FromString,
          response_serializer=service__node__state__pb2.ReviseNodeStateResponse.SerializeToString,
      ),
      'GetCurrentRevisionEpoch': grpc.unary_unary_rpc_method_handler(
          servicer.GetCurrentRevisionEpoch,
          request_deserializer=service__node__state__pb2.GetCurrentRevisionEpochRequest.FromString,
          response_serializer=service__node__state__pb2.GetCurrentRevisionEpochResponse.SerializeToString,
      ),
      'AddPeers': grpc.unary_unary_rpc_method_handler(
          servicer.AddPeers,
          request_deserializer=service__node__state__pb2.AddPeersRequest.FromString,
          response_serializer=service__node__state__pb2.AddPeersResponse.SerializeToString,
      ),
      'DeletePeers': grpc.unary_unary_rpc_method_handler(
          servicer.DeletePeers,
          request_deserializer=service__node__state__pb2.DeletePeersRequest.FromString,
          response_serializer=service__node__state__pb2.DeletePeersResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'e8.NodeStateService', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
