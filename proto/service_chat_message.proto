/**
 * e8yes demo web server.
 *
 * <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
 *
 * <p>This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU General Public License along with this program. If
 * not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package e8;

import "pagination.proto";
import "chat_message.proto";

message CreateChatMessageThreadRequest {
    int64 channel_id = 1;
    string thread_title = 2;
    ChatMessageThreadType thread_type = 3;
}

message CreateChatMessageThreadResponse {
    int64 thread_id = 1;
}


message SendChatMessageRequest {
    int64 thread_id = 1;
    ChatMessageEntry message = 2;
}

message SendChatMessageResponse {
    ChatMessageThread updated_thread = 1;
}


message GetChatMessageRequest {
    int64 channel_id = 1;
    Pagination pagination = 2;
}

message GetChatMessageResponse {
    repeated ChatMessageThread threads = 1;
}


service ChatMessageService {
    // Create a new message thread in the specified channel.
    rpc CreateChatMessageThread (CreateChatMessageThreadRequest) returns
        (CreateChatMessageThreadResponse);

    // Send a chat message to the message channel where the logged-in user
    // is the sender.
    rpc SendChatMessage (SendChatMessageRequest) returns 
        (SendChatMessageResponse);

    // Get a history of the chat messages in the specified message channel.
    rpc GetChatMessage (GetChatMessageRequest) returns
        (GetChatMessageResponse);
}
