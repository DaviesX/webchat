/**
 * e8yes demo web.
 *
 * <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
 *
 * <p>This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU General Public License along with this program. If
 * not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package e8;

import "chat_message.proto";
import "file.proto";
import "pagination.proto";

message CreateChatMessageThreadRequest {
    int64 channel_id = 1;
    string thread_title = 2;
    ChatMessageThreadType thread_type = 3;
}

message CreateChatMessageThreadResponse {
    ChatMessageThread thread = 1;
}


message SendChatMessageRequest {
    int64 thread_id = 1;

    // This determines the number of media files attached to the message.
    repeated FileFormat media_file_formats = 2;

    // This determines the number of general binary files attached to the
    // message.
    repeated FileFormat binary_file_formats = 3;

    // Text content attached to the message.
    repeated string texts = 4;
}

message SendChatMessageResponse {
    ChatMessageEntry message = 1;

    // Access tokens associated with each media file requested.
    repeated FileTokenAccess media_file_readwrite_accesses = 2;

    // Access tokens associated with each binary file requested.
    repeated FileTokenAccess binary_file_readwrite_accesses = 3;
}


message GetChatMessagesRequest {
    // ID of the chat message thread to fetch messages from.
    int64 thread_id = 1;

    // Message thread pagination.
    Pagination pagination = 2;
}

message GetChatMessagesResponse {
    repeated ChatMessageEntry messages = 1;
}


message GetChatMessageThreadsRequest {
    // ID of the message channel to fetch message threads from.
    int64 channel_id = 1;

    // Maximum number of messages to fetch per message thread.
    int32 limit_per_thread = 2;

    // Message thread pagination.
    Pagination pagination = 3;
}

message GetChatMessageThreadsResponse {
    repeated ChatMessageThread threads = 1;
}


service ChatMessageService {
    // Create a new message thread in the specified channel.
    rpc CreateChatMessageThread (CreateChatMessageThreadRequest) returns
        (CreateChatMessageThreadResponse);

    // Send a chat message to the message channel where the logged-in user
    // is the sender.
    rpc SendChatMessage (SendChatMessageRequest) returns 
        (SendChatMessageResponse);

    // Get messages from the specified chat message group.
    rpc GetChatMessages (GetChatMessagesRequest) returns
        (GetChatMessagesResponse);

    // Get a history of chat message groups each with a summary list of the
    // chat messages.
    rpc GetChatMessageThreads (GetChatMessageThreadsRequest) returns
        (GetChatMessageThreadsResponse);
}
