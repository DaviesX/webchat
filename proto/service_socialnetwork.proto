/**
 * e8yes demo web server.
 *
 * <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
 *
 * <p>This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU General Public License along with this program. If
 * not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package e8;

import "user_profile.proto";
import "user_relation.proto";
import "pagination.proto";

message GetUserRelationsRequest {
    // Source user is the logged in user.
    int64 target_user_id = 1;
}

message GetUserRelationsResponse {
    int64 source_user_id = 1;
    int64 target_user_id = 2;
    repeated UserRelationRecord user_relations = 3;
}

message SendInvitationRequest {
    int64 invitee_user_id = 1;
}

message SendInvitationResponse {}


message DeleteInvitationRequest {
    int64 invitee_user_id = 1;
}

message DeleteInvitationResponse {}


message ProcessInvitationRequest {
    int64 inviter_user_id = 1;
    bool accept = 2;
}

message ProcessInvitationResponse {}


message DeleteContactRequest {
    int64 deleted_contact_user_id = 1;
}

message DeleteContactResponse {
    bool deleted = 1;
}


message GetRelatedUserListRequest {
    Pagination pagination = 1;
    repeated UserRelation relation_filter = 2;
}

message GetRelatedUserListResponse {
    repeated UserPublicProfile user_profiles = 1;
}

service SocialNetworkService {
    /**
     * Get the directed relation between the logged-in user and some other user.
     */
    rpc GetUserRelations(GetUserRelationsRequest) returns 
        (GetUserRelationsResponse);

    /**
     * Send an invitation to another user where the logged-in user is the inviter.
     */
    rpc SendInvitation (SendInvitationRequest) returns (SendInvitationResponse);

    /**
     * Delete an invitation previously sent where the logged-in user is inviter.
     */
    rpc DeleteInvitation (DeleteInvitationRequest) returns 
        (DeleteInvitationResponse);

    /**
     * Accept/reject an invitation. If accepted, it will establish the 
     * contact relation where the logged-in user is the invitee.
     */
    rpc ProcessInvitation (ProcessInvitationRequest) returns 
        (ProcessInvitationResponse);

    /**
     * Delete a contact relation for the logged-in user.
     */
    rpc DeleteContact (DeleteContactRequest) returns (DeleteContactResponse);

    /**
     * Get the a list of user related to the logged-in user. The type of relation
     * is specified by the constraints in the request. 
     */
    rpc GetRelatedUserList (GetRelatedUserListRequest) returns 
        (GetRelatedUserListResponse);
}
