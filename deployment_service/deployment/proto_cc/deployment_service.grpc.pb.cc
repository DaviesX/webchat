// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: deployment_service.proto

#include "deployment_service.pb.h"
#include "deployment_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace e8 {

static const char* DeploymentService_method_names[] = {
  "/e8.DeploymentService/Deploy",
};

std::unique_ptr< DeploymentService::Stub> DeploymentService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< DeploymentService::Stub> stub(new DeploymentService::Stub(channel));
  return stub;
}

DeploymentService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Deploy_(DeploymentService_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::e8::DeployResponse>* DeploymentService::Stub::DeployRaw(::grpc::ClientContext* context, const ::e8::DeployRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::e8::DeployResponse>::Create(channel_.get(), rpcmethod_Deploy_, context, request);
}

::grpc::ClientAsyncReader< ::e8::DeployResponse>* DeploymentService::Stub::AsyncDeployRaw(::grpc::ClientContext* context, const ::e8::DeployRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::e8::DeployResponse>::Create(channel_.get(), cq, rpcmethod_Deploy_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::e8::DeployResponse>* DeploymentService::Stub::PrepareAsyncDeployRaw(::grpc::ClientContext* context, const ::e8::DeployRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::e8::DeployResponse>::Create(channel_.get(), cq, rpcmethod_Deploy_, context, request, false, nullptr);
}

DeploymentService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      DeploymentService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< DeploymentService::Service, ::e8::DeployRequest, ::e8::DeployResponse>(
          std::mem_fn(&DeploymentService::Service::Deploy), this)));
}

DeploymentService::Service::~Service() {
}

::grpc::Status DeploymentService::Service::Deploy(::grpc::ServerContext* context, const ::e8::DeployRequest* request, ::grpc::ServerWriter< ::e8::DeployResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace e8

