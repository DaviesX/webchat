// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service_user.proto

#include "service_user.pb.h"
#include "service_user.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace e8 {

static const char* UserService_method_names[] = {
  "/e8.UserService/Register",
  "/e8.UserService/Authorize",
  "/e8.UserService/GetPublicProfile",
  "/e8.UserService/UpdatePublicProfile",
  "/e8.UserService/Search",
  "/e8.UserService/CreateNewAvatar",
};

std::unique_ptr< UserService::Stub> UserService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UserService::Stub> stub(new UserService::Stub(channel));
  return stub;
}

UserService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Register_(UserService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Authorize_(UserService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPublicProfile_(UserService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdatePublicProfile_(UserService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Search_(UserService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateNewAvatar_(UserService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UserService::Stub::Register(::grpc::ClientContext* context, const ::e8::RegistrationRequest& request, ::e8::RegistrationReponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Register_, context, request, response);
}

void UserService::Stub::experimental_async::Register(::grpc::ClientContext* context, const ::e8::RegistrationRequest* request, ::e8::RegistrationReponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::e8::RegistrationReponse>* UserService::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::e8::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::RegistrationReponse>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::e8::RegistrationReponse>* UserService::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::e8::RegistrationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::RegistrationReponse>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, false);
}

::grpc::Status UserService::Stub::Authorize(::grpc::ClientContext* context, const ::e8::AuthorizationRequest& request, ::e8::AuthorizationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Authorize_, context, request, response);
}

void UserService::Stub::experimental_async::Authorize(::grpc::ClientContext* context, const ::e8::AuthorizationRequest* request, ::e8::AuthorizationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Authorize_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::e8::AuthorizationResponse>* UserService::Stub::AsyncAuthorizeRaw(::grpc::ClientContext* context, const ::e8::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::AuthorizationResponse>::Create(channel_.get(), cq, rpcmethod_Authorize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::e8::AuthorizationResponse>* UserService::Stub::PrepareAsyncAuthorizeRaw(::grpc::ClientContext* context, const ::e8::AuthorizationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::AuthorizationResponse>::Create(channel_.get(), cq, rpcmethod_Authorize_, context, request, false);
}

::grpc::Status UserService::Stub::GetPublicProfile(::grpc::ClientContext* context, const ::e8::GetPublicProfileRequest& request, ::e8::GetPublicProfileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPublicProfile_, context, request, response);
}

void UserService::Stub::experimental_async::GetPublicProfile(::grpc::ClientContext* context, const ::e8::GetPublicProfileRequest* request, ::e8::GetPublicProfileResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPublicProfile_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::e8::GetPublicProfileResponse>* UserService::Stub::AsyncGetPublicProfileRaw(::grpc::ClientContext* context, const ::e8::GetPublicProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::GetPublicProfileResponse>::Create(channel_.get(), cq, rpcmethod_GetPublicProfile_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::e8::GetPublicProfileResponse>* UserService::Stub::PrepareAsyncGetPublicProfileRaw(::grpc::ClientContext* context, const ::e8::GetPublicProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::GetPublicProfileResponse>::Create(channel_.get(), cq, rpcmethod_GetPublicProfile_, context, request, false);
}

::grpc::Status UserService::Stub::UpdatePublicProfile(::grpc::ClientContext* context, const ::e8::UpdatePublicProfileRequest& request, ::e8::UpdatePublicProfileResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdatePublicProfile_, context, request, response);
}

void UserService::Stub::experimental_async::UpdatePublicProfile(::grpc::ClientContext* context, const ::e8::UpdatePublicProfileRequest* request, ::e8::UpdatePublicProfileResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdatePublicProfile_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::e8::UpdatePublicProfileResponse>* UserService::Stub::AsyncUpdatePublicProfileRaw(::grpc::ClientContext* context, const ::e8::UpdatePublicProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::UpdatePublicProfileResponse>::Create(channel_.get(), cq, rpcmethod_UpdatePublicProfile_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::e8::UpdatePublicProfileResponse>* UserService::Stub::PrepareAsyncUpdatePublicProfileRaw(::grpc::ClientContext* context, const ::e8::UpdatePublicProfileRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::UpdatePublicProfileResponse>::Create(channel_.get(), cq, rpcmethod_UpdatePublicProfile_, context, request, false);
}

::grpc::Status UserService::Stub::Search(::grpc::ClientContext* context, const ::e8::SearchUserRequest& request, ::e8::SearchUserResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Search_, context, request, response);
}

void UserService::Stub::experimental_async::Search(::grpc::ClientContext* context, const ::e8::SearchUserRequest* request, ::e8::SearchUserResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Search_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::e8::SearchUserResponse>* UserService::Stub::AsyncSearchRaw(::grpc::ClientContext* context, const ::e8::SearchUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::SearchUserResponse>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::e8::SearchUserResponse>* UserService::Stub::PrepareAsyncSearchRaw(::grpc::ClientContext* context, const ::e8::SearchUserRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::SearchUserResponse>::Create(channel_.get(), cq, rpcmethod_Search_, context, request, false);
}

::grpc::Status UserService::Stub::CreateNewAvatar(::grpc::ClientContext* context, const ::e8::CreateNewAvatarRequest& request, ::e8::CreateNewAvatarResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateNewAvatar_, context, request, response);
}

void UserService::Stub::experimental_async::CreateNewAvatar(::grpc::ClientContext* context, const ::e8::CreateNewAvatarRequest* request, ::e8::CreateNewAvatarResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateNewAvatar_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::e8::CreateNewAvatarResponse>* UserService::Stub::AsyncCreateNewAvatarRaw(::grpc::ClientContext* context, const ::e8::CreateNewAvatarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::CreateNewAvatarResponse>::Create(channel_.get(), cq, rpcmethod_CreateNewAvatar_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::e8::CreateNewAvatarResponse>* UserService::Stub::PrepareAsyncCreateNewAvatarRaw(::grpc::ClientContext* context, const ::e8::CreateNewAvatarRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::CreateNewAvatarResponse>::Create(channel_.get(), cq, rpcmethod_CreateNewAvatar_, context, request, false);
}

UserService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::e8::RegistrationRequest, ::e8::RegistrationReponse>(
          std::mem_fn(&UserService::Service::Register), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::e8::AuthorizationRequest, ::e8::AuthorizationResponse>(
          std::mem_fn(&UserService::Service::Authorize), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::e8::GetPublicProfileRequest, ::e8::GetPublicProfileResponse>(
          std::mem_fn(&UserService::Service::GetPublicProfile), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::e8::UpdatePublicProfileRequest, ::e8::UpdatePublicProfileResponse>(
          std::mem_fn(&UserService::Service::UpdatePublicProfile), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::e8::SearchUserRequest, ::e8::SearchUserResponse>(
          std::mem_fn(&UserService::Service::Search), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UserService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UserService::Service, ::e8::CreateNewAvatarRequest, ::e8::CreateNewAvatarResponse>(
          std::mem_fn(&UserService::Service::CreateNewAvatar), this)));
}

UserService::Service::~Service() {
}

::grpc::Status UserService::Service::Register(::grpc::ServerContext* context, const ::e8::RegistrationRequest* request, ::e8::RegistrationReponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::Authorize(::grpc::ServerContext* context, const ::e8::AuthorizationRequest* request, ::e8::AuthorizationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::GetPublicProfile(::grpc::ServerContext* context, const ::e8::GetPublicProfileRequest* request, ::e8::GetPublicProfileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::UpdatePublicProfile(::grpc::ServerContext* context, const ::e8::UpdatePublicProfileRequest* request, ::e8::UpdatePublicProfileResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::Search(::grpc::ServerContext* context, const ::e8::SearchUserRequest* request, ::e8::SearchUserResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UserService::Service::CreateNewAvatar(::grpc::ServerContext* context, const ::e8::CreateNewAvatarRequest* request, ::e8::CreateNewAvatarResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace e8

