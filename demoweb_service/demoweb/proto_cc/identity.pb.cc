// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: identity.proto

#include "identity.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace e8 {
class IdentityDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Identity>
      _instance;
} _Identity_default_instance_;
}  // namespace e8
namespace protobuf_identity_2eproto {
static void InitDefaultsIdentity() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_Identity_default_instance_;
    new (ptr) ::e8::Identity();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::Identity::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Identity =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIdentity}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_Identity.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::Identity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::Identity, expiry_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::Identity, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::Identity, group_names_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::e8::Identity)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::e8::_Identity_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "identity.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016identity.proto\022\002e8\"J\n\010Identity\022\030\n\020expi"
      "ry_timestamp\030\001 \001(\003\022\017\n\007user_id\030\002 \001(\003\022\023\n\013g"
      "roup_names\030\003 \003(\tb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 104);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "identity.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_identity_2eproto
namespace e8 {

// ===================================================================

void Identity::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Identity::kExpiryTimestampFieldNumber;
const int Identity::kUserIdFieldNumber;
const int Identity::kGroupNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Identity::Identity()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_identity_2eproto::scc_info_Identity.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:e8.Identity)
}
Identity::Identity(const Identity& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      group_names_(from.group_names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&expiry_timestamp_, &from.expiry_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&user_id_) -
    reinterpret_cast<char*>(&expiry_timestamp_)) + sizeof(user_id_));
  // @@protoc_insertion_point(copy_constructor:e8.Identity)
}

void Identity::SharedCtor() {
  ::memset(&expiry_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&expiry_timestamp_)) + sizeof(user_id_));
}

Identity::~Identity() {
  // @@protoc_insertion_point(destructor:e8.Identity)
  SharedDtor();
}

void Identity::SharedDtor() {
}

void Identity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Identity::descriptor() {
  ::protobuf_identity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_identity_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Identity& Identity::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_identity_2eproto::scc_info_Identity.base);
  return *internal_default_instance();
}


void Identity::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.Identity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  group_names_.Clear();
  ::memset(&expiry_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&expiry_timestamp_)) + sizeof(user_id_));
  _internal_metadata_.Clear();
}

bool Identity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:e8.Identity)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 expiry_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 user_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string group_names = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_group_names()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group_names(this->group_names_size() - 1).data(),
            static_cast<int>(this->group_names(this->group_names_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "e8.Identity.group_names"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:e8.Identity)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:e8.Identity)
  return false;
#undef DO_
}

void Identity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:e8.Identity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 expiry_timestamp = 1;
  if (this->expiry_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->expiry_timestamp(), output);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->user_id(), output);
  }

  // repeated string group_names = 3;
  for (int i = 0, n = this->group_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_names(i).data(), static_cast<int>(this->group_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "e8.Identity.group_names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->group_names(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:e8.Identity)
}

::google::protobuf::uint8* Identity::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:e8.Identity)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 expiry_timestamp = 1;
  if (this->expiry_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->expiry_timestamp(), target);
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->user_id(), target);
  }

  // repeated string group_names = 3;
  for (int i = 0, n = this->group_names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group_names(i).data(), static_cast<int>(this->group_names(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "e8.Identity.group_names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->group_names(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.Identity)
  return target;
}

size_t Identity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.Identity)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string group_names = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->group_names_size());
  for (int i = 0, n = this->group_names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->group_names(i));
  }

  // int64 expiry_timestamp = 1;
  if (this->expiry_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expiry_timestamp());
  }

  // int64 user_id = 2;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Identity::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.Identity)
  GOOGLE_DCHECK_NE(&from, this);
  const Identity* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Identity>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.Identity)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.Identity)
    MergeFrom(*source);
  }
}

void Identity::MergeFrom(const Identity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.Identity)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  group_names_.MergeFrom(from.group_names_);
  if (from.expiry_timestamp() != 0) {
    set_expiry_timestamp(from.expiry_timestamp());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void Identity::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.Identity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Identity::CopyFrom(const Identity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.Identity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Identity::IsInitialized() const {
  return true;
}

void Identity::Swap(Identity* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Identity::InternalSwap(Identity* other) {
  using std::swap;
  group_names_.InternalSwap(CastToBase(&other->group_names_));
  swap(expiry_timestamp_, other->expiry_timestamp_);
  swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Identity::GetMetadata() const {
  protobuf_identity_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_identity_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace e8
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::e8::Identity* Arena::CreateMaybeMessage< ::e8::Identity >(Arena* arena) {
  return Arena::CreateInternal< ::e8::Identity >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
