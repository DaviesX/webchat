// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_profile.proto

#include "user_profile.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_file_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileTokenAccess;
}  // namespace protobuf_file_2eproto
namespace protobuf_nullable_5fprimitives_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_nullable_5fprimitives_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NullableString;
}  // namespace protobuf_nullable_5fprimitives_2eproto
namespace e8 {
class UserPublicProfileDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UserPublicProfile>
      _instance;
} _UserPublicProfile_default_instance_;
}  // namespace e8
namespace protobuf_user_5fprofile_2eproto {
static void InitDefaultsUserPublicProfile() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_UserPublicProfile_default_instance_;
    new (ptr) ::e8::UserPublicProfile();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::UserPublicProfile::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_UserPublicProfile =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsUserPublicProfile}, {
      &protobuf_nullable_5fprimitives_2eproto::scc_info_NullableString.base,
      &protobuf_file_2eproto::scc_info_FileTokenAccess.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_UserPublicProfile.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::UserPublicProfile, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::UserPublicProfile, user_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::UserPublicProfile, alias_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::UserPublicProfile, avatar_readonly_access_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::UserPublicProfile, avatar_preview_readonly_access_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::e8::UserPublicProfile)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::e8::_UserPublicProfile_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "user_profile.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\022user_profile.proto\022\002e8\032\nfile.proto\032\031nu"
      "llable_primitives.proto\"\271\001\n\021UserPublicPr"
      "ofile\022\017\n\007user_id\030\001 \001(\003\022!\n\005alias\030\002 \001(\0132\022."
      "e8.NullableString\0223\n\026avatar_readonly_acc"
      "ess\030\003 \001(\0132\023.e8.FileTokenAccess\022;\n\036avatar"
      "_preview_readonly_access\030\004 \001(\0132\023.e8.File"
      "TokenAccessb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 259);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "user_profile.proto", &protobuf_RegisterTypes);
  ::protobuf_file_2eproto::AddDescriptors();
  ::protobuf_nullable_5fprimitives_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_user_5fprofile_2eproto
namespace e8 {

// ===================================================================

void UserPublicProfile::InitAsDefaultInstance() {
  ::e8::_UserPublicProfile_default_instance_._instance.get_mutable()->alias_ = const_cast< ::e8::NullableString*>(
      ::e8::NullableString::internal_default_instance());
  ::e8::_UserPublicProfile_default_instance_._instance.get_mutable()->avatar_readonly_access_ = const_cast< ::e8::FileTokenAccess*>(
      ::e8::FileTokenAccess::internal_default_instance());
  ::e8::_UserPublicProfile_default_instance_._instance.get_mutable()->avatar_preview_readonly_access_ = const_cast< ::e8::FileTokenAccess*>(
      ::e8::FileTokenAccess::internal_default_instance());
}
void UserPublicProfile::clear_alias() {
  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
}
void UserPublicProfile::clear_avatar_readonly_access() {
  if (GetArenaNoVirtual() == NULL && avatar_readonly_access_ != NULL) {
    delete avatar_readonly_access_;
  }
  avatar_readonly_access_ = NULL;
}
void UserPublicProfile::clear_avatar_preview_readonly_access() {
  if (GetArenaNoVirtual() == NULL && avatar_preview_readonly_access_ != NULL) {
    delete avatar_preview_readonly_access_;
  }
  avatar_preview_readonly_access_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserPublicProfile::kUserIdFieldNumber;
const int UserPublicProfile::kAliasFieldNumber;
const int UserPublicProfile::kAvatarReadonlyAccessFieldNumber;
const int UserPublicProfile::kAvatarPreviewReadonlyAccessFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserPublicProfile::UserPublicProfile()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_user_5fprofile_2eproto::scc_info_UserPublicProfile.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:e8.UserPublicProfile)
}
UserPublicProfile::UserPublicProfile(const UserPublicProfile& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_alias()) {
    alias_ = new ::e8::NullableString(*from.alias_);
  } else {
    alias_ = NULL;
  }
  if (from.has_avatar_readonly_access()) {
    avatar_readonly_access_ = new ::e8::FileTokenAccess(*from.avatar_readonly_access_);
  } else {
    avatar_readonly_access_ = NULL;
  }
  if (from.has_avatar_preview_readonly_access()) {
    avatar_preview_readonly_access_ = new ::e8::FileTokenAccess(*from.avatar_preview_readonly_access_);
  } else {
    avatar_preview_readonly_access_ = NULL;
  }
  user_id_ = from.user_id_;
  // @@protoc_insertion_point(copy_constructor:e8.UserPublicProfile)
}

void UserPublicProfile::SharedCtor() {
  ::memset(&alias_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&user_id_) -
      reinterpret_cast<char*>(&alias_)) + sizeof(user_id_));
}

UserPublicProfile::~UserPublicProfile() {
  // @@protoc_insertion_point(destructor:e8.UserPublicProfile)
  SharedDtor();
}

void UserPublicProfile::SharedDtor() {
  if (this != internal_default_instance()) delete alias_;
  if (this != internal_default_instance()) delete avatar_readonly_access_;
  if (this != internal_default_instance()) delete avatar_preview_readonly_access_;
}

void UserPublicProfile::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UserPublicProfile::descriptor() {
  ::protobuf_user_5fprofile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_user_5fprofile_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UserPublicProfile& UserPublicProfile::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_user_5fprofile_2eproto::scc_info_UserPublicProfile.base);
  return *internal_default_instance();
}


void UserPublicProfile::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.UserPublicProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && alias_ != NULL) {
    delete alias_;
  }
  alias_ = NULL;
  if (GetArenaNoVirtual() == NULL && avatar_readonly_access_ != NULL) {
    delete avatar_readonly_access_;
  }
  avatar_readonly_access_ = NULL;
  if (GetArenaNoVirtual() == NULL && avatar_preview_readonly_access_ != NULL) {
    delete avatar_preview_readonly_access_;
  }
  avatar_preview_readonly_access_ = NULL;
  user_id_ = GOOGLE_LONGLONG(0);
  _internal_metadata_.Clear();
}

bool UserPublicProfile::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:e8.UserPublicProfile)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 user_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .e8.NullableString alias = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_alias()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .e8.FileTokenAccess avatar_readonly_access = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avatar_readonly_access()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .e8.FileTokenAccess avatar_preview_readonly_access = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_avatar_preview_readonly_access()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:e8.UserPublicProfile)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:e8.UserPublicProfile)
  return false;
#undef DO_
}

void UserPublicProfile::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:e8.UserPublicProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // .e8.NullableString alias = 2;
  if (this->has_alias()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_alias(), output);
  }

  // .e8.FileTokenAccess avatar_readonly_access = 3;
  if (this->has_avatar_readonly_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_avatar_readonly_access(), output);
  }

  // .e8.FileTokenAccess avatar_preview_readonly_access = 4;
  if (this->has_avatar_preview_readonly_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_avatar_preview_readonly_access(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:e8.UserPublicProfile)
}

::google::protobuf::uint8* UserPublicProfile::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:e8.UserPublicProfile)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // .e8.NullableString alias = 2;
  if (this->has_alias()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_alias(), deterministic, target);
  }

  // .e8.FileTokenAccess avatar_readonly_access = 3;
  if (this->has_avatar_readonly_access()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_avatar_readonly_access(), deterministic, target);
  }

  // .e8.FileTokenAccess avatar_preview_readonly_access = 4;
  if (this->has_avatar_preview_readonly_access()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_avatar_preview_readonly_access(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.UserPublicProfile)
  return target;
}

size_t UserPublicProfile::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.UserPublicProfile)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .e8.NullableString alias = 2;
  if (this->has_alias()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *alias_);
  }

  // .e8.FileTokenAccess avatar_readonly_access = 3;
  if (this->has_avatar_readonly_access()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *avatar_readonly_access_);
  }

  // .e8.FileTokenAccess avatar_preview_readonly_access = 4;
  if (this->has_avatar_preview_readonly_access()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *avatar_preview_readonly_access_);
  }

  // int64 user_id = 1;
  if (this->user_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->user_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UserPublicProfile::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.UserPublicProfile)
  GOOGLE_DCHECK_NE(&from, this);
  const UserPublicProfile* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UserPublicProfile>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.UserPublicProfile)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.UserPublicProfile)
    MergeFrom(*source);
  }
}

void UserPublicProfile::MergeFrom(const UserPublicProfile& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.UserPublicProfile)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_alias()) {
    mutable_alias()->::e8::NullableString::MergeFrom(from.alias());
  }
  if (from.has_avatar_readonly_access()) {
    mutable_avatar_readonly_access()->::e8::FileTokenAccess::MergeFrom(from.avatar_readonly_access());
  }
  if (from.has_avatar_preview_readonly_access()) {
    mutable_avatar_preview_readonly_access()->::e8::FileTokenAccess::MergeFrom(from.avatar_preview_readonly_access());
  }
  if (from.user_id() != 0) {
    set_user_id(from.user_id());
  }
}

void UserPublicProfile::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.UserPublicProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserPublicProfile::CopyFrom(const UserPublicProfile& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.UserPublicProfile)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserPublicProfile::IsInitialized() const {
  return true;
}

void UserPublicProfile::Swap(UserPublicProfile* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserPublicProfile::InternalSwap(UserPublicProfile* other) {
  using std::swap;
  swap(alias_, other->alias_);
  swap(avatar_readonly_access_, other->avatar_readonly_access_);
  swap(avatar_preview_readonly_access_, other->avatar_preview_readonly_access_);
  swap(user_id_, other->user_id_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UserPublicProfile::GetMetadata() const {
  protobuf_user_5fprofile_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_user_5fprofile_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace e8
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::e8::UserPublicProfile* Arena::CreateMaybeMessage< ::e8::UserPublicProfile >(Arena* arena) {
  return Arena::CreateInternal< ::e8::UserPublicProfile >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
