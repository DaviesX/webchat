// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: service_chat_message.proto

#include "service_chat_message.pb.h"
#include "service_chat_message.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace e8 {

static const char* ChatMessageService_method_names[] = {
  "/e8.ChatMessageService/SendChatMessage",
  "/e8.ChatMessageService/GetChatMessage",
};

std::unique_ptr< ChatMessageService::Stub> ChatMessageService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ChatMessageService::Stub> stub(new ChatMessageService::Stub(channel));
  return stub;
}

ChatMessageService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SendChatMessage_(ChatMessageService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetChatMessage_(ChatMessageService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ChatMessageService::Stub::SendChatMessage(::grpc::ClientContext* context, const ::e8::SendChatMessageRequest& request, ::e8::SendChatMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SendChatMessage_, context, request, response);
}

void ChatMessageService::Stub::experimental_async::SendChatMessage(::grpc::ClientContext* context, const ::e8::SendChatMessageRequest* request, ::e8::SendChatMessageResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SendChatMessage_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::e8::SendChatMessageResponse>* ChatMessageService::Stub::AsyncSendChatMessageRaw(::grpc::ClientContext* context, const ::e8::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::SendChatMessageResponse>::Create(channel_.get(), cq, rpcmethod_SendChatMessage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::e8::SendChatMessageResponse>* ChatMessageService::Stub::PrepareAsyncSendChatMessageRaw(::grpc::ClientContext* context, const ::e8::SendChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::SendChatMessageResponse>::Create(channel_.get(), cq, rpcmethod_SendChatMessage_, context, request, false);
}

::grpc::Status ChatMessageService::Stub::GetChatMessage(::grpc::ClientContext* context, const ::e8::GetChatMessageRequest& request, ::e8::GetChatMessageResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetChatMessage_, context, request, response);
}

void ChatMessageService::Stub::experimental_async::GetChatMessage(::grpc::ClientContext* context, const ::e8::GetChatMessageRequest* request, ::e8::GetChatMessageResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetChatMessage_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::e8::GetChatMessageResponse>* ChatMessageService::Stub::AsyncGetChatMessageRaw(::grpc::ClientContext* context, const ::e8::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::GetChatMessageResponse>::Create(channel_.get(), cq, rpcmethod_GetChatMessage_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::e8::GetChatMessageResponse>* ChatMessageService::Stub::PrepareAsyncGetChatMessageRaw(::grpc::ClientContext* context, const ::e8::GetChatMessageRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::e8::GetChatMessageResponse>::Create(channel_.get(), cq, rpcmethod_GetChatMessage_, context, request, false);
}

ChatMessageService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatMessageService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatMessageService::Service, ::e8::SendChatMessageRequest, ::e8::SendChatMessageResponse>(
          std::mem_fn(&ChatMessageService::Service::SendChatMessage), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ChatMessageService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ChatMessageService::Service, ::e8::GetChatMessageRequest, ::e8::GetChatMessageResponse>(
          std::mem_fn(&ChatMessageService::Service::GetChatMessage), this)));
}

ChatMessageService::Service::~Service() {
}

::grpc::Status ChatMessageService::Service::SendChatMessage(::grpc::ServerContext* context, const ::e8::SendChatMessageRequest* request, ::e8::SendChatMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ChatMessageService::Service::GetChatMessage(::grpc::ServerContext* context, const ::e8::GetChatMessageRequest* request, ::e8::GetChatMessageResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace e8

