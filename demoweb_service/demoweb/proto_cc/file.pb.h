// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#ifndef PROTOBUF_INCLUDED_file_2eproto
#define PROTOBUF_INCLUDED_file_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "encryption_source.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_file_2eproto 

namespace protobuf_file_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_file_2eproto
namespace e8 {
class FileChunk;
class FileChunkDefaultTypeInternal;
extern FileChunkDefaultTypeInternal _FileChunk_default_instance_;
class FileDescriptor;
class FileDescriptorDefaultTypeInternal;
extern FileDescriptorDefaultTypeInternal _FileDescriptor_default_instance_;
class FileDirectAccess;
class FileDirectAccessDefaultTypeInternal;
extern FileDirectAccessDefaultTypeInternal _FileDirectAccess_default_instance_;
class FileTokenAccess;
class FileTokenAccessDefaultTypeInternal;
extern FileTokenAccessDefaultTypeInternal _FileTokenAccess_default_instance_;
class SignableFileAccess;
class SignableFileAccessDefaultTypeInternal;
extern SignableFileAccessDefaultTypeInternal _SignableFileAccess_default_instance_;
}  // namespace e8
namespace google {
namespace protobuf {
template<> ::e8::FileChunk* Arena::CreateMaybeMessage<::e8::FileChunk>(Arena*);
template<> ::e8::FileDescriptor* Arena::CreateMaybeMessage<::e8::FileDescriptor>(Arena*);
template<> ::e8::FileDirectAccess* Arena::CreateMaybeMessage<::e8::FileDirectAccess>(Arena*);
template<> ::e8::FileTokenAccess* Arena::CreateMaybeMessage<::e8::FileTokenAccess>(Arena*);
template<> ::e8::SignableFileAccess* Arena::CreateMaybeMessage<::e8::SignableFileAccess>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace e8 {

enum FileFormat {
  FFMT_UNKNOWN = 0,
  FFMT_IMAGE_JPEG = 1,
  FFMT_IMAGE_PNG = 2,
  FFMT_VIDEO_MPEG4 = 3,
  FFMT_VIDEO_GIF = 4,
  FFMT_VIDEO_OGV = 5,
  FFMT_AUDIO_MP3 = 6,
  FFMT_AUDIO_OGG = 7,
  FileFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FileFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FileFormat_IsValid(int value);
const FileFormat FileFormat_MIN = FFMT_UNKNOWN;
const FileFormat FileFormat_MAX = FFMT_AUDIO_OGG;
const int FileFormat_ARRAYSIZE = FileFormat_MAX + 1;

const ::google::protobuf::EnumDescriptor* FileFormat_descriptor();
inline const ::std::string& FileFormat_Name(FileFormat value) {
  return ::google::protobuf::internal::NameOfEnum(
    FileFormat_descriptor(), value);
}
inline bool FileFormat_Parse(
    const ::std::string& name, FileFormat* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileFormat>(
    FileFormat_descriptor(), name, value);
}
enum FileAccessMode {
  FAM_READ = 0,
  FAM_WRITE = 1,
  FAM_READWRITE = 2,
  FileAccessMode_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  FileAccessMode_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool FileAccessMode_IsValid(int value);
const FileAccessMode FileAccessMode_MIN = FAM_READ;
const FileAccessMode FileAccessMode_MAX = FAM_READWRITE;
const int FileAccessMode_ARRAYSIZE = FileAccessMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* FileAccessMode_descriptor();
inline const ::std::string& FileAccessMode_Name(FileAccessMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    FileAccessMode_descriptor(), value);
}
inline bool FileAccessMode_Parse(
    const ::std::string& name, FileAccessMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FileAccessMode>(
    FileAccessMode_descriptor(), name, value);
}
// ===================================================================

class FileChunk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.FileChunk) */ {
 public:
  FileChunk();
  virtual ~FileChunk();

  FileChunk(const FileChunk& from);

  inline FileChunk& operator=(const FileChunk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileChunk(FileChunk&& from) noexcept
    : FileChunk() {
    *this = ::std::move(from);
  }

  inline FileChunk& operator=(FileChunk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileChunk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileChunk* internal_default_instance() {
    return reinterpret_cast<const FileChunk*>(
               &_FileChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(FileChunk* other);
  friend void swap(FileChunk& a, FileChunk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileChunk* New() const final {
    return CreateMaybeMessage<FileChunk>(NULL);
  }

  FileChunk* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileChunk>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileChunk& from);
  void MergeFrom(const FileChunk& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileChunk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 chunk_number = 1;
  void clear_chunk_number();
  static const int kChunkNumberFieldNumber = 1;
  ::google::protobuf::int32 chunk_number() const;
  void set_chunk_number(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:e8.FileChunk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 chunk_number_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SignableFileAccess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.SignableFileAccess) */ {
 public:
  SignableFileAccess();
  virtual ~SignableFileAccess();

  SignableFileAccess(const SignableFileAccess& from);

  inline SignableFileAccess& operator=(const SignableFileAccess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SignableFileAccess(SignableFileAccess&& from) noexcept
    : SignableFileAccess() {
    *this = ::std::move(from);
  }

  inline SignableFileAccess& operator=(SignableFileAccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const SignableFileAccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SignableFileAccess* internal_default_instance() {
    return reinterpret_cast<const SignableFileAccess*>(
               &_SignableFileAccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SignableFileAccess* other);
  friend void swap(SignableFileAccess& a, SignableFileAccess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SignableFileAccess* New() const final {
    return CreateMaybeMessage<SignableFileAccess>(NULL);
  }

  SignableFileAccess* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SignableFileAccess>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SignableFileAccess& from);
  void MergeFrom(const SignableFileAccess& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SignableFileAccess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_path = 3;
  void clear_file_path();
  static const int kFilePathFieldNumber = 3;
  const ::std::string& file_path() const;
  void set_file_path(const ::std::string& value);
  #if LANG_CXX11
  void set_file_path(::std::string&& value);
  #endif
  void set_file_path(const char* value);
  void set_file_path(const char* value, size_t size);
  ::std::string* mutable_file_path();
  ::std::string* release_file_path();
  void set_allocated_file_path(::std::string* file_path);

  // int64 expiry_timestamp = 1;
  void clear_expiry_timestamp();
  static const int kExpiryTimestampFieldNumber = 1;
  ::google::protobuf::int64 expiry_timestamp() const;
  void set_expiry_timestamp(::google::protobuf::int64 value);

  // int64 viewer_id = 2;
  void clear_viewer_id();
  static const int kViewerIdFieldNumber = 2;
  ::google::protobuf::int64 viewer_id() const;
  void set_viewer_id(::google::protobuf::int64 value);

  // .e8.FileAccessMode access_mode = 4;
  void clear_access_mode();
  static const int kAccessModeFieldNumber = 4;
  ::e8::FileAccessMode access_mode() const;
  void set_access_mode(::e8::FileAccessMode value);

  // @@protoc_insertion_point(class_scope:e8.SignableFileAccess)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_path_;
  ::google::protobuf::int64 expiry_timestamp_;
  ::google::protobuf::int64 viewer_id_;
  int access_mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileTokenAccess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.FileTokenAccess) */ {
 public:
  FileTokenAccess();
  virtual ~FileTokenAccess();

  FileTokenAccess(const FileTokenAccess& from);

  inline FileTokenAccess& operator=(const FileTokenAccess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileTokenAccess(FileTokenAccess&& from) noexcept
    : FileTokenAccess() {
    *this = ::std::move(from);
  }

  inline FileTokenAccess& operator=(FileTokenAccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileTokenAccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileTokenAccess* internal_default_instance() {
    return reinterpret_cast<const FileTokenAccess*>(
               &_FileTokenAccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FileTokenAccess* other);
  friend void swap(FileTokenAccess& a, FileTokenAccess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileTokenAccess* New() const final {
    return CreateMaybeMessage<FileTokenAccess>(NULL);
  }

  FileTokenAccess* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileTokenAccess>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileTokenAccess& from);
  void MergeFrom(const FileTokenAccess& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileTokenAccess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes access_token = 1;
  void clear_access_token();
  static const int kAccessTokenFieldNumber = 1;
  const ::std::string& access_token() const;
  void set_access_token(const ::std::string& value);
  #if LANG_CXX11
  void set_access_token(::std::string&& value);
  #endif
  void set_access_token(const char* value);
  void set_access_token(const void* value, size_t size);
  ::std::string* mutable_access_token();
  ::std::string* release_access_token();
  void set_allocated_access_token(::std::string* access_token);

  // @@protoc_insertion_point(class_scope:e8.FileTokenAccess)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr access_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileDirectAccess : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.FileDirectAccess) */ {
 public:
  FileDirectAccess();
  virtual ~FileDirectAccess();

  FileDirectAccess(const FileDirectAccess& from);

  inline FileDirectAccess& operator=(const FileDirectAccess& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileDirectAccess(FileDirectAccess&& from) noexcept
    : FileDirectAccess() {
    *this = ::std::move(from);
  }

  inline FileDirectAccess& operator=(FileDirectAccess&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileDirectAccess& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileDirectAccess* internal_default_instance() {
    return reinterpret_cast<const FileDirectAccess*>(
               &_FileDirectAccess_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(FileDirectAccess* other);
  friend void swap(FileDirectAccess& a, FileDirectAccess& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileDirectAccess* New() const final {
    return CreateMaybeMessage<FileDirectAccess>(NULL);
  }

  FileDirectAccess* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileDirectAccess>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileDirectAccess& from);
  void MergeFrom(const FileDirectAccess& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDirectAccess* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 2;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // .e8.FileAccessMode access_mode = 3;
  void clear_access_mode();
  static const int kAccessModeFieldNumber = 3;
  ::e8::FileAccessMode access_mode() const;
  void set_access_mode(::e8::FileAccessMode value);

  // @@protoc_insertion_point(class_scope:e8.FileDirectAccess)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  int access_mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_file_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FileDescriptor : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.FileDescriptor) */ {
 public:
  FileDescriptor();
  virtual ~FileDescriptor();

  FileDescriptor(const FileDescriptor& from);

  inline FileDescriptor& operator=(const FileDescriptor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FileDescriptor(FileDescriptor&& from) noexcept
    : FileDescriptor() {
    *this = ::std::move(from);
  }

  inline FileDescriptor& operator=(FileDescriptor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const FileDescriptor& default_instance();

  enum AccessMethodCase {
    kFileTokenAccess = 1,
    kFileDirectAccess = 2,
    ACCESSMETHOD_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FileDescriptor* internal_default_instance() {
    return reinterpret_cast<const FileDescriptor*>(
               &_FileDescriptor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(FileDescriptor* other);
  friend void swap(FileDescriptor& a, FileDescriptor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FileDescriptor* New() const final {
    return CreateMaybeMessage<FileDescriptor>(NULL);
  }

  FileDescriptor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FileDescriptor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FileDescriptor& from);
  void MergeFrom(const FileDescriptor& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FileDescriptor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string file_name = 3;
  void clear_file_name();
  static const int kFileNameFieldNumber = 3;
  const ::std::string& file_name() const;
  void set_file_name(const ::std::string& value);
  #if LANG_CXX11
  void set_file_name(::std::string&& value);
  #endif
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  ::std::string* mutable_file_name();
  ::std::string* release_file_name();
  void set_allocated_file_name(::std::string* file_name);

  // .e8.FileFormat file_format = 4;
  void clear_file_format();
  static const int kFileFormatFieldNumber = 4;
  ::e8::FileFormat file_format() const;
  void set_file_format(::e8::FileFormat value);

  // .e8.EncryptionSource encryption_source = 5;
  void clear_encryption_source();
  static const int kEncryptionSourceFieldNumber = 5;
  ::e8::EncryptionSource encryption_source() const;
  void set_encryption_source(::e8::EncryptionSource value);

  // int64 storage_size = 6;
  void clear_storage_size();
  static const int kStorageSizeFieldNumber = 6;
  ::google::protobuf::int64 storage_size() const;
  void set_storage_size(::google::protobuf::int64 value);

  // int64 created_at_timestamp = 7;
  void clear_created_at_timestamp();
  static const int kCreatedAtTimestampFieldNumber = 7;
  ::google::protobuf::int64 created_at_timestamp() const;
  void set_created_at_timestamp(::google::protobuf::int64 value);

  // int64 last_modified_at_timestamp = 8;
  void clear_last_modified_at_timestamp();
  static const int kLastModifiedAtTimestampFieldNumber = 8;
  ::google::protobuf::int64 last_modified_at_timestamp() const;
  void set_last_modified_at_timestamp(::google::protobuf::int64 value);

  // .e8.FileTokenAccess file_token_access = 1;
  bool has_file_token_access() const;
  void clear_file_token_access();
  static const int kFileTokenAccessFieldNumber = 1;
  private:
  const ::e8::FileTokenAccess& _internal_file_token_access() const;
  public:
  const ::e8::FileTokenAccess& file_token_access() const;
  ::e8::FileTokenAccess* release_file_token_access();
  ::e8::FileTokenAccess* mutable_file_token_access();
  void set_allocated_file_token_access(::e8::FileTokenAccess* file_token_access);

  // .e8.FileDirectAccess file_direct_access = 2;
  bool has_file_direct_access() const;
  void clear_file_direct_access();
  static const int kFileDirectAccessFieldNumber = 2;
  private:
  const ::e8::FileDirectAccess& _internal_file_direct_access() const;
  public:
  const ::e8::FileDirectAccess& file_direct_access() const;
  ::e8::FileDirectAccess* release_file_direct_access();
  ::e8::FileDirectAccess* mutable_file_direct_access();
  void set_allocated_file_direct_access(::e8::FileDirectAccess* file_direct_access);

  void clear_AccessMethod();
  AccessMethodCase AccessMethod_case() const;
  // @@protoc_insertion_point(class_scope:e8.FileDescriptor)
 private:
  void set_has_file_token_access();
  void set_has_file_direct_access();

  inline bool has_AccessMethod() const;
  inline void clear_has_AccessMethod();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr file_name_;
  int file_format_;
  int encryption_source_;
  ::google::protobuf::int64 storage_size_;
  ::google::protobuf::int64 created_at_timestamp_;
  ::google::protobuf::int64 last_modified_at_timestamp_;
  union AccessMethodUnion {
    AccessMethodUnion() {}
    ::e8::FileTokenAccess* file_token_access_;
    ::e8::FileDirectAccess* file_direct_access_;
  } AccessMethod_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_file_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FileChunk

// int32 chunk_number = 1;
inline void FileChunk::clear_chunk_number() {
  chunk_number_ = 0;
}
inline ::google::protobuf::int32 FileChunk::chunk_number() const {
  // @@protoc_insertion_point(field_get:e8.FileChunk.chunk_number)
  return chunk_number_;
}
inline void FileChunk::set_chunk_number(::google::protobuf::int32 value) {
  
  chunk_number_ = value;
  // @@protoc_insertion_point(field_set:e8.FileChunk.chunk_number)
}

// bytes data = 2;
inline void FileChunk::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileChunk::data() const {
  // @@protoc_insertion_point(field_get:e8.FileChunk.data)
  return data_.GetNoArena();
}
inline void FileChunk::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:e8.FileChunk.data)
}
#if LANG_CXX11
inline void FileChunk::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:e8.FileChunk.data)
}
#endif
inline void FileChunk::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:e8.FileChunk.data)
}
inline void FileChunk::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:e8.FileChunk.data)
}
inline ::std::string* FileChunk::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:e8.FileChunk.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileChunk::release_data() {
  // @@protoc_insertion_point(field_release:e8.FileChunk.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileChunk::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:e8.FileChunk.data)
}

// -------------------------------------------------------------------

// SignableFileAccess

// int64 expiry_timestamp = 1;
inline void SignableFileAccess::clear_expiry_timestamp() {
  expiry_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SignableFileAccess::expiry_timestamp() const {
  // @@protoc_insertion_point(field_get:e8.SignableFileAccess.expiry_timestamp)
  return expiry_timestamp_;
}
inline void SignableFileAccess::set_expiry_timestamp(::google::protobuf::int64 value) {
  
  expiry_timestamp_ = value;
  // @@protoc_insertion_point(field_set:e8.SignableFileAccess.expiry_timestamp)
}

// int64 viewer_id = 2;
inline void SignableFileAccess::clear_viewer_id() {
  viewer_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 SignableFileAccess::viewer_id() const {
  // @@protoc_insertion_point(field_get:e8.SignableFileAccess.viewer_id)
  return viewer_id_;
}
inline void SignableFileAccess::set_viewer_id(::google::protobuf::int64 value) {
  
  viewer_id_ = value;
  // @@protoc_insertion_point(field_set:e8.SignableFileAccess.viewer_id)
}

// string file_path = 3;
inline void SignableFileAccess::clear_file_path() {
  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SignableFileAccess::file_path() const {
  // @@protoc_insertion_point(field_get:e8.SignableFileAccess.file_path)
  return file_path_.GetNoArena();
}
inline void SignableFileAccess::set_file_path(const ::std::string& value) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:e8.SignableFileAccess.file_path)
}
#if LANG_CXX11
inline void SignableFileAccess::set_file_path(::std::string&& value) {
  
  file_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:e8.SignableFileAccess.file_path)
}
#endif
inline void SignableFileAccess::set_file_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:e8.SignableFileAccess.file_path)
}
inline void SignableFileAccess::set_file_path(const char* value, size_t size) {
  
  file_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:e8.SignableFileAccess.file_path)
}
inline ::std::string* SignableFileAccess::mutable_file_path() {
  
  // @@protoc_insertion_point(field_mutable:e8.SignableFileAccess.file_path)
  return file_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SignableFileAccess::release_file_path() {
  // @@protoc_insertion_point(field_release:e8.SignableFileAccess.file_path)
  
  return file_path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SignableFileAccess::set_allocated_file_path(::std::string* file_path) {
  if (file_path != NULL) {
    
  } else {
    
  }
  file_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_path);
  // @@protoc_insertion_point(field_set_allocated:e8.SignableFileAccess.file_path)
}

// .e8.FileAccessMode access_mode = 4;
inline void SignableFileAccess::clear_access_mode() {
  access_mode_ = 0;
}
inline ::e8::FileAccessMode SignableFileAccess::access_mode() const {
  // @@protoc_insertion_point(field_get:e8.SignableFileAccess.access_mode)
  return static_cast< ::e8::FileAccessMode >(access_mode_);
}
inline void SignableFileAccess::set_access_mode(::e8::FileAccessMode value) {
  
  access_mode_ = value;
  // @@protoc_insertion_point(field_set:e8.SignableFileAccess.access_mode)
}

// -------------------------------------------------------------------

// FileTokenAccess

// bytes access_token = 1;
inline void FileTokenAccess::clear_access_token() {
  access_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileTokenAccess::access_token() const {
  // @@protoc_insertion_point(field_get:e8.FileTokenAccess.access_token)
  return access_token_.GetNoArena();
}
inline void FileTokenAccess::set_access_token(const ::std::string& value) {
  
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:e8.FileTokenAccess.access_token)
}
#if LANG_CXX11
inline void FileTokenAccess::set_access_token(::std::string&& value) {
  
  access_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:e8.FileTokenAccess.access_token)
}
#endif
inline void FileTokenAccess::set_access_token(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:e8.FileTokenAccess.access_token)
}
inline void FileTokenAccess::set_access_token(const void* value, size_t size) {
  
  access_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:e8.FileTokenAccess.access_token)
}
inline ::std::string* FileTokenAccess::mutable_access_token() {
  
  // @@protoc_insertion_point(field_mutable:e8.FileTokenAccess.access_token)
  return access_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileTokenAccess::release_access_token() {
  // @@protoc_insertion_point(field_release:e8.FileTokenAccess.access_token)
  
  return access_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileTokenAccess::set_allocated_access_token(::std::string* access_token) {
  if (access_token != NULL) {
    
  } else {
    
  }
  access_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), access_token);
  // @@protoc_insertion_point(field_set_allocated:e8.FileTokenAccess.access_token)
}

// -------------------------------------------------------------------

// FileDirectAccess

// string path = 2;
inline void FileDirectAccess::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileDirectAccess::path() const {
  // @@protoc_insertion_point(field_get:e8.FileDirectAccess.path)
  return path_.GetNoArena();
}
inline void FileDirectAccess::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:e8.FileDirectAccess.path)
}
#if LANG_CXX11
inline void FileDirectAccess::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:e8.FileDirectAccess.path)
}
#endif
inline void FileDirectAccess::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:e8.FileDirectAccess.path)
}
inline void FileDirectAccess::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:e8.FileDirectAccess.path)
}
inline ::std::string* FileDirectAccess::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:e8.FileDirectAccess.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileDirectAccess::release_path() {
  // @@protoc_insertion_point(field_release:e8.FileDirectAccess.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileDirectAccess::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:e8.FileDirectAccess.path)
}

// .e8.FileAccessMode access_mode = 3;
inline void FileDirectAccess::clear_access_mode() {
  access_mode_ = 0;
}
inline ::e8::FileAccessMode FileDirectAccess::access_mode() const {
  // @@protoc_insertion_point(field_get:e8.FileDirectAccess.access_mode)
  return static_cast< ::e8::FileAccessMode >(access_mode_);
}
inline void FileDirectAccess::set_access_mode(::e8::FileAccessMode value) {
  
  access_mode_ = value;
  // @@protoc_insertion_point(field_set:e8.FileDirectAccess.access_mode)
}

// -------------------------------------------------------------------

// FileDescriptor

// .e8.FileTokenAccess file_token_access = 1;
inline bool FileDescriptor::has_file_token_access() const {
  return AccessMethod_case() == kFileTokenAccess;
}
inline void FileDescriptor::set_has_file_token_access() {
  _oneof_case_[0] = kFileTokenAccess;
}
inline void FileDescriptor::clear_file_token_access() {
  if (has_file_token_access()) {
    delete AccessMethod_.file_token_access_;
    clear_has_AccessMethod();
  }
}
inline const ::e8::FileTokenAccess& FileDescriptor::_internal_file_token_access() const {
  return *AccessMethod_.file_token_access_;
}
inline ::e8::FileTokenAccess* FileDescriptor::release_file_token_access() {
  // @@protoc_insertion_point(field_release:e8.FileDescriptor.file_token_access)
  if (has_file_token_access()) {
    clear_has_AccessMethod();
      ::e8::FileTokenAccess* temp = AccessMethod_.file_token_access_;
    AccessMethod_.file_token_access_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::e8::FileTokenAccess& FileDescriptor::file_token_access() const {
  // @@protoc_insertion_point(field_get:e8.FileDescriptor.file_token_access)
  return has_file_token_access()
      ? *AccessMethod_.file_token_access_
      : *reinterpret_cast< ::e8::FileTokenAccess*>(&::e8::_FileTokenAccess_default_instance_);
}
inline ::e8::FileTokenAccess* FileDescriptor::mutable_file_token_access() {
  if (!has_file_token_access()) {
    clear_AccessMethod();
    set_has_file_token_access();
    AccessMethod_.file_token_access_ = CreateMaybeMessage< ::e8::FileTokenAccess >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:e8.FileDescriptor.file_token_access)
  return AccessMethod_.file_token_access_;
}

// .e8.FileDirectAccess file_direct_access = 2;
inline bool FileDescriptor::has_file_direct_access() const {
  return AccessMethod_case() == kFileDirectAccess;
}
inline void FileDescriptor::set_has_file_direct_access() {
  _oneof_case_[0] = kFileDirectAccess;
}
inline void FileDescriptor::clear_file_direct_access() {
  if (has_file_direct_access()) {
    delete AccessMethod_.file_direct_access_;
    clear_has_AccessMethod();
  }
}
inline const ::e8::FileDirectAccess& FileDescriptor::_internal_file_direct_access() const {
  return *AccessMethod_.file_direct_access_;
}
inline ::e8::FileDirectAccess* FileDescriptor::release_file_direct_access() {
  // @@protoc_insertion_point(field_release:e8.FileDescriptor.file_direct_access)
  if (has_file_direct_access()) {
    clear_has_AccessMethod();
      ::e8::FileDirectAccess* temp = AccessMethod_.file_direct_access_;
    AccessMethod_.file_direct_access_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::e8::FileDirectAccess& FileDescriptor::file_direct_access() const {
  // @@protoc_insertion_point(field_get:e8.FileDescriptor.file_direct_access)
  return has_file_direct_access()
      ? *AccessMethod_.file_direct_access_
      : *reinterpret_cast< ::e8::FileDirectAccess*>(&::e8::_FileDirectAccess_default_instance_);
}
inline ::e8::FileDirectAccess* FileDescriptor::mutable_file_direct_access() {
  if (!has_file_direct_access()) {
    clear_AccessMethod();
    set_has_file_direct_access();
    AccessMethod_.file_direct_access_ = CreateMaybeMessage< ::e8::FileDirectAccess >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:e8.FileDescriptor.file_direct_access)
  return AccessMethod_.file_direct_access_;
}

// string file_name = 3;
inline void FileDescriptor::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& FileDescriptor::file_name() const {
  // @@protoc_insertion_point(field_get:e8.FileDescriptor.file_name)
  return file_name_.GetNoArena();
}
inline void FileDescriptor::set_file_name(const ::std::string& value) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:e8.FileDescriptor.file_name)
}
#if LANG_CXX11
inline void FileDescriptor::set_file_name(::std::string&& value) {
  
  file_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:e8.FileDescriptor.file_name)
}
#endif
inline void FileDescriptor::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:e8.FileDescriptor.file_name)
}
inline void FileDescriptor::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:e8.FileDescriptor.file_name)
}
inline ::std::string* FileDescriptor::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:e8.FileDescriptor.file_name)
  return file_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FileDescriptor::release_file_name() {
  // @@protoc_insertion_point(field_release:e8.FileDescriptor.file_name)
  
  return file_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FileDescriptor::set_allocated_file_name(::std::string* file_name) {
  if (file_name != NULL) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:e8.FileDescriptor.file_name)
}

// .e8.FileFormat file_format = 4;
inline void FileDescriptor::clear_file_format() {
  file_format_ = 0;
}
inline ::e8::FileFormat FileDescriptor::file_format() const {
  // @@protoc_insertion_point(field_get:e8.FileDescriptor.file_format)
  return static_cast< ::e8::FileFormat >(file_format_);
}
inline void FileDescriptor::set_file_format(::e8::FileFormat value) {
  
  file_format_ = value;
  // @@protoc_insertion_point(field_set:e8.FileDescriptor.file_format)
}

// .e8.EncryptionSource encryption_source = 5;
inline void FileDescriptor::clear_encryption_source() {
  encryption_source_ = 0;
}
inline ::e8::EncryptionSource FileDescriptor::encryption_source() const {
  // @@protoc_insertion_point(field_get:e8.FileDescriptor.encryption_source)
  return static_cast< ::e8::EncryptionSource >(encryption_source_);
}
inline void FileDescriptor::set_encryption_source(::e8::EncryptionSource value) {
  
  encryption_source_ = value;
  // @@protoc_insertion_point(field_set:e8.FileDescriptor.encryption_source)
}

// int64 storage_size = 6;
inline void FileDescriptor::clear_storage_size() {
  storage_size_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileDescriptor::storage_size() const {
  // @@protoc_insertion_point(field_get:e8.FileDescriptor.storage_size)
  return storage_size_;
}
inline void FileDescriptor::set_storage_size(::google::protobuf::int64 value) {
  
  storage_size_ = value;
  // @@protoc_insertion_point(field_set:e8.FileDescriptor.storage_size)
}

// int64 created_at_timestamp = 7;
inline void FileDescriptor::clear_created_at_timestamp() {
  created_at_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileDescriptor::created_at_timestamp() const {
  // @@protoc_insertion_point(field_get:e8.FileDescriptor.created_at_timestamp)
  return created_at_timestamp_;
}
inline void FileDescriptor::set_created_at_timestamp(::google::protobuf::int64 value) {
  
  created_at_timestamp_ = value;
  // @@protoc_insertion_point(field_set:e8.FileDescriptor.created_at_timestamp)
}

// int64 last_modified_at_timestamp = 8;
inline void FileDescriptor::clear_last_modified_at_timestamp() {
  last_modified_at_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 FileDescriptor::last_modified_at_timestamp() const {
  // @@protoc_insertion_point(field_get:e8.FileDescriptor.last_modified_at_timestamp)
  return last_modified_at_timestamp_;
}
inline void FileDescriptor::set_last_modified_at_timestamp(::google::protobuf::int64 value) {
  
  last_modified_at_timestamp_ = value;
  // @@protoc_insertion_point(field_set:e8.FileDescriptor.last_modified_at_timestamp)
}

inline bool FileDescriptor::has_AccessMethod() const {
  return AccessMethod_case() != ACCESSMETHOD_NOT_SET;
}
inline void FileDescriptor::clear_has_AccessMethod() {
  _oneof_case_[0] = ACCESSMETHOD_NOT_SET;
}
inline FileDescriptor::AccessMethodCase FileDescriptor::AccessMethod_case() const {
  return FileDescriptor::AccessMethodCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace e8

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::e8::FileFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e8::FileFormat>() {
  return ::e8::FileFormat_descriptor();
}
template <> struct is_proto_enum< ::e8::FileAccessMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::e8::FileAccessMode>() {
  return ::e8::FileAccessMode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_file_2eproto
