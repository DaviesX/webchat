// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: service_file.proto

#ifndef PROTOBUF_INCLUDED_service_5ffile_2eproto
#define PROTOBUF_INCLUDED_service_5ffile_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "file.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_service_5ffile_2eproto 

namespace protobuf_service_5ffile_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_service_5ffile_2eproto
namespace e8 {
class DownloadFileRequest;
class DownloadFileRequestDefaultTypeInternal;
extern DownloadFileRequestDefaultTypeInternal _DownloadFileRequest_default_instance_;
class DownloadFileResponse;
class DownloadFileResponseDefaultTypeInternal;
extern DownloadFileResponseDefaultTypeInternal _DownloadFileResponse_default_instance_;
class UploadFileRequest;
class UploadFileRequestDefaultTypeInternal;
extern UploadFileRequestDefaultTypeInternal _UploadFileRequest_default_instance_;
class UploadFileResponse;
class UploadFileResponseDefaultTypeInternal;
extern UploadFileResponseDefaultTypeInternal _UploadFileResponse_default_instance_;
}  // namespace e8
namespace google {
namespace protobuf {
template<> ::e8::DownloadFileRequest* Arena::CreateMaybeMessage<::e8::DownloadFileRequest>(Arena*);
template<> ::e8::DownloadFileResponse* Arena::CreateMaybeMessage<::e8::DownloadFileResponse>(Arena*);
template<> ::e8::UploadFileRequest* Arena::CreateMaybeMessage<::e8::UploadFileRequest>(Arena*);
template<> ::e8::UploadFileResponse* Arena::CreateMaybeMessage<::e8::UploadFileResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace e8 {

// ===================================================================

class UploadFileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.UploadFileRequest) */ {
 public:
  UploadFileRequest();
  virtual ~UploadFileRequest();

  UploadFileRequest(const UploadFileRequest& from);

  inline UploadFileRequest& operator=(const UploadFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UploadFileRequest(UploadFileRequest&& from) noexcept
    : UploadFileRequest() {
    *this = ::std::move(from);
  }

  inline UploadFileRequest& operator=(UploadFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadFileRequest* internal_default_instance() {
    return reinterpret_cast<const UploadFileRequest*>(
               &_UploadFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(UploadFileRequest* other);
  friend void swap(UploadFileRequest& a, UploadFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UploadFileRequest* New() const final {
    return CreateMaybeMessage<UploadFileRequest>(NULL);
  }

  UploadFileRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UploadFileRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UploadFileRequest& from);
  void MergeFrom(const UploadFileRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .e8.FileDescriptor file_descriptor = 1;
  bool has_file_descriptor() const;
  void clear_file_descriptor();
  static const int kFileDescriptorFieldNumber = 1;
  private:
  const ::e8::FileDescriptor& _internal_file_descriptor() const;
  public:
  const ::e8::FileDescriptor& file_descriptor() const;
  ::e8::FileDescriptor* release_file_descriptor();
  ::e8::FileDescriptor* mutable_file_descriptor();
  void set_allocated_file_descriptor(::e8::FileDescriptor* file_descriptor);

  // .e8.FileChunk current_chunk = 2;
  bool has_current_chunk() const;
  void clear_current_chunk();
  static const int kCurrentChunkFieldNumber = 2;
  private:
  const ::e8::FileChunk& _internal_current_chunk() const;
  public:
  const ::e8::FileChunk& current_chunk() const;
  ::e8::FileChunk* release_current_chunk();
  ::e8::FileChunk* mutable_current_chunk();
  void set_allocated_current_chunk(::e8::FileChunk* current_chunk);

  // @@protoc_insertion_point(class_scope:e8.UploadFileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::e8::FileDescriptor* file_descriptor_;
  ::e8::FileChunk* current_chunk_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_5ffile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UploadFileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.UploadFileResponse) */ {
 public:
  UploadFileResponse();
  virtual ~UploadFileResponse();

  UploadFileResponse(const UploadFileResponse& from);

  inline UploadFileResponse& operator=(const UploadFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UploadFileResponse(UploadFileResponse&& from) noexcept
    : UploadFileResponse() {
    *this = ::std::move(from);
  }

  inline UploadFileResponse& operator=(UploadFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const UploadFileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UploadFileResponse* internal_default_instance() {
    return reinterpret_cast<const UploadFileResponse*>(
               &_UploadFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(UploadFileResponse* other);
  friend void swap(UploadFileResponse& a, UploadFileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UploadFileResponse* New() const final {
    return CreateMaybeMessage<UploadFileResponse>(NULL);
  }

  UploadFileResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UploadFileResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UploadFileResponse& from);
  void MergeFrom(const UploadFileResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadFileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:e8.UploadFileResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_5ffile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DownloadFileRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.DownloadFileRequest) */ {
 public:
  DownloadFileRequest();
  virtual ~DownloadFileRequest();

  DownloadFileRequest(const DownloadFileRequest& from);

  inline DownloadFileRequest& operator=(const DownloadFileRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DownloadFileRequest(DownloadFileRequest&& from) noexcept
    : DownloadFileRequest() {
    *this = ::std::move(from);
  }

  inline DownloadFileRequest& operator=(DownloadFileRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadFileRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadFileRequest* internal_default_instance() {
    return reinterpret_cast<const DownloadFileRequest*>(
               &_DownloadFileRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DownloadFileRequest* other);
  friend void swap(DownloadFileRequest& a, DownloadFileRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DownloadFileRequest* New() const final {
    return CreateMaybeMessage<DownloadFileRequest>(NULL);
  }

  DownloadFileRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DownloadFileRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DownloadFileRequest& from);
  void MergeFrom(const DownloadFileRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadFileRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .e8.FileDescriptor file_descriptor = 1;
  bool has_file_descriptor() const;
  void clear_file_descriptor();
  static const int kFileDescriptorFieldNumber = 1;
  private:
  const ::e8::FileDescriptor& _internal_file_descriptor() const;
  public:
  const ::e8::FileDescriptor& file_descriptor() const;
  ::e8::FileDescriptor* release_file_descriptor();
  ::e8::FileDescriptor* mutable_file_descriptor();
  void set_allocated_file_descriptor(::e8::FileDescriptor* file_descriptor);

  // @@protoc_insertion_point(class_scope:e8.DownloadFileRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::e8::FileDescriptor* file_descriptor_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_5ffile_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DownloadFileResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.DownloadFileResponse) */ {
 public:
  DownloadFileResponse();
  virtual ~DownloadFileResponse();

  DownloadFileResponse(const DownloadFileResponse& from);

  inline DownloadFileResponse& operator=(const DownloadFileResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DownloadFileResponse(DownloadFileResponse&& from) noexcept
    : DownloadFileResponse() {
    *this = ::std::move(from);
  }

  inline DownloadFileResponse& operator=(DownloadFileResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const DownloadFileResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DownloadFileResponse* internal_default_instance() {
    return reinterpret_cast<const DownloadFileResponse*>(
               &_DownloadFileResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DownloadFileResponse* other);
  friend void swap(DownloadFileResponse& a, DownloadFileResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DownloadFileResponse* New() const final {
    return CreateMaybeMessage<DownloadFileResponse>(NULL);
  }

  DownloadFileResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DownloadFileResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DownloadFileResponse& from);
  void MergeFrom(const DownloadFileResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DownloadFileResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .e8.FileDescriptor file_descriptor = 1;
  bool has_file_descriptor() const;
  void clear_file_descriptor();
  static const int kFileDescriptorFieldNumber = 1;
  private:
  const ::e8::FileDescriptor& _internal_file_descriptor() const;
  public:
  const ::e8::FileDescriptor& file_descriptor() const;
  ::e8::FileDescriptor* release_file_descriptor();
  ::e8::FileDescriptor* mutable_file_descriptor();
  void set_allocated_file_descriptor(::e8::FileDescriptor* file_descriptor);

  // .e8.FileChunk current_chunk = 2;
  bool has_current_chunk() const;
  void clear_current_chunk();
  static const int kCurrentChunkFieldNumber = 2;
  private:
  const ::e8::FileChunk& _internal_current_chunk() const;
  public:
  const ::e8::FileChunk& current_chunk() const;
  ::e8::FileChunk* release_current_chunk();
  ::e8::FileChunk* mutable_current_chunk();
  void set_allocated_current_chunk(::e8::FileChunk* current_chunk);

  // @@protoc_insertion_point(class_scope:e8.DownloadFileResponse)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::e8::FileDescriptor* file_descriptor_;
  ::e8::FileChunk* current_chunk_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_service_5ffile_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UploadFileRequest

// .e8.FileDescriptor file_descriptor = 1;
inline bool UploadFileRequest::has_file_descriptor() const {
  return this != internal_default_instance() && file_descriptor_ != NULL;
}
inline const ::e8::FileDescriptor& UploadFileRequest::_internal_file_descriptor() const {
  return *file_descriptor_;
}
inline const ::e8::FileDescriptor& UploadFileRequest::file_descriptor() const {
  const ::e8::FileDescriptor* p = file_descriptor_;
  // @@protoc_insertion_point(field_get:e8.UploadFileRequest.file_descriptor)
  return p != NULL ? *p : *reinterpret_cast<const ::e8::FileDescriptor*>(
      &::e8::_FileDescriptor_default_instance_);
}
inline ::e8::FileDescriptor* UploadFileRequest::release_file_descriptor() {
  // @@protoc_insertion_point(field_release:e8.UploadFileRequest.file_descriptor)
  
  ::e8::FileDescriptor* temp = file_descriptor_;
  file_descriptor_ = NULL;
  return temp;
}
inline ::e8::FileDescriptor* UploadFileRequest::mutable_file_descriptor() {
  
  if (file_descriptor_ == NULL) {
    auto* p = CreateMaybeMessage<::e8::FileDescriptor>(GetArenaNoVirtual());
    file_descriptor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:e8.UploadFileRequest.file_descriptor)
  return file_descriptor_;
}
inline void UploadFileRequest::set_allocated_file_descriptor(::e8::FileDescriptor* file_descriptor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(file_descriptor_);
  }
  if (file_descriptor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_descriptor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  file_descriptor_ = file_descriptor;
  // @@protoc_insertion_point(field_set_allocated:e8.UploadFileRequest.file_descriptor)
}

// .e8.FileChunk current_chunk = 2;
inline bool UploadFileRequest::has_current_chunk() const {
  return this != internal_default_instance() && current_chunk_ != NULL;
}
inline const ::e8::FileChunk& UploadFileRequest::_internal_current_chunk() const {
  return *current_chunk_;
}
inline const ::e8::FileChunk& UploadFileRequest::current_chunk() const {
  const ::e8::FileChunk* p = current_chunk_;
  // @@protoc_insertion_point(field_get:e8.UploadFileRequest.current_chunk)
  return p != NULL ? *p : *reinterpret_cast<const ::e8::FileChunk*>(
      &::e8::_FileChunk_default_instance_);
}
inline ::e8::FileChunk* UploadFileRequest::release_current_chunk() {
  // @@protoc_insertion_point(field_release:e8.UploadFileRequest.current_chunk)
  
  ::e8::FileChunk* temp = current_chunk_;
  current_chunk_ = NULL;
  return temp;
}
inline ::e8::FileChunk* UploadFileRequest::mutable_current_chunk() {
  
  if (current_chunk_ == NULL) {
    auto* p = CreateMaybeMessage<::e8::FileChunk>(GetArenaNoVirtual());
    current_chunk_ = p;
  }
  // @@protoc_insertion_point(field_mutable:e8.UploadFileRequest.current_chunk)
  return current_chunk_;
}
inline void UploadFileRequest::set_allocated_current_chunk(::e8::FileChunk* current_chunk) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(current_chunk_);
  }
  if (current_chunk) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      current_chunk = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, current_chunk, submessage_arena);
    }
    
  } else {
    
  }
  current_chunk_ = current_chunk;
  // @@protoc_insertion_point(field_set_allocated:e8.UploadFileRequest.current_chunk)
}

// -------------------------------------------------------------------

// UploadFileResponse

// -------------------------------------------------------------------

// DownloadFileRequest

// .e8.FileDescriptor file_descriptor = 1;
inline bool DownloadFileRequest::has_file_descriptor() const {
  return this != internal_default_instance() && file_descriptor_ != NULL;
}
inline const ::e8::FileDescriptor& DownloadFileRequest::_internal_file_descriptor() const {
  return *file_descriptor_;
}
inline const ::e8::FileDescriptor& DownloadFileRequest::file_descriptor() const {
  const ::e8::FileDescriptor* p = file_descriptor_;
  // @@protoc_insertion_point(field_get:e8.DownloadFileRequest.file_descriptor)
  return p != NULL ? *p : *reinterpret_cast<const ::e8::FileDescriptor*>(
      &::e8::_FileDescriptor_default_instance_);
}
inline ::e8::FileDescriptor* DownloadFileRequest::release_file_descriptor() {
  // @@protoc_insertion_point(field_release:e8.DownloadFileRequest.file_descriptor)
  
  ::e8::FileDescriptor* temp = file_descriptor_;
  file_descriptor_ = NULL;
  return temp;
}
inline ::e8::FileDescriptor* DownloadFileRequest::mutable_file_descriptor() {
  
  if (file_descriptor_ == NULL) {
    auto* p = CreateMaybeMessage<::e8::FileDescriptor>(GetArenaNoVirtual());
    file_descriptor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:e8.DownloadFileRequest.file_descriptor)
  return file_descriptor_;
}
inline void DownloadFileRequest::set_allocated_file_descriptor(::e8::FileDescriptor* file_descriptor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(file_descriptor_);
  }
  if (file_descriptor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_descriptor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  file_descriptor_ = file_descriptor;
  // @@protoc_insertion_point(field_set_allocated:e8.DownloadFileRequest.file_descriptor)
}

// -------------------------------------------------------------------

// DownloadFileResponse

// .e8.FileDescriptor file_descriptor = 1;
inline bool DownloadFileResponse::has_file_descriptor() const {
  return this != internal_default_instance() && file_descriptor_ != NULL;
}
inline const ::e8::FileDescriptor& DownloadFileResponse::_internal_file_descriptor() const {
  return *file_descriptor_;
}
inline const ::e8::FileDescriptor& DownloadFileResponse::file_descriptor() const {
  const ::e8::FileDescriptor* p = file_descriptor_;
  // @@protoc_insertion_point(field_get:e8.DownloadFileResponse.file_descriptor)
  return p != NULL ? *p : *reinterpret_cast<const ::e8::FileDescriptor*>(
      &::e8::_FileDescriptor_default_instance_);
}
inline ::e8::FileDescriptor* DownloadFileResponse::release_file_descriptor() {
  // @@protoc_insertion_point(field_release:e8.DownloadFileResponse.file_descriptor)
  
  ::e8::FileDescriptor* temp = file_descriptor_;
  file_descriptor_ = NULL;
  return temp;
}
inline ::e8::FileDescriptor* DownloadFileResponse::mutable_file_descriptor() {
  
  if (file_descriptor_ == NULL) {
    auto* p = CreateMaybeMessage<::e8::FileDescriptor>(GetArenaNoVirtual());
    file_descriptor_ = p;
  }
  // @@protoc_insertion_point(field_mutable:e8.DownloadFileResponse.file_descriptor)
  return file_descriptor_;
}
inline void DownloadFileResponse::set_allocated_file_descriptor(::e8::FileDescriptor* file_descriptor) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(file_descriptor_);
  }
  if (file_descriptor) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_descriptor = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_descriptor, submessage_arena);
    }
    
  } else {
    
  }
  file_descriptor_ = file_descriptor;
  // @@protoc_insertion_point(field_set_allocated:e8.DownloadFileResponse.file_descriptor)
}

// .e8.FileChunk current_chunk = 2;
inline bool DownloadFileResponse::has_current_chunk() const {
  return this != internal_default_instance() && current_chunk_ != NULL;
}
inline const ::e8::FileChunk& DownloadFileResponse::_internal_current_chunk() const {
  return *current_chunk_;
}
inline const ::e8::FileChunk& DownloadFileResponse::current_chunk() const {
  const ::e8::FileChunk* p = current_chunk_;
  // @@protoc_insertion_point(field_get:e8.DownloadFileResponse.current_chunk)
  return p != NULL ? *p : *reinterpret_cast<const ::e8::FileChunk*>(
      &::e8::_FileChunk_default_instance_);
}
inline ::e8::FileChunk* DownloadFileResponse::release_current_chunk() {
  // @@protoc_insertion_point(field_release:e8.DownloadFileResponse.current_chunk)
  
  ::e8::FileChunk* temp = current_chunk_;
  current_chunk_ = NULL;
  return temp;
}
inline ::e8::FileChunk* DownloadFileResponse::mutable_current_chunk() {
  
  if (current_chunk_ == NULL) {
    auto* p = CreateMaybeMessage<::e8::FileChunk>(GetArenaNoVirtual());
    current_chunk_ = p;
  }
  // @@protoc_insertion_point(field_mutable:e8.DownloadFileResponse.current_chunk)
  return current_chunk_;
}
inline void DownloadFileResponse::set_allocated_current_chunk(::e8::FileChunk* current_chunk) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(current_chunk_);
  }
  if (current_chunk) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      current_chunk = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, current_chunk, submessage_arena);
    }
    
  } else {
    
  }
  current_chunk_ = current_chunk;
  // @@protoc_insertion_point(field_set_allocated:e8.DownloadFileResponse.current_chunk)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace e8

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_service_5ffile_2eproto
