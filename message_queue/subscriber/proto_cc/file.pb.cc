// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file.proto

#include "file.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_file_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileDirectAccess;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_file_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FileTokenAccess;
}  // namespace protobuf_file_2eproto
namespace e8 {
class FileChunkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileChunk>
      _instance;
} _FileChunk_default_instance_;
class SignableFileAccessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SignableFileAccess>
      _instance;
} _SignableFileAccess_default_instance_;
class FileTokenAccessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileTokenAccess>
      _instance;
} _FileTokenAccess_default_instance_;
class FileDirectAccessDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileDirectAccess>
      _instance;
} _FileDirectAccess_default_instance_;
class FileDescriptorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FileDescriptor>
      _instance;
  const ::e8::FileTokenAccess* file_token_access_;
  const ::e8::FileDirectAccess* file_direct_access_;
} _FileDescriptor_default_instance_;
}  // namespace e8
namespace protobuf_file_2eproto {
static void InitDefaultsFileChunk() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_FileChunk_default_instance_;
    new (ptr) ::e8::FileChunk();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::FileChunk::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileChunk =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileChunk}, {}};

static void InitDefaultsSignableFileAccess() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_SignableFileAccess_default_instance_;
    new (ptr) ::e8::SignableFileAccess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::SignableFileAccess::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SignableFileAccess =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSignableFileAccess}, {}};

static void InitDefaultsFileTokenAccess() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_FileTokenAccess_default_instance_;
    new (ptr) ::e8::FileTokenAccess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::FileTokenAccess::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileTokenAccess =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileTokenAccess}, {}};

static void InitDefaultsFileDirectAccess() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_FileDirectAccess_default_instance_;
    new (ptr) ::e8::FileDirectAccess();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::FileDirectAccess::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FileDirectAccess =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFileDirectAccess}, {}};

static void InitDefaultsFileDescriptor() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::e8::_FileDescriptor_default_instance_;
    new (ptr) ::e8::FileDescriptor();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::e8::FileDescriptor::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_FileDescriptor =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsFileDescriptor}, {
      &protobuf_file_2eproto::scc_info_FileTokenAccess.base,
      &protobuf_file_2eproto::scc_info_FileDirectAccess.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FileChunk.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SignableFileAccess.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileTokenAccess.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileDirectAccess.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FileDescriptor.base);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileChunk, chunk_number_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileChunk, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::SignableFileAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::SignableFileAccess, expiry_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::SignableFileAccess, viewer_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::SignableFileAccess, file_path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::SignableFileAccess, access_mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileTokenAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileTokenAccess, access_token_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileDirectAccess, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileDirectAccess, path_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileDirectAccess, access_mode_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileDescriptor, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileDescriptor, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::e8::FileDescriptorDefaultTypeInternal, file_token_access_),
  offsetof(::e8::FileDescriptorDefaultTypeInternal, file_direct_access_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileDescriptor, file_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileDescriptor, file_format_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileDescriptor, encryption_source_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileDescriptor, storage_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileDescriptor, created_at_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileDescriptor, last_modified_at_timestamp_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::e8::FileDescriptor, AccessMethod_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::e8::FileChunk)},
  { 7, -1, sizeof(::e8::SignableFileAccess)},
  { 16, -1, sizeof(::e8::FileTokenAccess)},
  { 22, -1, sizeof(::e8::FileDirectAccess)},
  { 29, -1, sizeof(::e8::FileDescriptor)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::e8::_FileChunk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::e8::_SignableFileAccess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::e8::_FileTokenAccess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::e8::_FileDirectAccess_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::e8::_FileDescriptor_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "file.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nfile.proto\022\002e8\032\027encryption_source.prot"
      "o\"/\n\tFileChunk\022\024\n\014chunk_number\030\001 \001(\005\022\014\n\004"
      "data\030\002 \001(\014\"}\n\022SignableFileAccess\022\030\n\020expi"
      "ry_timestamp\030\001 \001(\003\022\021\n\tviewer_id\030\002 \001(\003\022\021\n"
      "\tfile_path\030\003 \001(\t\022\'\n\013access_mode\030\004 \001(\0162\022."
      "e8.FileAccessMode\"\'\n\017FileTokenAccess\022\024\n\014"
      "access_token\030\001 \001(\014\"I\n\020FileDirectAccess\022\014"
      "\n\004path\030\002 \001(\t\022\'\n\013access_mode\030\003 \001(\0162\022.e8.F"
      "ileAccessMode\"\307\002\n\016FileDescriptor\0220\n\021file"
      "_token_access\030\001 \001(\0132\023.e8.FileTokenAccess"
      "H\000\0222\n\022file_direct_access\030\002 \001(\0132\024.e8.File"
      "DirectAccessH\000\022\021\n\tfile_name\030\003 \001(\t\022#\n\013fil"
      "e_format\030\004 \001(\0162\016.e8.FileFormat\022/\n\021encryp"
      "tion_source\030\005 \001(\0162\024.e8.EncryptionSource\022"
      "\024\n\014storage_size\030\006 \001(\003\022\034\n\024created_at_time"
      "stamp\030\007 \001(\003\022\"\n\032last_modified_at_timestam"
      "p\030\010 \001(\003B\016\n\014AccessMethod*\255\001\n\nFileFormat\022\020"
      "\n\014FFMT_UNKNOWN\020\000\022\023\n\017FFMT_IMAGE_JPEG\020\001\022\022\n"
      "\016FFMT_IMAGE_PNG\020\002\022\024\n\020FFMT_VIDEO_MPEG4\020\003\022"
      "\022\n\016FFMT_VIDEO_GIF\020\004\022\022\n\016FFMT_VIDEO_OGV\020\005\022"
      "\022\n\016FFMT_AUDIO_MP3\020\006\022\022\n\016FFMT_AUDIO_OGG\020\007*"
      "@\n\016FileAccessMode\022\014\n\010FAM_READ\020\000\022\r\n\tFAM_W"
      "RITE\020\001\022\021\n\rFAM_READWRITE\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 913);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "file.proto", &protobuf_RegisterTypes);
  ::protobuf_encryption_5fsource_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_file_2eproto
namespace e8 {
const ::google::protobuf::EnumDescriptor* FileFormat_descriptor() {
  protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_file_2eproto::file_level_enum_descriptors[0];
}
bool FileFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FileAccessMode_descriptor() {
  protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_file_2eproto::file_level_enum_descriptors[1];
}
bool FileAccessMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FileChunk::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileChunk::kChunkNumberFieldNumber;
const int FileChunk::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileChunk::FileChunk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_2eproto::scc_info_FileChunk.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:e8.FileChunk)
}
FileChunk::FileChunk(const FileChunk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  chunk_number_ = from.chunk_number_;
  // @@protoc_insertion_point(copy_constructor:e8.FileChunk)
}

void FileChunk::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_number_ = 0;
}

FileChunk::~FileChunk() {
  // @@protoc_insertion_point(destructor:e8.FileChunk)
  SharedDtor();
}

void FileChunk::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileChunk::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FileChunk::descriptor() {
  ::protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileChunk& FileChunk::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_2eproto::scc_info_FileChunk.base);
  return *internal_default_instance();
}


void FileChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.FileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  chunk_number_ = 0;
  _internal_metadata_.Clear();
}

bool FileChunk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:e8.FileChunk)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 chunk_number = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chunk_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:e8.FileChunk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:e8.FileChunk)
  return false;
#undef DO_
}

void FileChunk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:e8.FileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chunk_number = 1;
  if (this->chunk_number() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->chunk_number(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:e8.FileChunk)
}

::google::protobuf::uint8* FileChunk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:e8.FileChunk)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 chunk_number = 1;
  if (this->chunk_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->chunk_number(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.FileChunk)
  return target;
}

size_t FileChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.FileChunk)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 chunk_number = 1;
  if (this->chunk_number() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->chunk_number());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileChunk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.FileChunk)
  GOOGLE_DCHECK_NE(&from, this);
  const FileChunk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileChunk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.FileChunk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.FileChunk)
    MergeFrom(*source);
  }
}

void FileChunk::MergeFrom(const FileChunk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.FileChunk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.chunk_number() != 0) {
    set_chunk_number(from.chunk_number());
  }
}

void FileChunk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.FileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileChunk::CopyFrom(const FileChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.FileChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileChunk::IsInitialized() const {
  return true;
}

void FileChunk::Swap(FileChunk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileChunk::InternalSwap(FileChunk* other) {
  using std::swap;
  data_.Swap(&other->data_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(chunk_number_, other->chunk_number_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FileChunk::GetMetadata() const {
  protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SignableFileAccess::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SignableFileAccess::kExpiryTimestampFieldNumber;
const int SignableFileAccess::kViewerIdFieldNumber;
const int SignableFileAccess::kFilePathFieldNumber;
const int SignableFileAccess::kAccessModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SignableFileAccess::SignableFileAccess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_2eproto::scc_info_SignableFileAccess.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:e8.SignableFileAccess)
}
SignableFileAccess::SignableFileAccess(const SignableFileAccess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_path().size() > 0) {
    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  ::memcpy(&expiry_timestamp_, &from.expiry_timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&access_mode_) -
    reinterpret_cast<char*>(&expiry_timestamp_)) + sizeof(access_mode_));
  // @@protoc_insertion_point(copy_constructor:e8.SignableFileAccess)
}

void SignableFileAccess::SharedCtor() {
  file_path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&expiry_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&access_mode_) -
      reinterpret_cast<char*>(&expiry_timestamp_)) + sizeof(access_mode_));
}

SignableFileAccess::~SignableFileAccess() {
  // @@protoc_insertion_point(destructor:e8.SignableFileAccess)
  SharedDtor();
}

void SignableFileAccess::SharedDtor() {
  file_path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SignableFileAccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SignableFileAccess::descriptor() {
  ::protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SignableFileAccess& SignableFileAccess::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_2eproto::scc_info_SignableFileAccess.base);
  return *internal_default_instance();
}


void SignableFileAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.SignableFileAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&expiry_timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&access_mode_) -
      reinterpret_cast<char*>(&expiry_timestamp_)) + sizeof(access_mode_));
  _internal_metadata_.Clear();
}

bool SignableFileAccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:e8.SignableFileAccess)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 expiry_timestamp = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &expiry_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 viewer_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &viewer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_path = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_path().data(), static_cast<int>(this->file_path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "e8.SignableFileAccess.file_path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .e8.FileAccessMode access_mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_access_mode(static_cast< ::e8::FileAccessMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:e8.SignableFileAccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:e8.SignableFileAccess)
  return false;
#undef DO_
}

void SignableFileAccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:e8.SignableFileAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 expiry_timestamp = 1;
  if (this->expiry_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->expiry_timestamp(), output);
  }

  // int64 viewer_id = 2;
  if (this->viewer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->viewer_id(), output);
  }

  // string file_path = 3;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "e8.SignableFileAccess.file_path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_path(), output);
  }

  // .e8.FileAccessMode access_mode = 4;
  if (this->access_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->access_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:e8.SignableFileAccess)
}

::google::protobuf::uint8* SignableFileAccess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:e8.SignableFileAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 expiry_timestamp = 1;
  if (this->expiry_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->expiry_timestamp(), target);
  }

  // int64 viewer_id = 2;
  if (this->viewer_id() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->viewer_id(), target);
  }

  // string file_path = 3;
  if (this->file_path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_path().data(), static_cast<int>(this->file_path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "e8.SignableFileAccess.file_path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_path(), target);
  }

  // .e8.FileAccessMode access_mode = 4;
  if (this->access_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->access_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.SignableFileAccess)
  return target;
}

size_t SignableFileAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.SignableFileAccess)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file_path = 3;
  if (this->file_path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_path());
  }

  // int64 expiry_timestamp = 1;
  if (this->expiry_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->expiry_timestamp());
  }

  // int64 viewer_id = 2;
  if (this->viewer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->viewer_id());
  }

  // .e8.FileAccessMode access_mode = 4;
  if (this->access_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SignableFileAccess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.SignableFileAccess)
  GOOGLE_DCHECK_NE(&from, this);
  const SignableFileAccess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SignableFileAccess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.SignableFileAccess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.SignableFileAccess)
    MergeFrom(*source);
  }
}

void SignableFileAccess::MergeFrom(const SignableFileAccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.SignableFileAccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_path().size() > 0) {

    file_path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_path_);
  }
  if (from.expiry_timestamp() != 0) {
    set_expiry_timestamp(from.expiry_timestamp());
  }
  if (from.viewer_id() != 0) {
    set_viewer_id(from.viewer_id());
  }
  if (from.access_mode() != 0) {
    set_access_mode(from.access_mode());
  }
}

void SignableFileAccess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.SignableFileAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignableFileAccess::CopyFrom(const SignableFileAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.SignableFileAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignableFileAccess::IsInitialized() const {
  return true;
}

void SignableFileAccess::Swap(SignableFileAccess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SignableFileAccess::InternalSwap(SignableFileAccess* other) {
  using std::swap;
  file_path_.Swap(&other->file_path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(expiry_timestamp_, other->expiry_timestamp_);
  swap(viewer_id_, other->viewer_id_);
  swap(access_mode_, other->access_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SignableFileAccess::GetMetadata() const {
  protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FileTokenAccess::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileTokenAccess::kAccessTokenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileTokenAccess::FileTokenAccess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_2eproto::scc_info_FileTokenAccess.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:e8.FileTokenAccess)
}
FileTokenAccess::FileTokenAccess(const FileTokenAccess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  access_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.access_token().size() > 0) {
    access_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
  // @@protoc_insertion_point(copy_constructor:e8.FileTokenAccess)
}

void FileTokenAccess::SharedCtor() {
  access_token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

FileTokenAccess::~FileTokenAccess() {
  // @@protoc_insertion_point(destructor:e8.FileTokenAccess)
  SharedDtor();
}

void FileTokenAccess::SharedDtor() {
  access_token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileTokenAccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FileTokenAccess::descriptor() {
  ::protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileTokenAccess& FileTokenAccess::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_2eproto::scc_info_FileTokenAccess.base);
  return *internal_default_instance();
}


void FileTokenAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.FileTokenAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  access_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool FileTokenAccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:e8.FileTokenAccess)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes access_token = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_access_token()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:e8.FileTokenAccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:e8.FileTokenAccess)
  return false;
#undef DO_
}

void FileTokenAccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:e8.FileTokenAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes access_token = 1;
  if (this->access_token().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->access_token(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:e8.FileTokenAccess)
}

::google::protobuf::uint8* FileTokenAccess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:e8.FileTokenAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes access_token = 1;
  if (this->access_token().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->access_token(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.FileTokenAccess)
  return target;
}

size_t FileTokenAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.FileTokenAccess)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bytes access_token = 1;
  if (this->access_token().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->access_token());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileTokenAccess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.FileTokenAccess)
  GOOGLE_DCHECK_NE(&from, this);
  const FileTokenAccess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileTokenAccess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.FileTokenAccess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.FileTokenAccess)
    MergeFrom(*source);
  }
}

void FileTokenAccess::MergeFrom(const FileTokenAccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.FileTokenAccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.access_token().size() > 0) {

    access_token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.access_token_);
  }
}

void FileTokenAccess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.FileTokenAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileTokenAccess::CopyFrom(const FileTokenAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.FileTokenAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileTokenAccess::IsInitialized() const {
  return true;
}

void FileTokenAccess::Swap(FileTokenAccess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileTokenAccess::InternalSwap(FileTokenAccess* other) {
  using std::swap;
  access_token_.Swap(&other->access_token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FileTokenAccess::GetMetadata() const {
  protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FileDirectAccess::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileDirectAccess::kPathFieldNumber;
const int FileDirectAccess::kAccessModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileDirectAccess::FileDirectAccess()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_2eproto::scc_info_FileDirectAccess.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:e8.FileDirectAccess)
}
FileDirectAccess::FileDirectAccess(const FileDirectAccess& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  access_mode_ = from.access_mode_;
  // @@protoc_insertion_point(copy_constructor:e8.FileDirectAccess)
}

void FileDirectAccess::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_mode_ = 0;
}

FileDirectAccess::~FileDirectAccess() {
  // @@protoc_insertion_point(destructor:e8.FileDirectAccess)
  SharedDtor();
}

void FileDirectAccess::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileDirectAccess::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FileDirectAccess::descriptor() {
  ::protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileDirectAccess& FileDirectAccess::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_2eproto::scc_info_FileDirectAccess.base);
  return *internal_default_instance();
}


void FileDirectAccess::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.FileDirectAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  access_mode_ = 0;
  _internal_metadata_.Clear();
}

bool FileDirectAccess::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:e8.FileDirectAccess)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), static_cast<int>(this->path().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "e8.FileDirectAccess.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .e8.FileAccessMode access_mode = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_access_mode(static_cast< ::e8::FileAccessMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:e8.FileDirectAccess)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:e8.FileDirectAccess)
  return false;
#undef DO_
}

void FileDirectAccess::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:e8.FileDirectAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "e8.FileDirectAccess.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // .e8.FileAccessMode access_mode = 3;
  if (this->access_mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->access_mode(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:e8.FileDirectAccess)
}

::google::protobuf::uint8* FileDirectAccess::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:e8.FileDirectAccess)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), static_cast<int>(this->path().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "e8.FileDirectAccess.path");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->path(), target);
  }

  // .e8.FileAccessMode access_mode = 3;
  if (this->access_mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->access_mode(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.FileDirectAccess)
  return target;
}

size_t FileDirectAccess::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.FileDirectAccess)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // .e8.FileAccessMode access_mode = 3;
  if (this->access_mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->access_mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileDirectAccess::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.FileDirectAccess)
  GOOGLE_DCHECK_NE(&from, this);
  const FileDirectAccess* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileDirectAccess>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.FileDirectAccess)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.FileDirectAccess)
    MergeFrom(*source);
  }
}

void FileDirectAccess::MergeFrom(const FileDirectAccess& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.FileDirectAccess)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.access_mode() != 0) {
    set_access_mode(from.access_mode());
  }
}

void FileDirectAccess::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.FileDirectAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileDirectAccess::CopyFrom(const FileDirectAccess& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.FileDirectAccess)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileDirectAccess::IsInitialized() const {
  return true;
}

void FileDirectAccess::Swap(FileDirectAccess* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileDirectAccess::InternalSwap(FileDirectAccess* other) {
  using std::swap;
  path_.Swap(&other->path_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(access_mode_, other->access_mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FileDirectAccess::GetMetadata() const {
  protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FileDescriptor::InitAsDefaultInstance() {
  ::e8::_FileDescriptor_default_instance_.file_token_access_ = const_cast< ::e8::FileTokenAccess*>(
      ::e8::FileTokenAccess::internal_default_instance());
  ::e8::_FileDescriptor_default_instance_.file_direct_access_ = const_cast< ::e8::FileDirectAccess*>(
      ::e8::FileDirectAccess::internal_default_instance());
}
void FileDescriptor::set_allocated_file_token_access(::e8::FileTokenAccess* file_token_access) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_AccessMethod();
  if (file_token_access) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_token_access = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_token_access, submessage_arena);
    }
    set_has_file_token_access();
    AccessMethod_.file_token_access_ = file_token_access;
  }
  // @@protoc_insertion_point(field_set_allocated:e8.FileDescriptor.file_token_access)
}
void FileDescriptor::set_allocated_file_direct_access(::e8::FileDirectAccess* file_direct_access) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_AccessMethod();
  if (file_direct_access) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      file_direct_access = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, file_direct_access, submessage_arena);
    }
    set_has_file_direct_access();
    AccessMethod_.file_direct_access_ = file_direct_access;
  }
  // @@protoc_insertion_point(field_set_allocated:e8.FileDescriptor.file_direct_access)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileDescriptor::kFileTokenAccessFieldNumber;
const int FileDescriptor::kFileDirectAccessFieldNumber;
const int FileDescriptor::kFileNameFieldNumber;
const int FileDescriptor::kFileFormatFieldNumber;
const int FileDescriptor::kEncryptionSourceFieldNumber;
const int FileDescriptor::kStorageSizeFieldNumber;
const int FileDescriptor::kCreatedAtTimestampFieldNumber;
const int FileDescriptor::kLastModifiedAtTimestampFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileDescriptor::FileDescriptor()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_file_2eproto::scc_info_FileDescriptor.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:e8.FileDescriptor)
}
FileDescriptor::FileDescriptor(const FileDescriptor& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_name().size() > 0) {
    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&file_format_, &from.file_format_,
    static_cast<size_t>(reinterpret_cast<char*>(&last_modified_at_timestamp_) -
    reinterpret_cast<char*>(&file_format_)) + sizeof(last_modified_at_timestamp_));
  clear_has_AccessMethod();
  switch (from.AccessMethod_case()) {
    case kFileTokenAccess: {
      mutable_file_token_access()->::e8::FileTokenAccess::MergeFrom(from.file_token_access());
      break;
    }
    case kFileDirectAccess: {
      mutable_file_direct_access()->::e8::FileDirectAccess::MergeFrom(from.file_direct_access());
      break;
    }
    case ACCESSMETHOD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:e8.FileDescriptor)
}

void FileDescriptor::SharedCtor() {
  file_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_modified_at_timestamp_) -
      reinterpret_cast<char*>(&file_format_)) + sizeof(last_modified_at_timestamp_));
  clear_has_AccessMethod();
}

FileDescriptor::~FileDescriptor() {
  // @@protoc_insertion_point(destructor:e8.FileDescriptor)
  SharedDtor();
}

void FileDescriptor::SharedDtor() {
  file_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_AccessMethod()) {
    clear_AccessMethod();
  }
}

void FileDescriptor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FileDescriptor::descriptor() {
  ::protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FileDescriptor& FileDescriptor::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_file_2eproto::scc_info_FileDescriptor.base);
  return *internal_default_instance();
}


void FileDescriptor::clear_AccessMethod() {
// @@protoc_insertion_point(one_of_clear_start:e8.FileDescriptor)
  switch (AccessMethod_case()) {
    case kFileTokenAccess: {
      delete AccessMethod_.file_token_access_;
      break;
    }
    case kFileDirectAccess: {
      delete AccessMethod_.file_direct_access_;
      break;
    }
    case ACCESSMETHOD_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ACCESSMETHOD_NOT_SET;
}


void FileDescriptor::Clear() {
// @@protoc_insertion_point(message_clear_start:e8.FileDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&last_modified_at_timestamp_) -
      reinterpret_cast<char*>(&file_format_)) + sizeof(last_modified_at_timestamp_));
  clear_AccessMethod();
  _internal_metadata_.Clear();
}

bool FileDescriptor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:e8.FileDescriptor)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .e8.FileTokenAccess file_token_access = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_token_access()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .e8.FileDirectAccess file_direct_access = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_file_direct_access()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "e8.FileDescriptor.file_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .e8.FileFormat file_format = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_file_format(static_cast< ::e8::FileFormat >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .e8.EncryptionSource encryption_source = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encryption_source(static_cast< ::e8::EncryptionSource >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 storage_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &storage_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 created_at_timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &created_at_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 last_modified_at_timestamp = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &last_modified_at_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:e8.FileDescriptor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:e8.FileDescriptor)
  return false;
#undef DO_
}

void FileDescriptor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:e8.FileDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .e8.FileTokenAccess file_token_access = 1;
  if (has_file_token_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_file_token_access(), output);
  }

  // .e8.FileDirectAccess file_direct_access = 2;
  if (has_file_direct_access()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_file_direct_access(), output);
  }

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "e8.FileDescriptor.file_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->file_name(), output);
  }

  // .e8.FileFormat file_format = 4;
  if (this->file_format() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->file_format(), output);
  }

  // .e8.EncryptionSource encryption_source = 5;
  if (this->encryption_source() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->encryption_source(), output);
  }

  // int64 storage_size = 6;
  if (this->storage_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->storage_size(), output);
  }

  // int64 created_at_timestamp = 7;
  if (this->created_at_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->created_at_timestamp(), output);
  }

  // int64 last_modified_at_timestamp = 8;
  if (this->last_modified_at_timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->last_modified_at_timestamp(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:e8.FileDescriptor)
}

::google::protobuf::uint8* FileDescriptor::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:e8.FileDescriptor)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .e8.FileTokenAccess file_token_access = 1;
  if (has_file_token_access()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_file_token_access(), deterministic, target);
  }

  // .e8.FileDirectAccess file_direct_access = 2;
  if (has_file_direct_access()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_file_direct_access(), deterministic, target);
  }

  // string file_name = 3;
  if (this->file_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "e8.FileDescriptor.file_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->file_name(), target);
  }

  // .e8.FileFormat file_format = 4;
  if (this->file_format() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->file_format(), target);
  }

  // .e8.EncryptionSource encryption_source = 5;
  if (this->encryption_source() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->encryption_source(), target);
  }

  // int64 storage_size = 6;
  if (this->storage_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->storage_size(), target);
  }

  // int64 created_at_timestamp = 7;
  if (this->created_at_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->created_at_timestamp(), target);
  }

  // int64 last_modified_at_timestamp = 8;
  if (this->last_modified_at_timestamp() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->last_modified_at_timestamp(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:e8.FileDescriptor)
  return target;
}

size_t FileDescriptor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:e8.FileDescriptor)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string file_name = 3;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // .e8.FileFormat file_format = 4;
  if (this->file_format() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->file_format());
  }

  // .e8.EncryptionSource encryption_source = 5;
  if (this->encryption_source() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encryption_source());
  }

  // int64 storage_size = 6;
  if (this->storage_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->storage_size());
  }

  // int64 created_at_timestamp = 7;
  if (this->created_at_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->created_at_timestamp());
  }

  // int64 last_modified_at_timestamp = 8;
  if (this->last_modified_at_timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->last_modified_at_timestamp());
  }

  switch (AccessMethod_case()) {
    // .e8.FileTokenAccess file_token_access = 1;
    case kFileTokenAccess: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *AccessMethod_.file_token_access_);
      break;
    }
    // .e8.FileDirectAccess file_direct_access = 2;
    case kFileDirectAccess: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *AccessMethod_.file_direct_access_);
      break;
    }
    case ACCESSMETHOD_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FileDescriptor::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:e8.FileDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  const FileDescriptor* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FileDescriptor>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:e8.FileDescriptor)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:e8.FileDescriptor)
    MergeFrom(*source);
  }
}

void FileDescriptor::MergeFrom(const FileDescriptor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:e8.FileDescriptor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.file_format() != 0) {
    set_file_format(from.file_format());
  }
  if (from.encryption_source() != 0) {
    set_encryption_source(from.encryption_source());
  }
  if (from.storage_size() != 0) {
    set_storage_size(from.storage_size());
  }
  if (from.created_at_timestamp() != 0) {
    set_created_at_timestamp(from.created_at_timestamp());
  }
  if (from.last_modified_at_timestamp() != 0) {
    set_last_modified_at_timestamp(from.last_modified_at_timestamp());
  }
  switch (from.AccessMethod_case()) {
    case kFileTokenAccess: {
      mutable_file_token_access()->::e8::FileTokenAccess::MergeFrom(from.file_token_access());
      break;
    }
    case kFileDirectAccess: {
      mutable_file_direct_access()->::e8::FileDirectAccess::MergeFrom(from.file_direct_access());
      break;
    }
    case ACCESSMETHOD_NOT_SET: {
      break;
    }
  }
}

void FileDescriptor::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:e8.FileDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileDescriptor::CopyFrom(const FileDescriptor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:e8.FileDescriptor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileDescriptor::IsInitialized() const {
  return true;
}

void FileDescriptor::Swap(FileDescriptor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileDescriptor::InternalSwap(FileDescriptor* other) {
  using std::swap;
  file_name_.Swap(&other->file_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(file_format_, other->file_format_);
  swap(encryption_source_, other->encryption_source_);
  swap(storage_size_, other->storage_size_);
  swap(created_at_timestamp_, other->created_at_timestamp_);
  swap(last_modified_at_timestamp_, other->last_modified_at_timestamp_);
  swap(AccessMethod_, other->AccessMethod_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FileDescriptor::GetMetadata() const {
  protobuf_file_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_file_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace e8
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::e8::FileChunk* Arena::CreateMaybeMessage< ::e8::FileChunk >(Arena* arena) {
  return Arena::CreateInternal< ::e8::FileChunk >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::e8::SignableFileAccess* Arena::CreateMaybeMessage< ::e8::SignableFileAccess >(Arena* arena) {
  return Arena::CreateInternal< ::e8::SignableFileAccess >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::e8::FileTokenAccess* Arena::CreateMaybeMessage< ::e8::FileTokenAccess >(Arena* arena) {
  return Arena::CreateInternal< ::e8::FileTokenAccess >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::e8::FileDirectAccess* Arena::CreateMaybeMessage< ::e8::FileDirectAccess >(Arena* arena) {
  return Arena::CreateInternal< ::e8::FileDirectAccess >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::e8::FileDescriptor* Arena::CreateMaybeMessage< ::e8::FileDescriptor >(Arena* arena) {
  return Arena::CreateInternal< ::e8::FileDescriptor >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
