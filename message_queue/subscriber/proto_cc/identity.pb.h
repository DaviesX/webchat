// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: identity.proto

#ifndef PROTOBUF_INCLUDED_identity_2eproto
#define PROTOBUF_INCLUDED_identity_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_identity_2eproto 

namespace protobuf_identity_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_identity_2eproto
namespace e8 {
class Identity;
class IdentityDefaultTypeInternal;
extern IdentityDefaultTypeInternal _Identity_default_instance_;
class IdentitySignature;
class IdentitySignatureDefaultTypeInternal;
extern IdentitySignatureDefaultTypeInternal _IdentitySignature_default_instance_;
}  // namespace e8
namespace google {
namespace protobuf {
template<> ::e8::Identity* Arena::CreateMaybeMessage<::e8::Identity>(Arena*);
template<> ::e8::IdentitySignature* Arena::CreateMaybeMessage<::e8::IdentitySignature>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace e8 {

// ===================================================================

class Identity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.Identity) */ {
 public:
  Identity();
  virtual ~Identity();

  Identity(const Identity& from);

  inline Identity& operator=(const Identity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Identity(Identity&& from) noexcept
    : Identity() {
    *this = ::std::move(from);
  }

  inline Identity& operator=(Identity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Identity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Identity* internal_default_instance() {
    return reinterpret_cast<const Identity*>(
               &_Identity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Identity* other);
  friend void swap(Identity& a, Identity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Identity* New() const final {
    return CreateMaybeMessage<Identity>(NULL);
  }

  Identity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Identity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Identity& from);
  void MergeFrom(const Identity& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string group_names = 3;
  int group_names_size() const;
  void clear_group_names();
  static const int kGroupNamesFieldNumber = 3;
  const ::std::string& group_names(int index) const;
  ::std::string* mutable_group_names(int index);
  void set_group_names(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_group_names(int index, ::std::string&& value);
  #endif
  void set_group_names(int index, const char* value);
  void set_group_names(int index, const char* value, size_t size);
  ::std::string* add_group_names();
  void add_group_names(const ::std::string& value);
  #if LANG_CXX11
  void add_group_names(::std::string&& value);
  #endif
  void add_group_names(const char* value);
  void add_group_names(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& group_names() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_group_names();

  // int64 expiry_timestamp = 1;
  void clear_expiry_timestamp();
  static const int kExpiryTimestampFieldNumber = 1;
  ::google::protobuf::int64 expiry_timestamp() const;
  void set_expiry_timestamp(::google::protobuf::int64 value);

  // int64 user_id = 2;
  void clear_user_id();
  static const int kUserIdFieldNumber = 2;
  ::google::protobuf::int64 user_id() const;
  void set_user_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:e8.Identity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> group_names_;
  ::google::protobuf::int64 expiry_timestamp_;
  ::google::protobuf::int64 user_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_identity_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IdentitySignature : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.IdentitySignature) */ {
 public:
  IdentitySignature();
  virtual ~IdentitySignature();

  IdentitySignature(const IdentitySignature& from);

  inline IdentitySignature& operator=(const IdentitySignature& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IdentitySignature(IdentitySignature&& from) noexcept
    : IdentitySignature() {
    *this = ::std::move(from);
  }

  inline IdentitySignature& operator=(IdentitySignature&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IdentitySignature& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IdentitySignature* internal_default_instance() {
    return reinterpret_cast<const IdentitySignature*>(
               &_IdentitySignature_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(IdentitySignature* other);
  friend void swap(IdentitySignature& a, IdentitySignature& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IdentitySignature* New() const final {
    return CreateMaybeMessage<IdentitySignature>(NULL);
  }

  IdentitySignature* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IdentitySignature>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IdentitySignature& from);
  void MergeFrom(const IdentitySignature& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IdentitySignature* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string signature = 1;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const char* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // @@protoc_insertion_point(class_scope:e8.IdentitySignature)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_identity_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Identity

// int64 expiry_timestamp = 1;
inline void Identity::clear_expiry_timestamp() {
  expiry_timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Identity::expiry_timestamp() const {
  // @@protoc_insertion_point(field_get:e8.Identity.expiry_timestamp)
  return expiry_timestamp_;
}
inline void Identity::set_expiry_timestamp(::google::protobuf::int64 value) {
  
  expiry_timestamp_ = value;
  // @@protoc_insertion_point(field_set:e8.Identity.expiry_timestamp)
}

// int64 user_id = 2;
inline void Identity::clear_user_id() {
  user_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Identity::user_id() const {
  // @@protoc_insertion_point(field_get:e8.Identity.user_id)
  return user_id_;
}
inline void Identity::set_user_id(::google::protobuf::int64 value) {
  
  user_id_ = value;
  // @@protoc_insertion_point(field_set:e8.Identity.user_id)
}

// repeated string group_names = 3;
inline int Identity::group_names_size() const {
  return group_names_.size();
}
inline void Identity::clear_group_names() {
  group_names_.Clear();
}
inline const ::std::string& Identity::group_names(int index) const {
  // @@protoc_insertion_point(field_get:e8.Identity.group_names)
  return group_names_.Get(index);
}
inline ::std::string* Identity::mutable_group_names(int index) {
  // @@protoc_insertion_point(field_mutable:e8.Identity.group_names)
  return group_names_.Mutable(index);
}
inline void Identity::set_group_names(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:e8.Identity.group_names)
  group_names_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Identity::set_group_names(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:e8.Identity.group_names)
  group_names_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Identity::set_group_names(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  group_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:e8.Identity.group_names)
}
inline void Identity::set_group_names(int index, const char* value, size_t size) {
  group_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:e8.Identity.group_names)
}
inline ::std::string* Identity::add_group_names() {
  // @@protoc_insertion_point(field_add_mutable:e8.Identity.group_names)
  return group_names_.Add();
}
inline void Identity::add_group_names(const ::std::string& value) {
  group_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:e8.Identity.group_names)
}
#if LANG_CXX11
inline void Identity::add_group_names(::std::string&& value) {
  group_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:e8.Identity.group_names)
}
#endif
inline void Identity::add_group_names(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  group_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:e8.Identity.group_names)
}
inline void Identity::add_group_names(const char* value, size_t size) {
  group_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:e8.Identity.group_names)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Identity::group_names() const {
  // @@protoc_insertion_point(field_list:e8.Identity.group_names)
  return group_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Identity::mutable_group_names() {
  // @@protoc_insertion_point(field_mutable_list:e8.Identity.group_names)
  return &group_names_;
}

// -------------------------------------------------------------------

// IdentitySignature

// string signature = 1;
inline void IdentitySignature::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IdentitySignature::signature() const {
  // @@protoc_insertion_point(field_get:e8.IdentitySignature.signature)
  return signature_.GetNoArena();
}
inline void IdentitySignature::set_signature(const ::std::string& value) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:e8.IdentitySignature.signature)
}
#if LANG_CXX11
inline void IdentitySignature::set_signature(::std::string&& value) {
  
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:e8.IdentitySignature.signature)
}
#endif
inline void IdentitySignature::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:e8.IdentitySignature.signature)
}
inline void IdentitySignature::set_signature(const char* value, size_t size) {
  
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:e8.IdentitySignature.signature)
}
inline ::std::string* IdentitySignature::mutable_signature() {
  
  // @@protoc_insertion_point(field_mutable:e8.IdentitySignature.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IdentitySignature::release_signature() {
  // @@protoc_insertion_point(field_release:e8.IdentitySignature.signature)
  
  return signature_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IdentitySignature::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:e8.IdentitySignature.signature)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace e8

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_identity_2eproto
