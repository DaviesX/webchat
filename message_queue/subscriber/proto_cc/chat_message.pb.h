// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat_message.proto

#ifndef PROTOBUF_INCLUDED_chat_5fmessage_2eproto
#define PROTOBUF_INCLUDED_chat_5fmessage_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "file.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_chat_5fmessage_2eproto 

namespace protobuf_chat_5fmessage_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_chat_5fmessage_2eproto
namespace e8 {
class ChatMessageEntry;
class ChatMessageEntryDefaultTypeInternal;
extern ChatMessageEntryDefaultTypeInternal _ChatMessageEntry_default_instance_;
class ChatMessageThread;
class ChatMessageThreadDefaultTypeInternal;
extern ChatMessageThreadDefaultTypeInternal _ChatMessageThread_default_instance_;
}  // namespace e8
namespace google {
namespace protobuf {
template<> ::e8::ChatMessageEntry* Arena::CreateMaybeMessage<::e8::ChatMessageEntry>(Arena*);
template<> ::e8::ChatMessageThread* Arena::CreateMaybeMessage<::e8::ChatMessageThread>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace e8 {

// ===================================================================

class ChatMessageEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.ChatMessageEntry) */ {
 public:
  ChatMessageEntry();
  virtual ~ChatMessageEntry();

  ChatMessageEntry(const ChatMessageEntry& from);

  inline ChatMessageEntry& operator=(const ChatMessageEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatMessageEntry(ChatMessageEntry&& from) noexcept
    : ChatMessageEntry() {
    *this = ::std::move(from);
  }

  inline ChatMessageEntry& operator=(ChatMessageEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessageEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMessageEntry* internal_default_instance() {
    return reinterpret_cast<const ChatMessageEntry*>(
               &_ChatMessageEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ChatMessageEntry* other);
  friend void swap(ChatMessageEntry& a, ChatMessageEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatMessageEntry* New() const final {
    return CreateMaybeMessage<ChatMessageEntry>(NULL);
  }

  ChatMessageEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessageEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatMessageEntry& from);
  void MergeFrom(const ChatMessageEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessageEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string messages = 4;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 4;
  const ::std::string& messages(int index) const;
  ::std::string* mutable_messages(int index);
  void set_messages(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_messages(int index, ::std::string&& value);
  #endif
  void set_messages(int index, const char* value);
  void set_messages(int index, const char* value, size_t size);
  ::std::string* add_messages();
  void add_messages(const ::std::string& value);
  #if LANG_CXX11
  void add_messages(::std::string&& value);
  #endif
  void add_messages(const char* value);
  void add_messages(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& messages() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_messages();

  // repeated .e8.FileTokenAccess media_file_accesses = 5;
  int media_file_accesses_size() const;
  void clear_media_file_accesses();
  static const int kMediaFileAccessesFieldNumber = 5;
  ::e8::FileTokenAccess* mutable_media_file_accesses(int index);
  ::google::protobuf::RepeatedPtrField< ::e8::FileTokenAccess >*
      mutable_media_file_accesses();
  const ::e8::FileTokenAccess& media_file_accesses(int index) const;
  ::e8::FileTokenAccess* add_media_file_accesses();
  const ::google::protobuf::RepeatedPtrField< ::e8::FileTokenAccess >&
      media_file_accesses() const;

  // int64 thread_id = 1;
  void clear_thread_id();
  static const int kThreadIdFieldNumber = 1;
  ::google::protobuf::int64 thread_id() const;
  void set_thread_id(::google::protobuf::int64 value);

  // int64 message_id = 2;
  void clear_message_id();
  static const int kMessageIdFieldNumber = 2;
  ::google::protobuf::int64 message_id() const;
  void set_message_id(::google::protobuf::int64 value);

  // int64 sender_id = 3;
  void clear_sender_id();
  static const int kSenderIdFieldNumber = 3;
  ::google::protobuf::int64 sender_id() const;
  void set_sender_id(::google::protobuf::int64 value);

  // int64 created_at = 6;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 6;
  ::google::protobuf::int64 created_at() const;
  void set_created_at(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:e8.ChatMessageEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> messages_;
  ::google::protobuf::RepeatedPtrField< ::e8::FileTokenAccess > media_file_accesses_;
  ::google::protobuf::int64 thread_id_;
  ::google::protobuf::int64 message_id_;
  ::google::protobuf::int64 sender_id_;
  ::google::protobuf::int64 created_at_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_5fmessage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChatMessageThread : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:e8.ChatMessageThread) */ {
 public:
  ChatMessageThread();
  virtual ~ChatMessageThread();

  ChatMessageThread(const ChatMessageThread& from);

  inline ChatMessageThread& operator=(const ChatMessageThread& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChatMessageThread(ChatMessageThread&& from) noexcept
    : ChatMessageThread() {
    *this = ::std::move(from);
  }

  inline ChatMessageThread& operator=(ChatMessageThread&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChatMessageThread& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChatMessageThread* internal_default_instance() {
    return reinterpret_cast<const ChatMessageThread*>(
               &_ChatMessageThread_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ChatMessageThread* other);
  friend void swap(ChatMessageThread& a, ChatMessageThread& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChatMessageThread* New() const final {
    return CreateMaybeMessage<ChatMessageThread>(NULL);
  }

  ChatMessageThread* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChatMessageThread>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChatMessageThread& from);
  void MergeFrom(const ChatMessageThread& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChatMessageThread* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .e8.ChatMessageEntry messages = 4;
  int messages_size() const;
  void clear_messages();
  static const int kMessagesFieldNumber = 4;
  ::e8::ChatMessageEntry* mutable_messages(int index);
  ::google::protobuf::RepeatedPtrField< ::e8::ChatMessageEntry >*
      mutable_messages();
  const ::e8::ChatMessageEntry& messages(int index) const;
  ::e8::ChatMessageEntry* add_messages();
  const ::google::protobuf::RepeatedPtrField< ::e8::ChatMessageEntry >&
      messages() const;

  // string thread_title = 2;
  void clear_thread_title();
  static const int kThreadTitleFieldNumber = 2;
  const ::std::string& thread_title() const;
  void set_thread_title(const ::std::string& value);
  #if LANG_CXX11
  void set_thread_title(::std::string&& value);
  #endif
  void set_thread_title(const char* value);
  void set_thread_title(const char* value, size_t size);
  ::std::string* mutable_thread_title();
  ::std::string* release_thread_title();
  void set_allocated_thread_title(::std::string* thread_title);

  // int64 thread_id = 1;
  void clear_thread_id();
  static const int kThreadIdFieldNumber = 1;
  ::google::protobuf::int64 thread_id() const;
  void set_thread_id(::google::protobuf::int64 value);

  // int64 created_at = 3;
  void clear_created_at();
  static const int kCreatedAtFieldNumber = 3;
  ::google::protobuf::int64 created_at() const;
  void set_created_at(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:e8.ChatMessageThread)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::e8::ChatMessageEntry > messages_;
  ::google::protobuf::internal::ArenaStringPtr thread_title_;
  ::google::protobuf::int64 thread_id_;
  ::google::protobuf::int64 created_at_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_chat_5fmessage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChatMessageEntry

// int64 thread_id = 1;
inline void ChatMessageEntry::clear_thread_id() {
  thread_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChatMessageEntry::thread_id() const {
  // @@protoc_insertion_point(field_get:e8.ChatMessageEntry.thread_id)
  return thread_id_;
}
inline void ChatMessageEntry::set_thread_id(::google::protobuf::int64 value) {
  
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:e8.ChatMessageEntry.thread_id)
}

// int64 message_id = 2;
inline void ChatMessageEntry::clear_message_id() {
  message_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChatMessageEntry::message_id() const {
  // @@protoc_insertion_point(field_get:e8.ChatMessageEntry.message_id)
  return message_id_;
}
inline void ChatMessageEntry::set_message_id(::google::protobuf::int64 value) {
  
  message_id_ = value;
  // @@protoc_insertion_point(field_set:e8.ChatMessageEntry.message_id)
}

// int64 sender_id = 3;
inline void ChatMessageEntry::clear_sender_id() {
  sender_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChatMessageEntry::sender_id() const {
  // @@protoc_insertion_point(field_get:e8.ChatMessageEntry.sender_id)
  return sender_id_;
}
inline void ChatMessageEntry::set_sender_id(::google::protobuf::int64 value) {
  
  sender_id_ = value;
  // @@protoc_insertion_point(field_set:e8.ChatMessageEntry.sender_id)
}

// repeated string messages = 4;
inline int ChatMessageEntry::messages_size() const {
  return messages_.size();
}
inline void ChatMessageEntry::clear_messages() {
  messages_.Clear();
}
inline const ::std::string& ChatMessageEntry::messages(int index) const {
  // @@protoc_insertion_point(field_get:e8.ChatMessageEntry.messages)
  return messages_.Get(index);
}
inline ::std::string* ChatMessageEntry::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:e8.ChatMessageEntry.messages)
  return messages_.Mutable(index);
}
inline void ChatMessageEntry::set_messages(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:e8.ChatMessageEntry.messages)
  messages_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChatMessageEntry::set_messages(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:e8.ChatMessageEntry.messages)
  messages_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChatMessageEntry::set_messages(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  messages_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:e8.ChatMessageEntry.messages)
}
inline void ChatMessageEntry::set_messages(int index, const char* value, size_t size) {
  messages_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:e8.ChatMessageEntry.messages)
}
inline ::std::string* ChatMessageEntry::add_messages() {
  // @@protoc_insertion_point(field_add_mutable:e8.ChatMessageEntry.messages)
  return messages_.Add();
}
inline void ChatMessageEntry::add_messages(const ::std::string& value) {
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:e8.ChatMessageEntry.messages)
}
#if LANG_CXX11
inline void ChatMessageEntry::add_messages(::std::string&& value) {
  messages_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:e8.ChatMessageEntry.messages)
}
#endif
inline void ChatMessageEntry::add_messages(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  messages_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:e8.ChatMessageEntry.messages)
}
inline void ChatMessageEntry::add_messages(const char* value, size_t size) {
  messages_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:e8.ChatMessageEntry.messages)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChatMessageEntry::messages() const {
  // @@protoc_insertion_point(field_list:e8.ChatMessageEntry.messages)
  return messages_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChatMessageEntry::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:e8.ChatMessageEntry.messages)
  return &messages_;
}

// repeated .e8.FileTokenAccess media_file_accesses = 5;
inline int ChatMessageEntry::media_file_accesses_size() const {
  return media_file_accesses_.size();
}
inline ::e8::FileTokenAccess* ChatMessageEntry::mutable_media_file_accesses(int index) {
  // @@protoc_insertion_point(field_mutable:e8.ChatMessageEntry.media_file_accesses)
  return media_file_accesses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::e8::FileTokenAccess >*
ChatMessageEntry::mutable_media_file_accesses() {
  // @@protoc_insertion_point(field_mutable_list:e8.ChatMessageEntry.media_file_accesses)
  return &media_file_accesses_;
}
inline const ::e8::FileTokenAccess& ChatMessageEntry::media_file_accesses(int index) const {
  // @@protoc_insertion_point(field_get:e8.ChatMessageEntry.media_file_accesses)
  return media_file_accesses_.Get(index);
}
inline ::e8::FileTokenAccess* ChatMessageEntry::add_media_file_accesses() {
  // @@protoc_insertion_point(field_add:e8.ChatMessageEntry.media_file_accesses)
  return media_file_accesses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::e8::FileTokenAccess >&
ChatMessageEntry::media_file_accesses() const {
  // @@protoc_insertion_point(field_list:e8.ChatMessageEntry.media_file_accesses)
  return media_file_accesses_;
}

// int64 created_at = 6;
inline void ChatMessageEntry::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChatMessageEntry::created_at() const {
  // @@protoc_insertion_point(field_get:e8.ChatMessageEntry.created_at)
  return created_at_;
}
inline void ChatMessageEntry::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:e8.ChatMessageEntry.created_at)
}

// -------------------------------------------------------------------

// ChatMessageThread

// int64 thread_id = 1;
inline void ChatMessageThread::clear_thread_id() {
  thread_id_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChatMessageThread::thread_id() const {
  // @@protoc_insertion_point(field_get:e8.ChatMessageThread.thread_id)
  return thread_id_;
}
inline void ChatMessageThread::set_thread_id(::google::protobuf::int64 value) {
  
  thread_id_ = value;
  // @@protoc_insertion_point(field_set:e8.ChatMessageThread.thread_id)
}

// string thread_title = 2;
inline void ChatMessageThread::clear_thread_title() {
  thread_title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChatMessageThread::thread_title() const {
  // @@protoc_insertion_point(field_get:e8.ChatMessageThread.thread_title)
  return thread_title_.GetNoArena();
}
inline void ChatMessageThread::set_thread_title(const ::std::string& value) {
  
  thread_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:e8.ChatMessageThread.thread_title)
}
#if LANG_CXX11
inline void ChatMessageThread::set_thread_title(::std::string&& value) {
  
  thread_title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:e8.ChatMessageThread.thread_title)
}
#endif
inline void ChatMessageThread::set_thread_title(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  thread_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:e8.ChatMessageThread.thread_title)
}
inline void ChatMessageThread::set_thread_title(const char* value, size_t size) {
  
  thread_title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:e8.ChatMessageThread.thread_title)
}
inline ::std::string* ChatMessageThread::mutable_thread_title() {
  
  // @@protoc_insertion_point(field_mutable:e8.ChatMessageThread.thread_title)
  return thread_title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChatMessageThread::release_thread_title() {
  // @@protoc_insertion_point(field_release:e8.ChatMessageThread.thread_title)
  
  return thread_title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChatMessageThread::set_allocated_thread_title(::std::string* thread_title) {
  if (thread_title != NULL) {
    
  } else {
    
  }
  thread_title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), thread_title);
  // @@protoc_insertion_point(field_set_allocated:e8.ChatMessageThread.thread_title)
}

// int64 created_at = 3;
inline void ChatMessageThread::clear_created_at() {
  created_at_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 ChatMessageThread::created_at() const {
  // @@protoc_insertion_point(field_get:e8.ChatMessageThread.created_at)
  return created_at_;
}
inline void ChatMessageThread::set_created_at(::google::protobuf::int64 value) {
  
  created_at_ = value;
  // @@protoc_insertion_point(field_set:e8.ChatMessageThread.created_at)
}

// repeated .e8.ChatMessageEntry messages = 4;
inline int ChatMessageThread::messages_size() const {
  return messages_.size();
}
inline void ChatMessageThread::clear_messages() {
  messages_.Clear();
}
inline ::e8::ChatMessageEntry* ChatMessageThread::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:e8.ChatMessageThread.messages)
  return messages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::e8::ChatMessageEntry >*
ChatMessageThread::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:e8.ChatMessageThread.messages)
  return &messages_;
}
inline const ::e8::ChatMessageEntry& ChatMessageThread::messages(int index) const {
  // @@protoc_insertion_point(field_get:e8.ChatMessageThread.messages)
  return messages_.Get(index);
}
inline ::e8::ChatMessageEntry* ChatMessageThread::add_messages() {
  // @@protoc_insertion_point(field_add:e8.ChatMessageThread.messages)
  return messages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::e8::ChatMessageEntry >&
ChatMessageThread::messages() const {
  // @@protoc_insertion_point(field_list:e8.ChatMessageThread.messages)
  return messages_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace e8

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_chat_5fmessage_2eproto
